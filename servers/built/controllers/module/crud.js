'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getType = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _boom = require('boom');

var _boom2 = _interopRequireDefault(_boom);

var _sequelize = require('sequelize');

var _sequelize2 = _interopRequireDefault(_sequelize);

var _db = require('../../utils/db');

var _db2 = _interopRequireDefault(_db);

var _2 = require('../');

var _3 = _interopRequireDefault(_2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getType = exports.getType = function getType(attr) {
    var ret = {},
        form = {};

    switch (attr.type.constructor) {
        case _sequelize2.default.DataTypes.STRING:
        case _sequelize2.default.DataTypes.TEXT:
            ret = {
                type: "string",
                title: attr.field
            };
            form = {
                key: attr.field,
                type: "text"
            };
            break;
        case _sequelize2.default.DataTypes.BOOLEAN:
            ret = {
                type: "string",
                title: attr.field
            };
            form = {
                key: attr.field,
                type: "checkbox"
            };
            break;
        case _sequelize2.default.DataTypes.INTEGER:
            ret = {
                type: "number",
                title: attr.field
            };
            form = {
                key: attr.field,
                type: "number"
            };
            break;
    }

    return {
        data: ret,
        form: form
    };
};

exports.default = function (sequelizeModel) {
    return function () {
        var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(ctx, next) {
            var trans, body, schamaData, schemaFormAdd, schemaFormEdit, columns, interface1, listAction, addAction, editAction, searchAction, deleteAction, schemaData, schemaAddForm, schemaEditForm, schemaSearchForm;
            return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _context.next = 2;
                            return _db2.default.sequelize.transaction();

                        case 2:
                            trans = _context.sent;
                            body = ctx.request.body;

                            if (!((typeof body === 'undefined' ? 'undefined' : (0, _typeof3.default)(body)) !== "object" || !body.key)) {
                                _context.next = 6;
                                break;
                            }

                            throw _boom2.default.badData('数据没有填写完整!');

                        case 6:

                            sequelizeModel = _db2.default.models[body.key];

                            if (sequelizeModel) {
                                _context.next = 9;
                                break;
                            }

                            throw _boom2.default.badData('\u627E\u4E0D\u5230id:' + body.key + '\u7684\u6A21\u578B!');

                        case 9:
                            schamaData = {
                                type: "object",
                                required: [],
                                properties: {}
                            };
                            schemaFormAdd = [];
                            schemaFormEdit = [];
                            columns = [];


                            _lodash2.default.forEach(sequelizeModel.attributes, function (attr, key) {
                                if (!attr.primary && !attr._autoGenerated && (attr.unique || !attr.allowNull)) {
                                    schamaData.required.push(key);
                                }
                                if (!attr.primary && !attr._autoGenerated) {
                                    schamaData.properties[key] = getType(attr).data;
                                    schemaFormAdd.push(getType(attr).form);
                                    schemaFormEdit.push(getType(attr).form);
                                }

                                columns.push({
                                    "content": '<span>{{ ::item.' + key + ' }}</span>',
                                    "title": key,
                                    "name": key,
                                    "sort": ""
                                });
                            });

                            interface1 = {
                                "jpp": { "set": [{ "from": "/rows", "to": "/rows" }, { "from": "/total", "to": "/count" }], "del": ["/id"] },
                                "idFieldPath": ["/id"],
                                "key": body.key,
                                "group": body.key,
                                "protocol": "http",
                                "path": body.key + "s",
                                "description": body.title + 'CRUD\u63A5\u53E3',
                                "isRestful": true
                            };
                            listAction = {
                                "itemActions": [{ "key": body.key + 'EditAction' }, { "key": body.key + 'DeleteAction' }],
                                "actions": [body.key + 'AddAction'],
                                "list": {
                                    "showPagination": true,
                                    "showSearchBtn": false,
                                    "showRefreshBtn": true,
                                    "showSearchPanel": false,
                                    "columns": columns,
                                    "queryData": { "limit": 10 },
                                    "searchActionKey": body.key + 'SearchAction'
                                },
                                "interfaces": [{
                                    "key": interface1.key,
                                    "method": 0,
                                    "idFieldPath": [],
                                    "path": interface1.path,
                                    "isRestful": true,
                                    "description": interface1.description,
                                    "jpp": interface1.jpp
                                }],
                                "key": body.key,
                                "type": 1,
                                "icon": "apps",
                                "title": body.title,
                                "refreshList": false,
                                "closeDialog": false,
                                "group": body.key
                            };
                            addAction = {
                                "form": { "dataSchema": body.key + 'ActionData', "formSchema": body.key + 'ActionAddForm' },
                                "interfaces": [{
                                    "key": interface1.key,
                                    "method": 1,
                                    "idFieldPath": [],
                                    "path": interface1.path,
                                    "isRestful": true,
                                    "description": interface1.description,
                                    "jpp": _lodash2.default.extend({}, interface1.jpp, { set: {}, del: [] })
                                }],
                                "key": body.key + 'AddAction',
                                "type": 2,
                                "icon": "add",
                                "title": '\u521B\u5EFA' + body.title,
                                "successMsg": null,
                                "refreshList": true,
                                "closeDialog": true,
                                "group": body.key
                            };
                            editAction = {
                                "form": { "dataSchema": body.key + 'ActionData', "formSchema": body.key + 'ActionEditForm' },
                                "interfaces": [{
                                    "key": interface1.key,
                                    "method": 3,
                                    "idFieldPath": ["/id"],
                                    "path": interface1.path,
                                    "isRestful": true,
                                    "description": interface1.description,
                                    "jpp": _lodash2.default.extend({}, interface1.jpp, { set: {}, del: [] })
                                }],
                                "key": body.key + 'EditAction',
                                "type": 2,
                                "icon": "add",
                                "title": '\u4FEE\u6539' + body.title,
                                "successMsg": null,
                                "refreshList": true,
                                "closeDialog": true,
                                "group": body.key
                            };
                            searchAction = {
                                "form": { "dataSchema": body.key + 'ActionData', "formSchema": body.key + 'ActionSearchForm' },
                                "interfaces": [],
                                "key": body.key + 'SearchAction',
                                "type": 2,
                                "icon": "search",
                                "title": '\u641C\u7D22' + body.title,
                                "successMsg": null,
                                "refreshList": true,
                                "closeDialog": true,
                                "group": body.key
                            };
                            deleteAction = {
                                "confirm": { "confirmContent": "确定要删除吗!" },
                                "interfaces": [{
                                    "key": interface1.key,
                                    "method": 2,
                                    "idFieldPath": ["/id"],
                                    "path": interface1.path,
                                    "isRestful": true,
                                    "description": interface1.description,
                                    "jpp": _lodash2.default.extend({}, interface1.jpp, { set: {}, del: [] })
                                }],
                                "key": body.key + 'DeleteAction',
                                "type": 4,
                                "icon": "delete",
                                "title": '\u5220\u9664' + body.title,
                                "successMsg": null,
                                "refreshList": true,
                                "closeDialog": true,
                                "group": body.key
                            };
                            schemaData = {
                                text: schamaData,
                                type: "DATA",
                                key: body.key + 'ActionData',
                                group: body.key,
                                description: '' + body.key + body.title + '\u8868\u5355\u6570\u636E\u5B57\u6BB5\u63CF\u8FF0'
                            };
                            schemaAddForm = {
                                textForm: schemaFormAdd,
                                type: "FORM",
                                key: body.key + 'ActionAddForm',
                                group: body.key,
                                description: '' + body.key + body.title + '\u65B0\u589E\u8868\u5355\u5B57\u6BB5\u63CF\u8FF0'
                            };
                            schemaEditForm = {
                                textForm: schemaFormEdit,
                                type: "FORM",
                                key: body.key + 'ActionEditForm',
                                group: body.key,
                                description: '' + body.key + body.title + '\u66F4\u65B0\u8868\u5355\u5B57\u6BB5\u63CF\u8FF0'
                            };
                            schemaSearchForm = {
                                textForm: [],
                                type: "FORM",
                                key: body.key + 'ActionSearchForm',
                                group: body.key,
                                description: '' + body.key + body.title + '\u65B0\u589E\u641C\u7D22\u5B57\u6BB5\u63CF\u8FF0'
                            };
                            _context.prev = 24;
                            _context.next = 27;
                            return _db2.default.sequelize.query('delete from `interface` where `group` = $1', {
                                transaction: trans,
                                bind: [body.key]
                            });

                        case 27:
                            _context.next = 29;
                            return _db2.default.sequelize.query('delete from `schema` where `group` = $1', {
                                transaction: trans,
                                bind: [body.key]
                            });

                        case 29:
                            _context.next = 31;
                            return _db2.default.sequelize.query('delete from `action` where `group` = $1', {
                                transaction: trans,
                                bind: [body.key]
                            });

                        case 31:
                            _context.next = 33;
                            return _db2.default.models["interface"].bulkCreate([interface1], { validate: true, transaction: trans });

                        case 33:
                            _context.next = 35;
                            return _db2.default.models["schema"].bulkCreate([schemaData, schemaAddForm, schemaEditForm, schemaSearchForm], { validate: true, transaction: trans });

                        case 35:
                            _context.next = 37;
                            return _db2.default.models["action"].bulkCreate([listAction, editAction, searchAction, addAction, deleteAction], { validate: true, transaction: trans });

                        case 37:
                            _context.next = 39;
                            return trans.commit();

                        case 39:
                            _context.next = 47;
                            break;

                        case 41:
                            _context.prev = 41;
                            _context.t0 = _context['catch'](24);
                            _context.next = 45;
                            return trans.rollback();

                        case 45:
                            console.log(_context.t0);
                            throw _context.t0;

                        case 47:

                            ctx.body = {
                                schamaData: schamaData,
                                schemaAddForm: schemaAddForm,
                                schemaEditForm: schemaEditForm,
                                interface1: interface1,
                                deleteAction: deleteAction,
                                addAction: addAction,
                                editAction: editAction,
                                listAction: listAction
                            };

                        case 48:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, undefined, [[24, 41]]);
        }));

        return function (_x, _x2) {
            return _ref.apply(this, arguments);
        };
    }();
};