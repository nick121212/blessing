{"version":3,"sources":["../../src/lib/router.middleware.js"],"names":["SpaRouter","keys","proxy","app","exports","extend","fn","forEach","val","key","data","context","async","callback","retId","routerKey","clone","params","ctx","next","hasOwnProperty","func"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;IAEaA,S,WAAAA,S;;;AACT,yBAAc;AAAA;;AAAA;;AAGV,cAAKC,IAAL,GAAY,EAAZ;AAHU;AAIb;;AAED;;;;;;;+BAGOC,K,EAAOC,G,EAAK;AAAA;;AACf,iBAAKD,KAAL,GAAaA,KAAb;AACA,iBAAKA,KAAL,CAAWE,OAAX,GAAqB,iBAAEC,MAAF,CAAS,EAAT,EAAa,KAAKH,KAAL,CAAWE,OAAX,IAAsB,EAAnC,CAArB;;AAEA,gBAAIE,WAAJ;;AAEA,6BAAEC,OAAF,CAAU,KAAKN,IAAf,EAAqB,UAACO,GAAD,EAAMC,GAAN,EAAc;AAC/B,uBAAKP,KAAL,CAAWE,OAAX,CAAmBK,GAAnB,IAA0B,UAASC,IAAT,EAAe;AACrC,wBAAIC,UAAU,IAAd;AACAA,4BAAQC,KAAR,GAAgB,IAAhB;AACA,wBAAI,CAACN,EAAL,EAAS;AACLA,6BAAKH,IAAIU,QAAJ,EAAL;AACH;AACD,wBAAI,CAACF,QAAQG,KAAb,EAAoB;;AAEpBR,uBAAG;AACCS,mCAAWN,GADZ;AAECE,iCAAS,iBAAEK,KAAF,CAAQL,OAAR,CAFV;AAGCM,gCAAQP,QAAQ,EAHjB;AAICR,+BAAOA;AAJR,qBAAH;AAMH,iBAdD;AAeH,aAhBD;;AAkBA;AAAA,sFAAO,iBAAMgB,GAAN,EAAWC,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA,yCACC,OAAKlB,IAAL,CAAUmB,cAAV,CAAyBF,IAAIH,SAA7B,CADD;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAEO,OAAKd,IAAL,CAAUiB,IAAIH,SAAd,EAAyBG,GAAzB,EAA8BC,IAA9B,CAFP;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,2CAIOA,MAJP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAP;;AAAA;AAAA;AAAA;AAAA;AAOH;;AAED;;;;;;4CAGoBV,G,EAAKY,I,EAAM;AAC3B,iBAAKpB,IAAL,CAAUQ,GAAV,IAAiBY,IAAjB;AACH","file":"router.middleware.js","sourcesContent":["import _ from \"lodash\";\nimport boom from \"boom\";\nimport { EventEmitter } from \"events\";\n\nexport class SpaRouter extends EventEmitter {\n    constructor() {\n        super();\n\n        this.keys = {};\n    }\n\n    /**\n     * 开始中间件\n     */\n    attach(proxy, app) {\n        this.proxy = proxy;\n        this.proxy.exports = _.extend({}, this.proxy.exports || {});\n\n        let fn;\n\n        _.forEach(this.keys, (val, key) => {\n            this.proxy.exports[key] = function(data) {\n                let context = this;\n                context.async = true;\n                if (!fn) {\n                    fn = app.callback();\n                }\n                if (!context.retId) return;\n\n                fn({\n                    routerKey: key,\n                    context: _.clone(context),\n                    params: data || {},\n                    proxy: proxy\n                });\n            };\n        });\n\n        return async(ctx, next) => {\n            if (this.keys.hasOwnProperty(ctx.routerKey)) {\n                await this.keys[ctx.routerKey](ctx, next);\n            } else {\n                await next();\n            }\n        };\n    }\n\n    /**\n     * 添加路由方法\n     */\n    attachRouteToSocket(key, func) {\n        this.keys[key] = func;\n    }\n\n}"]}