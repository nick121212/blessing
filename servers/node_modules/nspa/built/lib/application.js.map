{"version":3,"sources":["../../src/lib/application.js"],"names":["SpaRouter","keys","app","spaEureca","fn","callback","eureca","exports","extend","forEach","val","key","data","context","async","retId","routerKey","clone","params","proxy","ctx","next","hasOwnProperty","func","SpaServer","config","events","_server","_connections","init","transport","allow","on","connection","id","socket","emit","connectionObject","SpaClient","_client","uri","prefix","isReady","serverProxy","Spa","_maxJobs","err","console","log","jobs","return","body","spaClient","spaServer","attach"],"mappings":"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","file":"application.js","sourcesContent":["/**\n * Created by NICK on 2016/12/16.\n */\n\nimport { Server, Client } from \"eureca.io\";\nimport { EventEmitter } from \"events\";\nimport { Compose } from \"./compose\";\nimport _ from \"lodash\";\n\nexport class SpaRouter extends EventEmitter {\n    constructor() {\n        super();\n\n        this.keys = {};\n    }\n\n    get eureca() {\n        return null;\n    }\n\n    /**\n     * 开始中间件\n     */\n    attach(app, spaEureca) {\n        let fn = app.callback();\n\n        spaEureca.eureca.exports = _.extend({}, spaEureca.eureca.exports || {});\n        _.forEach(this.keys, (val, key) => {\n            spaEureca.eureca.exports[key] = function(data) {\n                let context = this;\n                context.async = true;\n                if (!context.retId) return;\n                fn({\n                    routerKey: key,\n                    context: _.clone(context),\n                    params: data || {},\n                    proxy: spaEureca\n                });\n            };\n        });\n\n        return async(ctx, next) => {\n            if (this.keys.hasOwnProperty(ctx.routerKey)) {\n                await this.keys[ctx.routerKey](ctx, next);\n            } else {\n                await next();\n            }\n        };\n    }\n\n    /**\n     * 添加路由方法\n     */\n    attachRouteToSocket(key, func) {\n        this.keys[key] = func;\n    }\n}\n\nexport class SpaServer extends SpaRouter {\n    constructor(config, events) {\n        super();\n\n        this._server = null;\n        this._connections = {};\n\n        this.init(config, events);\n    }\n\n    get eureca() {\n        return this._server;\n    }\n\n    get connections() {\n        return this._connections;\n    }\n\n    attach(app) {\n        return super.attach(app, this);\n    }\n\n    init(config, events = {}) {\n        this._server = new Server({\n            transport: config.transport,\n            allow: config.allow || []\n        });\n        this._server.exports = {};\n\n        _.forEach(events, (fn, key) => {\n            if (key !== \"connect\" && key !== \"disconnect\") {\n                this._server.on(key, (data) => {\n                    fn(this, data);\n                });\n            }\n        });\n\n        this._server.on(\"connect\", (connection) => {\n            this._connections[connection.id] = {\n                socket: connection\n            };\n            this.emit(\"onconnect\", connection, this._connections[connection.id]);\n        });\n        this._server.on(\"disconnect\", (connection) => {\n            let connectionObject = this._connections[connection.id];\n\n            if (this._connections[connection.id]) {\n                delete this._connections[connection.id];\n            }\n            this.emit(\"ondisconnect\", connection, connectionObject);\n        });\n        return this._server;\n    }\n}\n\nexport class SpaClient extends SpaRouter {\n    constructor(config, events) {\n        super();\n        this._client = null;\n        this.init(config, events);\n    }\n\n    get connections() {\n        return {};\n    }\n\n    get eureca() {\n        return this._client;\n    }\n\n    get proxy() {\n        if (this._client && this._client.isReady()) {\n            return this._client.serverProxy;\n        }\n    }\n\n    attach(app) {\n        return super.attach(app, this);\n    }\n\n    init(config, events = {}) {\n        this._client = new Client({\n            uri: config.uri,\n            prefix: config.prefix || \"\"\n        });\n\n        _.forEach(events, (fn, key) => {\n            this._client.on(key, (data) => {\n                fn(this, data);\n            });\n        });\n    }\n}\n\nexport class Spa extends Compose {\n    constructor(_maxJobs) {\n        super(_maxJobs);\n    }\n\n    onComplete(ctx) {\n        if (ctx.err) {\n            console.log(\"onComplete-----\", ctx.err);\n        }\n        console.log(\"onComplete-----\", ctx.routerKey, ctx.app.jobs, \"retId:\", ctx.context.retId);\n        super.onComplete(ctx);\n        ctx.context.return && ctx.context.return(ctx.err || ctx.body);\n    }\n\n    initClient(config, events) {\n        this.spaClient = new SpaClient(config, events);\n    }\n\n    initServer(config, app, events) {\n        this.spaServer = new SpaServer(config, events);\n        this.spaServer.eureca.attach(app);\n    }\n}"]}