{
  "_args": [
    [
      {
        "raw": "waitjs@^0.2.0",
        "scope": null,
        "escapedName": "waitjs",
        "name": "waitjs",
        "rawSpec": "^0.2.0",
        "spec": ">=0.2.0 <0.3.0",
        "type": "range"
      },
      "/srv/blessing/servers/node_modules/nspa"
    ]
  ],
  "_from": "waitjs@>=0.2.0 <0.3.0",
  "_id": "waitjs@0.2.0",
  "_inCache": true,
  "_location": "/waitjs",
  "_phantomChildren": {},
  "_requested": {
    "raw": "waitjs@^0.2.0",
    "scope": null,
    "escapedName": "waitjs",
    "name": "waitjs",
    "rawSpec": "^0.2.0",
    "spec": ">=0.2.0 <0.3.0",
    "type": "range"
  },
  "_requiredBy": [
    "/nspa"
  ],
  "_resolved": "https://registry.npmjs.org/waitjs/-/waitjs-0.2.0.tgz",
  "_shasum": "606a19f1b5c6524274ec3f63287c167fa4326844",
  "_shrinkwrap": null,
  "_spec": "waitjs@^0.2.0",
  "_where": "/srv/blessing/servers/node_modules/nspa",
  "author": {
    "name": "Elving Rodriguez"
  },
  "bugs": {
    "url": "https://github.com/elving/wait/issues"
  },
  "dependencies": {},
  "description": "Syntactic sugar for setTimeout and setInterval.",
  "devDependencies": {
    "mocha": "1.6.0",
    "should": "1.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "606a19f1b5c6524274ec3f63287c167fa4326844",
    "tarball": "https://registry.npmjs.org/waitjs/-/waitjs-0.2.0.tgz"
  },
  "engines": {
    "node": "~0.6.10 || 0.8 || 0.9"
  },
  "homepage": "https://github.com/elving/wait#readme",
  "keywords": [
    "wait",
    "setTimeout",
    "setInterval",
    "repeat",
    "interval",
    "timeout"
  ],
  "main": "./wait.js",
  "maintainers": [
    {
      "name": "elving",
      "email": "elving.pr@gmail.com"
    }
  ],
  "name": "waitjs",
  "optionalDependencies": {},
  "readme": "# wait\nSyntactic sugar for setTimeout and setInterval.\n\n## wait(time, callback, id)\n\nSugar for setTimeout.\n\n    wait(100, function(){\n        // Do something in 100 milliseconds\n    });\n\n    wait('2s', function(){\n        // Do something in 2 seconds\n    });\n\n    wait('2 minutes', function(){\n        // Do something in 2 seconds\n    }, 'awesomeId');\n\n## repeat(time, callback, id, callBefore = false)\n\nSugar for setInterval.\n\nIf `callBefore` is true the callback will be executed before the interval.\n\n    repeat(100, function() {\n        // Do something every 100 milliseconds\n    });\n\n    repeat('1 min', function() {\n        // Do something every minute\n    }, 'awesomeId');\n\n    repeat('1 min', function() {\n        // Run immediately and every minute\n    }, true);\n\n    repeat('1 min', function() {\n        // Run immediately and every minute\n    }, 'awesomeId', true);\n\n## until(condition, callback, interval = 100, id)\n\nRuns the callback function when the condition is true. If you don't specify an interval the condition will be check every 100 milliseconds.\n\n    var condition = function() {\n        return 1 == 1;\n    };\n\n    until(condition, function() {\n        // Do something when 1 == 1\n    });\n\n    until(condition, function() {\n        // Check every second if 1 == 1 and do something.\n    }, '1 second');\n\n    until(condition, function() {\n        // Check every second if 1 == 1 and do something.\n    }, 150, 'coolId');\n\n## clear\n\nSyntactic sugar for clearInterval and clearTimeout\n\nThe `clear()` method can be used in 3 ways:\n\n    // Will clear all intervals and timeouts that where created with an id\n    clear();\n\n    // Will clear a timeout or interval given an id.\n    clear(id);\n\n    // The id can be two things.\n    var timeout = wait(100, callback);\n    clear(timeout);\n\n    wait(100, callback, 'awesome-id');\n    clear('awesome-id');\n\n    // Will clear all timeouts and intervals in an array.\n    clear([timeout, 'awesome-id']);\n\n## time\n\nTime can be specified in various formats:\n\n*If `time` is a number, it will be interpreted as milliseconds.*\n\n`100`, `1 second`, `3 minutes`, `1 hour`, `3 secs`, `1 min`, `2 hrs`, `1s`, `3m`, `2h`\n\n## Installation\n    npm install waitjs\n\n## Usage\n    // nodejs\n    require('wait');\n\n    <!-- browser -->\n    <script src=\"wait.js\"></script>\n\n## Tests\n    npm test\n",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/elving/wait.git"
  },
  "scripts": {
    "test": "mocha --reporter spec --timeout 6000"
  },
  "version": "0.2.0",
  "warnings": [
    {
      "code": "ENOTSUP",
      "required": {
        "node": "~0.6.10 || 0.8 || 0.9"
      },
      "pkgid": "waitjs@0.2.0"
    }
  ]
}
