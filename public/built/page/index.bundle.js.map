{"version":3,"sources":["webpack:///page/index.bundle.js","webpack:///./~/angular-loading-bar/index.js","webpack:///./src/pages/index/index.scss?802d","webpack:///./src/directives/loading/index.ts","webpack:///./~/angular-loading-bar/build/loading-bar.js","webpack:///./src/directives/loading/styles/loading.scss","webpack:///./src/pages/index/index.scss","webpack:///./src/directives/loading/tpls/loading.jade","webpack:///./src/directives/loading/styles/loading.scss?50a5","webpack:///./src/pages/index/index.ts"],"names":["webpackJsonp","173","module","exports","__webpack_require__","194","content","id","locals","199","Directive","restrict","template","scope","replace","link","$scope","_name","$inject","angular","directive","Object","defineProperty","value","name","214","config","$httpProvider","interceptor","$q","$cacheFactory","$timeout","$rootScope","$log","cfpLoadingBar","setComplete","cancel","startTimeout","complete","reqsCompleted","reqsTotal","isCached","cache","defaultCache","get","defaults","method","isObject","cached","undefined","url","latencyThreshold","request","ignoreLoadingBar","$broadcast","start","set","response","result","error","responseError","rejection","reject","interceptors","push","provider","this","autoIncrement","includeSpinner","includeBar","startSize","parentSelector","spinnerTemplate","loadingBarTemplate","$get","$injector","$document","_start","$animate","completeTimeout","started","document","parent","querySelector","$parentSelector","find","getElementsByTagName","$parent","element","$after","lastChild","enter","loadingBarContainer","spinner","_set","n","pct","loadingBar","css","status","incTimeout","_inc","_status","rnd","stat","Math","random","_completeAnimation","_complete","promise","leave","then","eq","inc","230","233","269","jade","jade_debug","DebugItem","buf","unshift","filename","shift","join","err","rethrow","lineno","309","347","$","loading_1","cfpLoadingBarProvider","bootstrap","call"],"mappings":"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","file":"page/index.bundle.js","sourcesContent":["webpackJsonp([5],{\n\n/***/ 173:\n/***/ function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(214);\n\tmodule.exports = 'angular-loading-bar';\n\n\n/***/ },\n\n/***/ 194:\n/***/ function(module, exports, __webpack_require__) {\n\n\t// style-loader: Adds some css to the DOM by adding a <style> tag\n\t\n\t// load the styles\n\tvar content = __webpack_require__(233);\n\tif(typeof content === 'string') content = [[module.id, content, '']];\n\t// add the styles to the DOM\n\tvar update = __webpack_require__(11)(content, {});\n\tif(content.locals) module.exports = content.locals;\n\t// Hot Module Replacement\n\tif(false) {\n\t\t// When the styles change, update the <style> tags\n\t\tif(!content.locals) {\n\t\t\tmodule.hot.accept(\"!!./../../../node_modules/css-loader/index.js!./../../../node_modules/sass-loader/index.js!./index.scss\", function() {\n\t\t\t\tvar newContent = require(\"!!./../../../node_modules/css-loader/index.js!./../../../node_modules/sass-loader/index.js!./index.scss\");\n\t\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\t\tupdate(newContent);\n\t\t\t});\n\t\t}\n\t\t// When the module is disposed, remove the <style> tags\n\t\tmodule.hot.dispose(function() { update(); });\n\t}\n\n/***/ },\n\n/***/ 199:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t__webpack_require__(309);\n\tvar _name = \"fxLoading\";\n\tfunction Directive() {\n\t    return {\n\t        restrict: 'EA',\n\t        template: __webpack_require__(269)(),\n\t        scope: {},\n\t        replace: false,\n\t        link: function ($scope) {\n\t        }\n\t    };\n\t}\n\tDirective.$inject = [];\n\tvar module = angular.module(_name + \"Module\", []).directive(_name, Directive);\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = \"\" + module.name;\n\n\n/***/ },\n\n/***/ 214:\n/***/ function(module, exports) {\n\n\t/*! \n\t * angular-loading-bar v0.9.0\n\t * https://chieffancypants.github.io/angular-loading-bar\n\t * Copyright (c) 2016 Wes Cruver\n\t * License: MIT\n\t */\n\t/*\n\t * angular-loading-bar\n\t *\n\t * intercepts XHR requests and creates a loading bar.\n\t * Based on the excellent nprogress work by rstacruz (more info in readme)\n\t *\n\t * (c) 2013 Wes Cruver\n\t * License: MIT\n\t */\n\t\n\t\n\t(function() {\n\t\n\t'use strict';\n\t\n\t// Alias the loading bar for various backwards compatibilities since the project has matured:\n\tangular.module('angular-loading-bar', ['cfp.loadingBarInterceptor']);\n\tangular.module('chieffancypants.loadingBar', ['cfp.loadingBarInterceptor']);\n\t\n\t\n\t/**\n\t * loadingBarInterceptor service\n\t *\n\t * Registers itself as an Angular interceptor and listens for XHR requests.\n\t */\n\tangular.module('cfp.loadingBarInterceptor', ['cfp.loadingBar'])\n\t  .config(['$httpProvider', function ($httpProvider) {\n\t\n\t    var interceptor = ['$q', '$cacheFactory', '$timeout', '$rootScope', '$log', 'cfpLoadingBar', function ($q, $cacheFactory, $timeout, $rootScope, $log, cfpLoadingBar) {\n\t\n\t      /**\n\t       * The total number of requests made\n\t       */\n\t      var reqsTotal = 0;\n\t\n\t      /**\n\t       * The number of requests completed (either successfully or not)\n\t       */\n\t      var reqsCompleted = 0;\n\t\n\t      /**\n\t       * The amount of time spent fetching before showing the loading bar\n\t       */\n\t      var latencyThreshold = cfpLoadingBar.latencyThreshold;\n\t\n\t      /**\n\t       * $timeout handle for latencyThreshold\n\t       */\n\t      var startTimeout;\n\t\n\t\n\t      /**\n\t       * calls cfpLoadingBar.complete() which removes the\n\t       * loading bar from the DOM.\n\t       */\n\t      function setComplete() {\n\t        $timeout.cancel(startTimeout);\n\t        cfpLoadingBar.complete();\n\t        reqsCompleted = 0;\n\t        reqsTotal = 0;\n\t      }\n\t\n\t      /**\n\t       * Determine if the response has already been cached\n\t       * @param  {Object}  config the config option from the request\n\t       * @return {Boolean} retrns true if cached, otherwise false\n\t       */\n\t      function isCached(config) {\n\t        var cache;\n\t        var defaultCache = $cacheFactory.get('$http');\n\t        var defaults = $httpProvider.defaults;\n\t\n\t        // Choose the proper cache source. Borrowed from angular: $http service\n\t        if ((config.cache || defaults.cache) && config.cache !== false &&\n\t          (config.method === 'GET' || config.method === 'JSONP')) {\n\t            cache = angular.isObject(config.cache) ? config.cache\n\t              : angular.isObject(defaults.cache) ? defaults.cache\n\t              : defaultCache;\n\t        }\n\t\n\t        var cached = cache !== undefined ?\n\t          cache.get(config.url) !== undefined : false;\n\t\n\t        if (config.cached !== undefined && cached !== config.cached) {\n\t          return config.cached;\n\t        }\n\t        config.cached = cached;\n\t        return cached;\n\t      }\n\t\n\t\n\t      return {\n\t        'request': function(config) {\n\t          // Check to make sure this request hasn't already been cached and that\n\t          // the requester didn't explicitly ask us to ignore this request:\n\t          if (!config.ignoreLoadingBar && !isCached(config)) {\n\t            $rootScope.$broadcast('cfpLoadingBar:loading', {url: config.url});\n\t            if (reqsTotal === 0) {\n\t              startTimeout = $timeout(function() {\n\t                cfpLoadingBar.start();\n\t              }, latencyThreshold);\n\t            }\n\t            reqsTotal++;\n\t            cfpLoadingBar.set(reqsCompleted / reqsTotal);\n\t          }\n\t          return config;\n\t        },\n\t\n\t        'response': function(response) {\n\t          if (!response || !response.config) {\n\t            $log.error('Broken interceptor detected: Config object not supplied in response:\\n https://github.com/chieffancypants/angular-loading-bar/pull/50');\n\t            return response;\n\t          }\n\t\n\t          if (!response.config.ignoreLoadingBar && !isCached(response.config)) {\n\t            reqsCompleted++;\n\t            $rootScope.$broadcast('cfpLoadingBar:loaded', {url: response.config.url, result: response});\n\t            if (reqsCompleted >= reqsTotal) {\n\t              setComplete();\n\t            } else {\n\t              cfpLoadingBar.set(reqsCompleted / reqsTotal);\n\t            }\n\t          }\n\t          return response;\n\t        },\n\t\n\t        'responseError': function(rejection) {\n\t          if (!rejection || !rejection.config) {\n\t            $log.error('Broken interceptor detected: Config object not supplied in rejection:\\n https://github.com/chieffancypants/angular-loading-bar/pull/50');\n\t            return $q.reject(rejection);\n\t          }\n\t\n\t          if (!rejection.config.ignoreLoadingBar && !isCached(rejection.config)) {\n\t            reqsCompleted++;\n\t            $rootScope.$broadcast('cfpLoadingBar:loaded', {url: rejection.config.url, result: rejection});\n\t            if (reqsCompleted >= reqsTotal) {\n\t              setComplete();\n\t            } else {\n\t              cfpLoadingBar.set(reqsCompleted / reqsTotal);\n\t            }\n\t          }\n\t          return $q.reject(rejection);\n\t        }\n\t      };\n\t    }];\n\t\n\t    $httpProvider.interceptors.push(interceptor);\n\t  }]);\n\t\n\t\n\t/**\n\t * Loading Bar\n\t *\n\t * This service handles adding and removing the actual element in the DOM.\n\t * Generally, best practices for DOM manipulation is to take place in a\n\t * directive, but because the element itself is injected in the DOM only upon\n\t * XHR requests, and it's likely needed on every view, the best option is to\n\t * use a service.\n\t */\n\tangular.module('cfp.loadingBar', [])\n\t  .provider('cfpLoadingBar', function() {\n\t\n\t    this.autoIncrement = true;\n\t    this.includeSpinner = true;\n\t    this.includeBar = true;\n\t    this.latencyThreshold = 100;\n\t    this.startSize = 0.02;\n\t    this.parentSelector = 'body';\n\t    this.spinnerTemplate = '<div id=\"loading-bar-spinner\"><div class=\"spinner-icon\"></div></div>';\n\t    this.loadingBarTemplate = '<div id=\"loading-bar\"><div class=\"bar\"><div class=\"peg\"></div></div></div>';\n\t\n\t    this.$get = ['$injector', '$document', '$timeout', '$rootScope', function ($injector, $document, $timeout, $rootScope) {\n\t      var $animate;\n\t      var $parentSelector = this.parentSelector,\n\t        loadingBarContainer = angular.element(this.loadingBarTemplate),\n\t        loadingBar = loadingBarContainer.find('div').eq(0),\n\t        spinner = angular.element(this.spinnerTemplate);\n\t\n\t      var incTimeout,\n\t        completeTimeout,\n\t        started = false,\n\t        status = 0;\n\t\n\t      var autoIncrement = this.autoIncrement;\n\t      var includeSpinner = this.includeSpinner;\n\t      var includeBar = this.includeBar;\n\t      var startSize = this.startSize;\n\t\n\t      /**\n\t       * Inserts the loading bar element into the dom, and sets it to 2%\n\t       */\n\t      function _start() {\n\t        if (!$animate) {\n\t          $animate = $injector.get('$animate');\n\t        }\n\t\n\t        $timeout.cancel(completeTimeout);\n\t\n\t        // do not continually broadcast the started event:\n\t        if (started) {\n\t          return;\n\t        }\n\t\n\t        var document = $document[0];\n\t        var parent = document.querySelector ?\n\t          document.querySelector($parentSelector)\n\t          : $document.find($parentSelector)[0]\n\t        ;\n\t\n\t        if (! parent) {\n\t          parent = document.getElementsByTagName('body')[0];\n\t        }\n\t\n\t        var $parent = angular.element(parent);\n\t        var $after = parent.lastChild && angular.element(parent.lastChild);\n\t\n\t        $rootScope.$broadcast('cfpLoadingBar:started');\n\t        started = true;\n\t\n\t        if (includeBar) {\n\t          $animate.enter(loadingBarContainer, $parent, $after);\n\t        }\n\t\n\t        if (includeSpinner) {\n\t          $animate.enter(spinner, $parent, loadingBarContainer);\n\t        }\n\t\n\t        _set(startSize);\n\t      }\n\t\n\t      /**\n\t       * Set the loading bar's width to a certain percent.\n\t       *\n\t       * @param n any value between 0 and 1\n\t       */\n\t      function _set(n) {\n\t        if (!started) {\n\t          return;\n\t        }\n\t        var pct = (n * 100) + '%';\n\t        loadingBar.css('width', pct);\n\t        status = n;\n\t\n\t        // increment loadingbar to give the illusion that there is always\n\t        // progress but make sure to cancel the previous timeouts so we don't\n\t        // have multiple incs running at the same time.\n\t        if (autoIncrement) {\n\t          $timeout.cancel(incTimeout);\n\t          incTimeout = $timeout(function() {\n\t            _inc();\n\t          }, 250);\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Increments the loading bar by a random amount\n\t       * but slows down as it progresses\n\t       */\n\t      function _inc() {\n\t        if (_status() >= 1) {\n\t          return;\n\t        }\n\t\n\t        var rnd = 0;\n\t\n\t        // TODO: do this mathmatically instead of through conditions\n\t\n\t        var stat = _status();\n\t        if (stat >= 0 && stat < 0.25) {\n\t          // Start out between 3 - 6% increments\n\t          rnd = (Math.random() * (5 - 3 + 1) + 3) / 100;\n\t        } else if (stat >= 0.25 && stat < 0.65) {\n\t          // increment between 0 - 3%\n\t          rnd = (Math.random() * 3) / 100;\n\t        } else if (stat >= 0.65 && stat < 0.9) {\n\t          // increment between 0 - 2%\n\t          rnd = (Math.random() * 2) / 100;\n\t        } else if (stat >= 0.9 && stat < 0.99) {\n\t          // finally, increment it .5 %\n\t          rnd = 0.005;\n\t        } else {\n\t          // after 99%, don't increment:\n\t          rnd = 0;\n\t        }\n\t\n\t        var pct = _status() + rnd;\n\t        _set(pct);\n\t      }\n\t\n\t      function _status() {\n\t        return status;\n\t      }\n\t\n\t      function _completeAnimation() {\n\t        status = 0;\n\t        started = false;\n\t      }\n\t\n\t      function _complete() {\n\t        if (!$animate) {\n\t          $animate = $injector.get('$animate');\n\t        }\n\t\n\t        $rootScope.$broadcast('cfpLoadingBar:completed');\n\t        _set(1);\n\t\n\t        $timeout.cancel(completeTimeout);\n\t\n\t        // Attempt to aggregate any start/complete calls within 500ms:\n\t        completeTimeout = $timeout(function() {\n\t          var promise = $animate.leave(loadingBarContainer, _completeAnimation);\n\t          if (promise && promise.then) {\n\t            promise.then(_completeAnimation);\n\t          }\n\t          $animate.leave(spinner);\n\t        }, 500);\n\t      }\n\t\n\t      return {\n\t        start            : _start,\n\t        set              : _set,\n\t        status           : _status,\n\t        inc              : _inc,\n\t        complete         : _complete,\n\t        autoIncrement    : this.autoIncrement,\n\t        includeSpinner   : this.includeSpinner,\n\t        latencyThreshold : this.latencyThreshold,\n\t        parentSelector   : this.parentSelector,\n\t        startSize        : this.startSize\n\t      };\n\t\n\t\n\t    }];     //\n\t  });       // wtf javascript. srsly\n\t})();       //\n\n\n/***/ },\n\n/***/ 230:\n/***/ function(module, exports, __webpack_require__) {\n\n\texports = module.exports = __webpack_require__(10)();\n\t// imports\n\t\n\t\n\t// module\n\texports.push([module.id, \".fx-loading{margin:100px auto;width:90px;height:90px;position:relative;text-align:center;animation:lodding-rotate 2s infinite linear}.fx-loading .dot1,.fx-loading .dot2{width:60%;height:60%;display:inline-block;position:absolute;top:0;background-color:#000;border-radius:100%;-webkit-animation:lodding-bounce 2s infinite ease-in-out;animation:lodding-bounce 2s infinite ease-in-out}.fx-loading .dot2{top:auto;bottom:0;-webkit-animation-delay:-1s;animation-delay:-1s}@-webkit-keyframes lodding-rotate{to{-webkit-transform:rotate(1turn)}}@keyframes lodding-rotate{to{transform:rotate(1turn);-webkit-transform:rotate(1turn)}}@-webkit-keyframes lodding-bounce{0%,to{-webkit-transform:scale(0)}50%{-webkit-transform:scale(1)}}@keyframes lodding-bounce{0%,to{transform:scale(0);-webkit-transform:scale(0)}50%{transform:scale(1);-webkit-transform:scale(1)}}\", \"\"]);\n\t\n\t// exports\n\n\n/***/ },\n\n/***/ 233:\n/***/ function(module, exports, __webpack_require__) {\n\n\texports = module.exports = __webpack_require__(10)();\n\t// imports\n\t\n\t\n\t// module\n\texports.push([module.id, \".over-hidden,body{overflow:hidden}.no-tb-margin{margin-top:0!important;margin-bottom:0!important}.no-borders .md-input{border:none!important}.fx-autocomplete{margin-top:-20px}.fx-autocomplete .md-input-container{margin-bottom:0}.no-errors .md-errors-spacer{display:none!important}md-tabs.scroll.md-dynamic-height md-tabs-content-wrapper{overflow-y:auto!important;overflow-x:hidden!important}.fx-invalid{opacity:1!important;margin-top:0!important}.schema-form-chips .md-placeholder,.schema-form-chips>label:not(.md-no-float):not(.md-container-ignore){transform:translateZ(0) scale(1)}table.md-table th.md-column{color:inherit}.red{fill:red}.green{fill:green}\", \"\"]);\n\t\n\t// exports\n\n\n/***/ },\n\n/***/ 269:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar jade = __webpack_require__(2);\n\t\n\tmodule.exports = function template(locals) {\n\tvar jade_debug = [ new jade.DebugItem( 1, \"/srv/blessing/public/src/directives/loading/tpls/loading.jade\" ) ];\n\ttry {\n\tvar buf = [];\n\tvar jade_mixins = {};\n\tvar jade_interp;\n\t\n\tjade_debug.unshift(new jade.DebugItem( 0, \"/srv/blessing/public/src/directives/loading/tpls/loading.jade\" ));\n\tjade_debug.unshift(new jade.DebugItem( 1, \"/srv/blessing/public/src/directives/loading/tpls/loading.jade\" ));\n\tbuf.push(\"<div class=\\\"fx-loading\\\">\");\n\tjade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));\n\tjade_debug.unshift(new jade.DebugItem( 2, \"/srv/blessing/public/src/directives/loading/tpls/loading.jade\" ));\n\tbuf.push(\"<div class=\\\"dot1\\\">\");\n\tjade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));\n\tjade_debug.shift();\n\tbuf.push(\"</div>\");\n\tjade_debug.shift();\n\tjade_debug.unshift(new jade.DebugItem( 3, \"/srv/blessing/public/src/directives/loading/tpls/loading.jade\" ));\n\tbuf.push(\"<div class=\\\"dot2\\\">\");\n\tjade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));\n\tjade_debug.shift();\n\tbuf.push(\"</div>\");\n\tjade_debug.shift();\n\tjade_debug.shift();\n\tbuf.push(\"</div>\");\n\tjade_debug.shift();\n\tjade_debug.shift();;return buf.join(\"\");\n\t} catch (err) {\n\t  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, \"div.fx-loading\\n    div.dot1\\n    div.dot2\\n\");\n\t}\n\t}\n\n/***/ },\n\n/***/ 309:\n/***/ function(module, exports, __webpack_require__) {\n\n\t// style-loader: Adds some css to the DOM by adding a <style> tag\n\t\n\t// load the styles\n\tvar content = __webpack_require__(230);\n\tif(typeof content === 'string') content = [[module.id, content, '']];\n\t// add the styles to the DOM\n\tvar update = __webpack_require__(11)(content, {});\n\tif(content.locals) module.exports = content.locals;\n\t// Hot Module Replacement\n\tif(false) {\n\t\t// When the styles change, update the <style> tags\n\t\tif(!content.locals) {\n\t\t\tmodule.hot.accept(\"!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/sass-loader/index.js!./loading.scss\", function() {\n\t\t\t\tvar newContent = require(\"!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/sass-loader/index.js!./loading.scss\");\n\t\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\t\tupdate(newContent);\n\t\t\t});\n\t\t}\n\t\t// When the module is disposed, remove the <style> tags\n\t\tmodule.hot.dispose(function() { update(); });\n\t}\n\n/***/ },\n\n/***/ 347:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function($) {\"use strict\";\n\t__webpack_require__(18);\n\tvar loading_1 = __webpack_require__(199);\n\t__webpack_require__(194);\n\t__webpack_require__(173);\n\tvar module = angular.module(\"indexApp\", [\"angular-loading-bar\", loading_1.default]);\n\tmodule.config([\"cfpLoadingBarProvider\", function (cfpLoadingBarProvider) {\n\t        cfpLoadingBarProvider.includeSpinner = true;\n\t        cfpLoadingBarProvider.latencyThreshold = 1000;\n\t    }]);\n\t$(function () {\n\t    angular.bootstrap(document, [module.name, 'homeModule', 'pageModule', 'passportModule']);\n\t});\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))\n\n/***/ }\n\n},[347]);\n\n\n/** WEBPACK FOOTER **\n ** page/index.bundle.js\n **/","require('./build/loading-bar');\nmodule.exports = 'angular-loading-bar';\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/angular-loading-bar/index.js\n ** module id = 173\n ** module chunks = 5\n **/","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!./../../../node_modules/css-loader/index.js!./../../../node_modules/sass-loader/index.js!./index.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!./../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!./../../../node_modules/css-loader/index.js!./../../../node_modules/sass-loader/index.js!./index.scss\", function() {\n\t\t\tvar newContent = require(\"!!./../../../node_modules/css-loader/index.js!./../../../node_modules/sass-loader/index.js!./index.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/pages/index/index.scss\n ** module id = 194\n ** module chunks = 5\n **/","import './styles/loading.scss';\n\nconst _name = \"fxLoading\";\n\ninterface IDirectiveScope extends ng.IScope {\n\n}\n\nfunction Directive(): ng.IDirective {\n    return {\n        restrict: 'EA',\n        template: require(\"./tpls/loading.jade\")(),\n        scope: {},\n        replace: false,\n        link: ($scope: IDirectiveScope) => {\n\n        }\n    }\n}\n\nDirective.$inject = [];\n\nconst module = angular.module(`${_name}Module`, []).directive(_name, Directive);\n\nexport default `${module.name}`;\n\n\n/** WEBPACK FOOTER **\n ** ./src/directives/loading/index.ts\n **/","/*! \n * angular-loading-bar v0.9.0\n * https://chieffancypants.github.io/angular-loading-bar\n * Copyright (c) 2016 Wes Cruver\n * License: MIT\n */\n/*\n * angular-loading-bar\n *\n * intercepts XHR requests and creates a loading bar.\n * Based on the excellent nprogress work by rstacruz (more info in readme)\n *\n * (c) 2013 Wes Cruver\n * License: MIT\n */\n\n\n(function() {\n\n'use strict';\n\n// Alias the loading bar for various backwards compatibilities since the project has matured:\nangular.module('angular-loading-bar', ['cfp.loadingBarInterceptor']);\nangular.module('chieffancypants.loadingBar', ['cfp.loadingBarInterceptor']);\n\n\n/**\n * loadingBarInterceptor service\n *\n * Registers itself as an Angular interceptor and listens for XHR requests.\n */\nangular.module('cfp.loadingBarInterceptor', ['cfp.loadingBar'])\n  .config(['$httpProvider', function ($httpProvider) {\n\n    var interceptor = ['$q', '$cacheFactory', '$timeout', '$rootScope', '$log', 'cfpLoadingBar', function ($q, $cacheFactory, $timeout, $rootScope, $log, cfpLoadingBar) {\n\n      /**\n       * The total number of requests made\n       */\n      var reqsTotal = 0;\n\n      /**\n       * The number of requests completed (either successfully or not)\n       */\n      var reqsCompleted = 0;\n\n      /**\n       * The amount of time spent fetching before showing the loading bar\n       */\n      var latencyThreshold = cfpLoadingBar.latencyThreshold;\n\n      /**\n       * $timeout handle for latencyThreshold\n       */\n      var startTimeout;\n\n\n      /**\n       * calls cfpLoadingBar.complete() which removes the\n       * loading bar from the DOM.\n       */\n      function setComplete() {\n        $timeout.cancel(startTimeout);\n        cfpLoadingBar.complete();\n        reqsCompleted = 0;\n        reqsTotal = 0;\n      }\n\n      /**\n       * Determine if the response has already been cached\n       * @param  {Object}  config the config option from the request\n       * @return {Boolean} retrns true if cached, otherwise false\n       */\n      function isCached(config) {\n        var cache;\n        var defaultCache = $cacheFactory.get('$http');\n        var defaults = $httpProvider.defaults;\n\n        // Choose the proper cache source. Borrowed from angular: $http service\n        if ((config.cache || defaults.cache) && config.cache !== false &&\n          (config.method === 'GET' || config.method === 'JSONP')) {\n            cache = angular.isObject(config.cache) ? config.cache\n              : angular.isObject(defaults.cache) ? defaults.cache\n              : defaultCache;\n        }\n\n        var cached = cache !== undefined ?\n          cache.get(config.url) !== undefined : false;\n\n        if (config.cached !== undefined && cached !== config.cached) {\n          return config.cached;\n        }\n        config.cached = cached;\n        return cached;\n      }\n\n\n      return {\n        'request': function(config) {\n          // Check to make sure this request hasn't already been cached and that\n          // the requester didn't explicitly ask us to ignore this request:\n          if (!config.ignoreLoadingBar && !isCached(config)) {\n            $rootScope.$broadcast('cfpLoadingBar:loading', {url: config.url});\n            if (reqsTotal === 0) {\n              startTimeout = $timeout(function() {\n                cfpLoadingBar.start();\n              }, latencyThreshold);\n            }\n            reqsTotal++;\n            cfpLoadingBar.set(reqsCompleted / reqsTotal);\n          }\n          return config;\n        },\n\n        'response': function(response) {\n          if (!response || !response.config) {\n            $log.error('Broken interceptor detected: Config object not supplied in response:\\n https://github.com/chieffancypants/angular-loading-bar/pull/50');\n            return response;\n          }\n\n          if (!response.config.ignoreLoadingBar && !isCached(response.config)) {\n            reqsCompleted++;\n            $rootScope.$broadcast('cfpLoadingBar:loaded', {url: response.config.url, result: response});\n            if (reqsCompleted >= reqsTotal) {\n              setComplete();\n            } else {\n              cfpLoadingBar.set(reqsCompleted / reqsTotal);\n            }\n          }\n          return response;\n        },\n\n        'responseError': function(rejection) {\n          if (!rejection || !rejection.config) {\n            $log.error('Broken interceptor detected: Config object not supplied in rejection:\\n https://github.com/chieffancypants/angular-loading-bar/pull/50');\n            return $q.reject(rejection);\n          }\n\n          if (!rejection.config.ignoreLoadingBar && !isCached(rejection.config)) {\n            reqsCompleted++;\n            $rootScope.$broadcast('cfpLoadingBar:loaded', {url: rejection.config.url, result: rejection});\n            if (reqsCompleted >= reqsTotal) {\n              setComplete();\n            } else {\n              cfpLoadingBar.set(reqsCompleted / reqsTotal);\n            }\n          }\n          return $q.reject(rejection);\n        }\n      };\n    }];\n\n    $httpProvider.interceptors.push(interceptor);\n  }]);\n\n\n/**\n * Loading Bar\n *\n * This service handles adding and removing the actual element in the DOM.\n * Generally, best practices for DOM manipulation is to take place in a\n * directive, but because the element itself is injected in the DOM only upon\n * XHR requests, and it's likely needed on every view, the best option is to\n * use a service.\n */\nangular.module('cfp.loadingBar', [])\n  .provider('cfpLoadingBar', function() {\n\n    this.autoIncrement = true;\n    this.includeSpinner = true;\n    this.includeBar = true;\n    this.latencyThreshold = 100;\n    this.startSize = 0.02;\n    this.parentSelector = 'body';\n    this.spinnerTemplate = '<div id=\"loading-bar-spinner\"><div class=\"spinner-icon\"></div></div>';\n    this.loadingBarTemplate = '<div id=\"loading-bar\"><div class=\"bar\"><div class=\"peg\"></div></div></div>';\n\n    this.$get = ['$injector', '$document', '$timeout', '$rootScope', function ($injector, $document, $timeout, $rootScope) {\n      var $animate;\n      var $parentSelector = this.parentSelector,\n        loadingBarContainer = angular.element(this.loadingBarTemplate),\n        loadingBar = loadingBarContainer.find('div').eq(0),\n        spinner = angular.element(this.spinnerTemplate);\n\n      var incTimeout,\n        completeTimeout,\n        started = false,\n        status = 0;\n\n      var autoIncrement = this.autoIncrement;\n      var includeSpinner = this.includeSpinner;\n      var includeBar = this.includeBar;\n      var startSize = this.startSize;\n\n      /**\n       * Inserts the loading bar element into the dom, and sets it to 2%\n       */\n      function _start() {\n        if (!$animate) {\n          $animate = $injector.get('$animate');\n        }\n\n        $timeout.cancel(completeTimeout);\n\n        // do not continually broadcast the started event:\n        if (started) {\n          return;\n        }\n\n        var document = $document[0];\n        var parent = document.querySelector ?\n          document.querySelector($parentSelector)\n          : $document.find($parentSelector)[0]\n        ;\n\n        if (! parent) {\n          parent = document.getElementsByTagName('body')[0];\n        }\n\n        var $parent = angular.element(parent);\n        var $after = parent.lastChild && angular.element(parent.lastChild);\n\n        $rootScope.$broadcast('cfpLoadingBar:started');\n        started = true;\n\n        if (includeBar) {\n          $animate.enter(loadingBarContainer, $parent, $after);\n        }\n\n        if (includeSpinner) {\n          $animate.enter(spinner, $parent, loadingBarContainer);\n        }\n\n        _set(startSize);\n      }\n\n      /**\n       * Set the loading bar's width to a certain percent.\n       *\n       * @param n any value between 0 and 1\n       */\n      function _set(n) {\n        if (!started) {\n          return;\n        }\n        var pct = (n * 100) + '%';\n        loadingBar.css('width', pct);\n        status = n;\n\n        // increment loadingbar to give the illusion that there is always\n        // progress but make sure to cancel the previous timeouts so we don't\n        // have multiple incs running at the same time.\n        if (autoIncrement) {\n          $timeout.cancel(incTimeout);\n          incTimeout = $timeout(function() {\n            _inc();\n          }, 250);\n        }\n      }\n\n      /**\n       * Increments the loading bar by a random amount\n       * but slows down as it progresses\n       */\n      function _inc() {\n        if (_status() >= 1) {\n          return;\n        }\n\n        var rnd = 0;\n\n        // TODO: do this mathmatically instead of through conditions\n\n        var stat = _status();\n        if (stat >= 0 && stat < 0.25) {\n          // Start out between 3 - 6% increments\n          rnd = (Math.random() * (5 - 3 + 1) + 3) / 100;\n        } else if (stat >= 0.25 && stat < 0.65) {\n          // increment between 0 - 3%\n          rnd = (Math.random() * 3) / 100;\n        } else if (stat >= 0.65 && stat < 0.9) {\n          // increment between 0 - 2%\n          rnd = (Math.random() * 2) / 100;\n        } else if (stat >= 0.9 && stat < 0.99) {\n          // finally, increment it .5 %\n          rnd = 0.005;\n        } else {\n          // after 99%, don't increment:\n          rnd = 0;\n        }\n\n        var pct = _status() + rnd;\n        _set(pct);\n      }\n\n      function _status() {\n        return status;\n      }\n\n      function _completeAnimation() {\n        status = 0;\n        started = false;\n      }\n\n      function _complete() {\n        if (!$animate) {\n          $animate = $injector.get('$animate');\n        }\n\n        $rootScope.$broadcast('cfpLoadingBar:completed');\n        _set(1);\n\n        $timeout.cancel(completeTimeout);\n\n        // Attempt to aggregate any start/complete calls within 500ms:\n        completeTimeout = $timeout(function() {\n          var promise = $animate.leave(loadingBarContainer, _completeAnimation);\n          if (promise && promise.then) {\n            promise.then(_completeAnimation);\n          }\n          $animate.leave(spinner);\n        }, 500);\n      }\n\n      return {\n        start            : _start,\n        set              : _set,\n        status           : _status,\n        inc              : _inc,\n        complete         : _complete,\n        autoIncrement    : this.autoIncrement,\n        includeSpinner   : this.includeSpinner,\n        latencyThreshold : this.latencyThreshold,\n        parentSelector   : this.parentSelector,\n        startSize        : this.startSize\n      };\n\n\n    }];     //\n  });       // wtf javascript. srsly\n})();       //\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/angular-loading-bar/build/loading-bar.js\n ** module id = 214\n ** module chunks = 5\n **/","exports = module.exports = require(\"./../../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".fx-loading{margin:100px auto;width:90px;height:90px;position:relative;text-align:center;animation:lodding-rotate 2s infinite linear}.fx-loading .dot1,.fx-loading .dot2{width:60%;height:60%;display:inline-block;position:absolute;top:0;background-color:#000;border-radius:100%;-webkit-animation:lodding-bounce 2s infinite ease-in-out;animation:lodding-bounce 2s infinite ease-in-out}.fx-loading .dot2{top:auto;bottom:0;-webkit-animation-delay:-1s;animation-delay:-1s}@-webkit-keyframes lodding-rotate{to{-webkit-transform:rotate(1turn)}}@keyframes lodding-rotate{to{transform:rotate(1turn);-webkit-transform:rotate(1turn)}}@-webkit-keyframes lodding-bounce{0%,to{-webkit-transform:scale(0)}50%{-webkit-transform:scale(1)}}@keyframes lodding-bounce{0%,to{transform:scale(0);-webkit-transform:scale(0)}50%{transform:scale(1);-webkit-transform:scale(1)}}\", \"\"]);\n\n// exports\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/css-loader!./~/sass-loader!./src/directives/loading/styles/loading.scss\n ** module id = 230\n ** module chunks = 5\n **/","exports = module.exports = require(\"./../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".over-hidden,body{overflow:hidden}.no-tb-margin{margin-top:0!important;margin-bottom:0!important}.no-borders .md-input{border:none!important}.fx-autocomplete{margin-top:-20px}.fx-autocomplete .md-input-container{margin-bottom:0}.no-errors .md-errors-spacer{display:none!important}md-tabs.scroll.md-dynamic-height md-tabs-content-wrapper{overflow-y:auto!important;overflow-x:hidden!important}.fx-invalid{opacity:1!important;margin-top:0!important}.schema-form-chips .md-placeholder,.schema-form-chips>label:not(.md-no-float):not(.md-container-ignore){transform:translateZ(0) scale(1)}table.md-table th.md-column{color:inherit}.red{fill:red}.green{fill:green}\", \"\"]);\n\n// exports\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/css-loader!./~/sass-loader!./src/pages/index/index.scss\n ** module id = 233\n ** module chunks = 5\n **/","var jade = require(\"/srv/blessing/public/node_modules/jade/lib/runtime.js\");\n\nmodule.exports = function template(locals) {\nvar jade_debug = [ new jade.DebugItem( 1, \"/srv/blessing/public/src/directives/loading/tpls/loading.jade\" ) ];\ntry {\nvar buf = [];\nvar jade_mixins = {};\nvar jade_interp;\n\njade_debug.unshift(new jade.DebugItem( 0, \"/srv/blessing/public/src/directives/loading/tpls/loading.jade\" ));\njade_debug.unshift(new jade.DebugItem( 1, \"/srv/blessing/public/src/directives/loading/tpls/loading.jade\" ));\nbuf.push(\"<div class=\\\"fx-loading\\\">\");\njade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));\njade_debug.unshift(new jade.DebugItem( 2, \"/srv/blessing/public/src/directives/loading/tpls/loading.jade\" ));\nbuf.push(\"<div class=\\\"dot1\\\">\");\njade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));\njade_debug.shift();\nbuf.push(\"</div>\");\njade_debug.shift();\njade_debug.unshift(new jade.DebugItem( 3, \"/srv/blessing/public/src/directives/loading/tpls/loading.jade\" ));\nbuf.push(\"<div class=\\\"dot2\\\">\");\njade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));\njade_debug.shift();\nbuf.push(\"</div>\");\njade_debug.shift();\njade_debug.shift();\nbuf.push(\"</div>\");\njade_debug.shift();\njade_debug.shift();;return buf.join(\"\");\n} catch (err) {\n  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, \"div.fx-loading\\n    div.dot1\\n    div.dot2\\n\");\n}\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/directives/loading/tpls/loading.jade\n ** module id = 269\n ** module chunks = 5\n **/","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/sass-loader/index.js!./loading.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!./../../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/sass-loader/index.js!./loading.scss\", function() {\n\t\t\tvar newContent = require(\"!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/sass-loader/index.js!./loading.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/directives/loading/styles/loading.scss\n ** module id = 309\n ** module chunks = 5\n **/","/**\n * Created by NICK on 16/8/10.\n * 链接所有的页面\n */\n\nimport 'angular';\nimport loadingDir from '../../directives/loading';\nimport './index.scss';\nimport 'angular-loading-bar';\n\nconst module = angular.module(\"indexApp\", [\"angular-loading-bar\", loadingDir]);\n\nmodule.config([\"cfpLoadingBarProvider\", (cfpLoadingBarProvider) => {\n    // ng-loading-bar设置\n    cfpLoadingBarProvider.includeSpinner = true;\n    cfpLoadingBarProvider.latencyThreshold = 1000;\n}]);\n\n$(() => {\n    angular.bootstrap(document, [module.name, 'homeModule', 'pageModule', 'passportModule']);\n})\n\n\n/** WEBPACK FOOTER **\n ** ./src/pages/index/index.ts\n **/"],"sourceRoot":""}