{"version":3,"sources":["webpack:///0.04a37586aa2964f4b3ec.hot-update.js","webpack:///./src/directives/action/models/action.model.ts?5a9f","webpack:///./src/directives/action/models/interface.model.ts?9d89","webpack:///./src/directives/action/index.ts?1f08","webpack:///./src/directives/action/directives/builder.directive.ts?b665","webpack:///./src/directives/action/directives/dialog-form.directive.ts?1dd8","webpack:///./src/directives/action/directives/dialog-wizard.directive.ts?2c91","webpack:///./src/directives/action/directives/form.directive.ts?a8d2","webpack:///./src/directives/action/directives/list.directive.ts?de17","webpack:///./src/directives/action/directives/search.directive.ts?1909","webpack:///./src/directives/action/directives/wizard.directive.ts?b00c","webpack:///./src/directives/action/schemas/common.value.ts?b5b3","webpack:///./src/directives/action/schemas/crawler.value.ts?2a46","webpack:///./src/directives/action/schemas/login.value.ts?a419","webpack:///./src/directives/action/schemas/modules.value.ts?2bae","webpack:///./src/directives/action/services/action.provider.ts?f27c","webpack:///./src/directives/action/services/autocomplete.provider.ts?0b3e","webpack:///./src/directives/action/services/jsoneditor.provider.ts?855d","webpack:///./src/directives/action/services/utils.service.ts?487b","webpack:///./src/directives/action/services/validator.custom.value.ts?b6af","webpack:///./src/pages/home/index.ts?13ac"],"names":["webpackHotUpdate","5","module","exports","ActionType","none","list","form","wizard","confirm","16","MethodType","GET","POST","DELETE","PUT","HEAD","44","__webpack_require__","sfLayout","args","layoutDiv","fieldFrag","querySelector","grid","Object","getOwnPropertyNames","forEach","property","idx","array","setAttribute","angular","ngMaterial","action_provider_1","utils_service_1","rest_service_1","login_value_1","modules_value_1","crawler_value_1","common_value_1","form_directive_1","list_directive_1","dialog_form_directive_1","search_directive_1","wizard_directive_1","dialog_wizard_directive_1","builder_directive_1","autocomplete_provider_1","jsoneditor_provider_1","_name","config","sfErrorMessageProvider","setDefaultMessage","sfBuilderProvider","schemaFormDecoratorsProvider","jsonEditorBuilder","autoCompleteBuilder","defineAddOn","stdBuilders","concat","builder","builders","sfField","condition","transclusion","run","$templateCache","put","defineProperty","value","name","148","Directive","restrict","template","bindToController","formData","key","require","controller","Controller","controllerAs","replace","fxAction","toolbarUtils","this","$inject","directive","149","scope","_dirName","submitCallBack","compile","$ele","replaceWith","element","html","$scope","$attrs","$ctl","$watch","getActionModel","_","materialUtils","$mdDialog","prototype","doSubmit","$form","_this","promise","doAction","isBusy","then","result","actionModel","closeDialog","hide","isFunction","getModel","model","toolbars","noneBuilder","iconBuilder","icon","toValue","labelBuilder","title","attrBuilder","flex","btnBuilder","btnClick","$event","cancel","150","$attr","151","transclude","link","152","selected","action_model_1","$q","$timeout","mdLimitOptions","clientData","queryData","offset","limit","page","showPage","cloneDeep","initToolbar","initItemToolbar","doSearch","onOrderChange","orderChange","bind","onPageChange","pageChange","doSearchBind","doClickActionMenu","item","doActionModel","showMsg","successMsg","refreshList","where","push","fill","getModels","actions","actionModels","type","tooltipBuilder","showRefreshBtn","showSearchBtn","showSearchPanel","menuTool","menuBuilder","menuOptionsBuilder","keys","itemActionsObj","keyBy","itemActions","each","length","menu","menuItemBuilder","noOptions","conditionBuilder","items","itemToolbars","order","filterData","doDealResult","153","disabled","isShow","pointer","initSearchToolbar","clearFilterData","val","doPreSearch","searchData","doFormCheck","data","substr","set","154","selectedIndex","$on","$forms","initForm","action","showForm","index","hasOwnProperty","doCheckCurrentForm","isUndefined","formController","doCheckForms","res","reset","isArray","isString","dataSchema","defaultSchema","155","Result","actionUtils","properties","formSchema","services","ser","service","156","interface_model_1","required","host","domainWhiteList","default","format","whitePathList","enable","regexp","description","interval","minimum","downloader","initDomain","proxySettings","useProxy","timeout","charset","ua","ipInfo","port","pages","areas","selector","dealStrategy","rule","fieldKey","strict","strictFields","fields","maxLength","List","columns","columnBuilder","searchActionKey","Search","Edit","Delete","Copy","Add","interfaces","method","address","path","jpp","/total","/rows","copy","move","del","isRestful","AddFirst","htmlClass","titleMap","AddSecond","startEmpty","showHints","fieldHtmlClass","AddThird","AddForth","AddFifth","layout","idFieldPath","confirmTitle","confirmContent","copyValueTo","Ack","options","url","startCrawler","startDeal","startDownload","startChip","group","acOptions","textField","dataField","noCache","search","actionKey","157","LoginSchemaValue","username","minLength","password","placeHolder","leftIcon","LogoutSchemaValue","confirmOk","confirmCancel","models","158","parentKey","showed","ModuleList","ModuleSearch","ModuleEdit","ModuleDelete","ModuleAdd","ModuleMenus","readonly","159","DialogController","submit","console","log","arguments","Provider","$rootScope","$injector","restUtils","mdUtils","$get","invoke","defer","has","resolve","cloneDeepWith","get","showErrMsg","reject","notFoundsKeys","promises","isObject","all","callback","templates","_a","show","targetEvent","clickOutsideToClose","escapeToClose","fullscreen","locals","confirm_1","textContent","ariaLabel","ok","$broadcast","$valid","$error","results","iInterface","remove","interfacesRest","interfaceModel","restAngular","getCustomRestful","getCustom","post","customGET","customPUT","customDELETE","provider","160","Builder","init","modelValue","onChange","keyField","join","query","filter","searchText","aModel","extend","boost","161","modes","mode","preferText","jsonOptions","162","__extends","d","b","__","constructor","p","create","Service","_builderName","_toolbarName","Base","columnUnitBuilder","unit","numeric","_super","call","content","sort","toolbar","163","tv4","validator","CustomFormat","addFormat","schema","isEmail","isMobilePhone","isJSON","isURL","isIP","code","setErrorReporter","error","customFormats","179","__dirname","ngMaterialIcons","router_1","material_service_1","svg_service_1","toolbar_1","sidemenu_1","$stateProvider","$urlRouterProvider","$httpProvider","$mdThemingProvider","$locationProvider","mdSideMenuSectionsProvider","cfpLoadingBarProvider","initRouter","initWithTheme","$state","svgUtils","state","handleResolve","$$isFinish","go","toState","toParams","evt","fromState","fromParams","event","preventDefault","mdi","loadSvgUrl","weibo"],"mappings":"AAAAA,iBAAiB,GAEXC,EACA,SAASC,EAAQC,GAEtB,cCDD,SAAYC,GACRA,IAAAC,KAAA,UACAD,IAAAE,KAAA,UACAF,IAAAG,KAAA,UACAH,IAAAI,OAAA,YACAJ,IAAAK,QAAA,cALQN,EAAAC,aAAAD,EAAAC,gBAAAD,EAAAC,YDcNM,GACA,SAASR,EAAQC,GAEtB,cElBD,SAAYQ,GACRA,IAAAC,IAAA,SACAD,IAAAE,KAAA,UACAF,IAAAG,OAAA,YACAH,IAAAI,IAAA,SACAJ,IAAAK,KAAA,WALQb,EAAAQ,aAAAR,EAAAQ,gBAAAR,EAAAQ,YF+BNM,GACA,SAASf,EAAQC,EAASe,GAE/B,YGcD,SAAAC,GAAkBC,GACd,GAAIC,GAAYD,EAAKE,UAAUC,cAAc,cAEzCF,IAAaD,EAAKb,KAAKiB,MACvBC,OAAOC,oBAAoBN,EAAKb,KAAKiB,MAAMG,QAAQ,SAAUC,EAAUC,EAAKC,GACxET,EAAUU,aAAaH,EAAUR,EAAKb,KAAKiB,KAAKI,MApD5D,GAAYI,GAAOd,EAAM,GACbe,EAAUf,EAAM,EAC5BA,GAAO,IACPA,EAAO,IAEP,IAAAgB,GAAAhB,EAA+B,KAC/BiB,EAAAjB,EAAyB,KACzBkB,EAAAlB,EAAuB,IACvBmB,EAAAnB,EAAyB,KACzBoB,EAAApB,EAA0B,KAC1BqB,EAAArB,EAA2B,KAC3BsB,EAAAtB,EAA0B,KAC1BuB,EAAAvB,EAA2B,KAC3BwB,EAAAxB,EAA2B,KAC3ByB,EAAAzB,EAA2B,KAC3B0B,EAAA1B,EAA6B,KAC7B2B,EAAA3B,EAA6B,KAC7B4B,EAAA5B,EAAmC,KACnC6B,EAAA7B,EAA8B,KAE9B8B,EAAA9B,EAA6B,KAC7B+B,EAAA/B,EAA2B,IAE3BA,GAAO,IACPA,EAAO,KACPA,EAAO,IAEP,IAAMgC,GAAQ,WACRhD,EAAS8B,EAAQ9B,OAAUgD,EAAK,UAAWjB,EAAYG,aAAY,aAAc,iBAEvFD,cAAajC,GACbgC,aAAmBhC,GACnBuC,aAAevC,GACfwC,aAAexC,GACfoC,aAAcpC,GACdmC,aAAanC,GACbyC,aAAezC,GACf0C,aAAiB1C,GACjB2C,aAAiB3C,GACjB4C,aAAuB5C,GACvB6C,aAAkB7C,GAClBqC,aAAerC,GACfsC,aAActC,GACd8C,aAAiB9C,GACjB+C,aAAe/C,GAafA,EACKiD,QAAQ,yBAA0B,SAACC,GAOhCA,EAAuBC,kBAAkB,MAAO,mBAChDD,EAAuBC,kBAAkB,MAAO,uCAChDD,EAAuBC,kBAAkB,MAAO,sCAChDD,EAAuBC,kBAAkB,MAAO,8CAChDD,EAAuBC,kBAAkB,MAAO,8CAChDD,EAAuBC,kBAAkB,MAAO,2DAChDD,EAAuBC,kBAAkB,MAAO,YAGnDF,QAAQ,oBAAqB,+BAAgC,4BAA6B,8BAA+B,SAACG,EAAmBC,EAA8BC,EAAmBC,GAE3LF,EAA6BG,YACzB,oBACA,UACA,+BACAJ,EAAkBK,YAAYC,OAAOJ,EAAkBK,UAG3DN,EAA6BG,YACzB,oBACA,OACA,0BACCJ,EAAkBQ,SAASC,QAAST,EAAkBQ,SAASE,UAAWV,EAAkBQ,SAASG,eAG1GV,EAA6BG,YACzB,oBACA,iBACA,oCACCJ,EAAkBQ,SAASC,QAAS5C,EAAUmC,EAAkBQ,SAASE,UAAWP,EAAoBI,QAASP,EAAkBQ,SAASG,kBAWpJC,KAAK,iBAAkB,sBAAuB,SAACC,GAC5CA,EAAeC,IAAI,+BAAgClD,EAAQ,QAC3DiD,EAAeC,IAAI,yBAA0BlD,EAAQ,QACrDiD,EAAeC,IAAI,mCAAoClD,EAAQ,QAC/DiD,EAAeC,IAAI,8BAA+BlD,EAAQ,WAIlEO,OAAA4C,eAAAlE,EAAA,cAAAmE,WHRCnE,aGQcD,EAAOqE,MHHhBC,IACA,SAAStE,EAAQC,EAASe,GAE/B,YI/FD,SAAAuD,KACI,OACIC,SAAU,KACVC,SAAUzD,EAAQ,OAClB0D,kBACIC,SAAU,WACVC,IAAK,KAETC,QAAS,IAAI7B,EACb8B,WAAYC,EACZC,aAAc,iBACdC,YA9BR,GAAMjC,GAAQ,kBAEd+B,EAAA,WAOI,QAAAA,GAAoBG,EAAkBC,GAAlBC,KAAAF,WAAkBE,KAAAD,eAClCC,KAAKT,SAAWS,KAAKT,aAE7B,MATWI,GAAAM,SAAW,WAAY,gBASlCN,IAuBAR,GAAUc,WAEV9D,OAAA4C,eAAAlE,EAAA,cAAAmE,WJwGCnE,aIxGc,SAACD,GACZA,EAAOsF,UAAUtC,EAAOuB,KJ8GtBgB,IACA,SAASvF,EAAQC,EAASe,GAE/B,YKhGD,SAAAuD,KACI,OACIC,SAAU,KACVC,SAAUzD,EAAQ,OAClBwE,SACAX,QAAS,IAAIY,EACbf,kBACIE,IAAK,IACLD,SAAU,WACVe,eAAgB,cAEpBZ,WAAYC,EACZC,aAAc,gBACdC,WACAU,QAAS,SAACC,GAEN,MADAA,GAAKC,YAAY/D,QAAQgE,QAAQF,EAAKG,SAC/B,SAACC,EAAQJ,EAA2BK,EAAQC,GAC/CF,EAAOG,OAAO,WACV,MAAOD,GAAKtB,KACb,WACCsB,EAAKE,sBA7EzB,GAAYC,GAACrF,EAAM,GAEbyE,EAAW,qBAEjBV,EAAA,WAWI,QAAAA,GAAoBiB,EAAgBd,EAAkBoB,EAAgDnB,EAAsBoB,GAAxGnB,KAAAY,SAAgBZ,KAAAF,WAAkBE,KAAAkB,gBAAgDlB,KAAAD,eAAsBC,KAAAmB,YACxHnB,KAAKT,SAAWS,KAAKT,aAkC7B,MA/BII,GAAAyB,UAAAC,SAAA,SAASC,GAAT,GAAAC,GAAAvB,KACQwB,EAAUxB,KAAKF,SAAS2B,SAASzB,KAAKR,IAAKQ,KAAKT,SAAU+B,EAe9D,OAbAtB,MAAK0B,UACDF,GACAA,EAAQG,KAAK,SAACC,GACVL,EAAKM,YAAYC,kBAAwBP,EAAKJ,UAAUY,KAAKH,GAEzDX,EAAEe,WAAWT,EAAKjB,iBAClBiB,EAAKjB,mBAJbkB,WAMW,WACPD,EAAKG,YAINF,GAGX7B,EAAAyB,UAAAJ,eAAA,cAAAO,GAAAvB,IACIA,MAAKF,SAASmC,SAASjC,KAAKR,KAAKmC,KAAK,SAACO,GACnCX,EAAKM,YAAcK,EACnBX,EAAKY,UACDZ,EAAKxB,aAAaqC,YAAY,QAAQC,YAAYd,EAAKM,YAAYS,MAAMC,UACzEhB,EAAKxB,aAAayC,aAAajB,EAAKM,YAAYY,OAAOC,aAAaC,KAAM,KAAKJ,UAC/EhB,EAAKxB,aAAa6C,WAAW,KAAM,qBAAyBP,YAAY,SAASQ,SAAS,SAACC,GACvFvB,EAAKJ,UAAU4B,WAChBR,cAzCR5C,EAAAM,SAAW,SAAU,WAAY,gBAAiB,eAAgB,aA6C7EN,IAkCAxD,QAAA4C,eAAAlE,EAAA,cAAAmE,WL4ICnE,aK5Ic,SAACD,GACZA,EAAOsF,UAAUG,EAAUlB,KLkJzB6D,IACA,SAASpI,EAAQC,EAASe,GAE/B,YMvMD,SAAAuD,KACI,OACIC,SAAU,KACVC,SAAUzD,EAAQ,OAClBwE,SACAX,QAAS,IAAIY,EACbf,kBACIE,IAAK,IACLD,SAAU,WACVe,eAAgB,cAEpBZ,WAAYC,EACZC,aAAc,kBACdC,WACAU,QAAS,SAACC,GAEN,MADAA,GAAKC,YAAY/D,QAAQgE,QAAQF,EAAKG,SAC/B,SAACC,EAAQJ,EAA2ByC,EAAOnC,GAC9CF,EAAOG,OAAO,WACV,MAAOD,GAAKtB,KACb,WACCsB,EAAKE,sBAtDzB,GAAMX,GAAW,uBAEjBV,EAAA,WASI,QAAAA,GAAoBiB,EAAgBd,EAAkBoB,EAAgDnB,EAAsBoB,GAAxGnB,KAAAY,SAAgBZ,KAAAF,WAAkBE,KAAAkB,gBAAgDlB,KAAAD,eAAsBC,KAAAmB,YACxHnB,KAAKT,SAAWS,KAAKT,aAe7B,MAZII,GAAAyB,UAAAJ,eAAA,cAAAO,GAAAvB,IACIA,MAAKF,SAASmC,SAASjC,KAAKR,KAAKmC,KAAK,SAACO,GACnCX,EAAKM,YAAcK,EACnBX,EAAKY,UACDZ,EAAKxB,aAAaqC,YAAY,QAAQC,YAAYd,EAAKM,YAAYS,MAAMC,UACzEhB,EAAKxB,aAAayC,aAAajB,EAAKM,YAAYY,OAAOC,aAAaC,KAAM,KAAKJ,UAC/EhB,EAAKxB,aAAa6C,WAAW,KAAM,qBAAyBP,YAAY,SAASQ,SAAS,SAACC,GACvFvB,EAAKJ,UAAU4B,OAAO,UACvBR,cApBR5C,EAAAM,SAAW,SAAU,WAAY,gBAAiB,eAAgB,aAwB7EN,IAkCAxD,QAAA4C,eAAAlE,EAAA,cAAAmE,WNkOCnE,aMlOc,SAACD,GACZA,EAAOsF,UAAUG,EAAUlB,KNwOzB+D,IACA,SAAStI,EAAQC,EAASe,GAE/B,YO1QD,SAAAuD,KACI,OACIC,SAAU,KACVC,SAAUzD,EAAQ,OAClBwE,SACAX,QAAS,gBACTH,kBACIC,SAAU,WACVsC,YAAa,KACbrC,IAAK,MAETE,WAAYC,EACZC,aAAc,UACdC,WACAsD,cACAC,KAAM,SAACxC,EAAyBJ,EAA2BK,EAAwBC,GAC/EF,EAAOG,OAAO,WACV,MAAOD,GAAKtB,KACb,WACCsB,EAAKE,qBA1CrB,GAAArB,GAAA,WAOI,QAAAA,GAAoBiB,EAAgBd,GAAhBE,KAAAY,SAAgBZ,KAAAF,WAChCE,KAAKT,SAAWS,KAAKT,aAQ7B,MALII,GAAAyB,UAAAJ,eAAA,cAAAO,GAAAvB,IACIA,MAAKF,SAASmC,SAASjC,KAAKR,KAAKmC,KAAK,SAACO,GACnCX,EAAKM,YAAcK,KAZpBvC,EAAAM,SAAW,SAAU,YAehCN,IAgCAxD,QAAA4C,eAAAlE,EAAA,cAAAmE,WP0RCnE,aO1Rc,SAACD,GACZA,EAAOsF,UAAU,eAAgBf,KPgS/BkE,IACA,SAASzI,EAAQC,EAASe,GAE/B,YQ3KD,SAAAuD,KACI,OACIC,SAAU,KACVC,SAAUzD,EAAQ,OAClBwE,SACAd,kBACIE,IAAK,IACL8D,SAAU,MAEd5D,WAAYC,EACZC,aAAc,UACdC,WACAsD,eA/LR,GAAAI,GAAA3H,EAAgE,GAEhE+D,EAAA,WA0BI,QAAAA,GAAoBiB,EAAgB4C,EAAYC,EAAkB3D,EAAkBC,EAAsBmB,GA1B9G,GAAAK,GAAAvB,IA0BwBA,MAAAY,SAAgBZ,KAAAwD,KAAYxD,KAAAyD,WAAkBzD,KAAAF,WAAkBE,KAAAD,eAAsBC,KAAAkB,gBAtB1GlB,KAAA0D,gBAAiC,GAAI,GAAI,GAAI,IAAK,KAElD1D,KAAA2D,cACA3D,KAAA4D,WAAyBC,OAAQ,EAAGC,MAAO,GAAIC,KAAM,GACrD/D,KAAA0B,UACA1B,KAAAgE,YACAhE,KAAAsD,YAiBIxD,EAASmC,SAASjC,KAAKR,KAAKmC,KAAK,SAACO,GAC9BX,EAAKM,YAAcZ,EAAEgD,UAAU/B,GAC/BX,EAAK2C,cACL3C,EAAK4C,kBACL5C,EAAK6C,aAETpE,KAAKqE,cAAgBrE,KAAKsE,YAAYC,KAAKvE,MAC3CA,KAAKwE,aAAexE,KAAKyE,WAAWF,KAAKvE,MACzCA,KAAK0E,aAAe1E,KAAKoE,SAASG,KAAKvE,MAuI/C,MA9HIL,GAAAyB,UAAAuD,kBAAA,SAAkB7B,EAAQjB,EAAa+C,GAAvC,GAAArD,GAAAvB,IACIA,MAAKF,SAAS+E,cAAc/B,EAAQjB,EAAa+C,GAAMjD,KAAK,SAACC,GACzDL,EAAKL,cAAc4D,QAAQ,IAAGjD,EAAYkD,YAAc,UACxDxD,EAAKkC,SAAS,WACN5B,EAAYmD,aACZzD,EAAK6C,SAAS7C,EAAKqC,UAAUqB,YAElC,QAOXtF,EAAAyB,UAAA8C,YAAA,cAAA3C,GAAAvB,IAEIA,MAAK6B,YAAY7G,KAAKmH,SAAS+C,KAAKlF,KAAKD,aAAaqC,YAAY,QAAQC,YAAYrC,KAAK6B,YAAYS,MAAO6C,KAAM,UAAU5C,WAC9HvC,KAAK6B,YAAY7G,KAAKmH,SAAS+C,KAAKlF,KAAKD,aAAayC,aAAa,GAAGxC,KAAK6B,YAAYY,OAASC,aAAaC,KAAM,KAAKJ,WAExHvC,KAAKF,SAASsF,UAAUpF,KAAK6B,YAAYwD,SAAS1D,KAAK,SAAC2D,GAEpDrE,EAAE5E,QAAQiJ,EAAc,SAACzD,GACjBA,EAAY0D,OAAShC,EAAAzI,WAAWE,MAChCuG,EAAKM,YAAY7G,KAAKmH,SAAS+C,KAAK3D,EAAKxB,aAAa6C,WAAWf,EAAYY,MAAO,qBAAyB+C,eAAe,IAAInD,YAAYR,EAAYS,MAAO6C,KAAM,UAAUtC,SAAS,SAACC,EAAQ8B,GAC7LrD,EAAKoD,kBAAkB7B,EAAQjB,EAAa+C,SAC7CrC,aAIPhB,EAAKM,YAAY7G,KAAKyK,gBACtBlE,EAAKM,YAAY7G,KAAKmH,SAAS+C,KAAK3D,EAAKxB,aAAa6C,WAAW,KAAM,qBAAyBP,YAAY,WAAY8C,KAAM,UAAUtC,SAAS,SAACC,GAC9IvB,EAAK6C,SAAS7C,EAAKqC,UAAUqB,aAC9B1C,WAGHhB,EAAKM,YAAY7G,KAAK0K,eACtBnE,EAAKM,YAAY7G,KAAKmH,SAAS+C,KAAK3D,EAAKxB,aAAa6C,WAAW,+DAAgE,qBAAyBP,YAAY,8EAA+E8C,KAAM,UAAUtC,SAAS,SAACC,GAC3QvB,EAAKM,YAAY7G,KAAK2K,iBAAmBpE,EAAKM,YAAY7G,KAAK2K,kBAChEpD,cAQf5C,EAAAyB,UAAA+C,gBAAA,cAAA5C,GAAAvB,KACU4F,EAAgB5F,KAAKD,aAAa8F,YAAY,GAAI,kBAAkBL,eAAe,QAAQnD,YAAY,eAAeyD,qBAAqBvD,UAC3IwD,KACFC,EAAiB/E,EAAEgF,MAAMjG,KAAK6B,YAAYqE,YAAa,MAG3DjF,GAAEkF,KAAKnG,KAAK6B,YAAYqE,YAAa,SAACtB,GAClCmB,EAAKb,KAAKN,EAAKpF,OAGnBuG,EAAKK,QAAUpG,KAAKF,SAASsF,UAAUW,GAAMpE,KAAK,SAAC2D,GAC/CrE,EAAE5E,QAAQiJ,EAAc,SAACzD,EAA2BrC,GAChD,GAAId,GAAYsH,EAAexG,GAAKd,SAGpC,QAAQmD,EAAY0D,MAChB,IAAMhC,GAAAzI,WAAWG,KACjB,IAAMsI,GAAAzI,WAAWI,OACjB,IAAMqI,GAAAzI,WAAWK,QACb,GAAIkL,GAAO9E,EAAKxB,aAAauG,gBAAgBzE,EAAYY,MAAO,SAAY+C,eAAe,IAAIe,cAAU,GAAalE,YAAYR,EAAYS,MAAMO,SAAS,SAACC,EAAQ8B,GAClKrD,EAAKoD,kBAAkB7B,EAAQjB,EAAa+C,IAG5ClG,IACA2H,EAAKG,iBAAiB9H,GAG1BkH,EAASa,MAAMvB,KAAKmB,EAAK9D,cAKrChB,EAAKM,YAAY7G,KAAK0L,cAAgBd,MAQ9CjG,EAAAyB,UAAAkD,YAAA,SAAYqC,GACR3G,KAAK4D,UAAU+C,MAAQA,EACvB3G,KAAKoE,SAASpE,KAAK4D,UAAUqB,YAQjCtF,EAAAyB,UAAAqD,WAAA,SAAWV,EAAcD,GACjBA,IAAU9D,KAAK4D,UAAUE,QACzBC,EAAO,GAEX/D,KAAK4D,UAAUG,KAAOA,EAClBA,EAAO,IACP/D,KAAK4D,UAAUC,QAAUE,EAAO,GAAKD,GAEzC9D,KAAKoE,SAASpE,KAAK4D,UAAUqB,YAOjCtF,EAAAyB,UAAAgD,SAAA,SAASwC,GAAT,GAAArF,GAAAvB,IACIA,MAAK0B,UAEL1B,KAAK4D,UAAUqB,MAAQ2B,MACvB5G,KAAKwB,QAAUxB,KAAKF,SAAS2B,SAASzB,KAAKR,IAAKQ,KAAK4D,WAEhD5D,KAAKwB,SAGVxB,KAAKwB,QAAQG,KAAK,SAACC,GACfL,EAAKzB,SAAS+G,aAAatF,EAAKM,YAAaD,EAAQL,EAAKoC,cAD9D3D,WAEW,WACPuB,EAAKG,aAtKN/B,EAAAM,SAAW,SAAU,KAAM,WAAY,WAAY,eAAgB,iBAyK9EN,IAuBAxD,QAAA4C,eAAAlE,EAAA,cAAAmE,WRoSCnE,aQpSc,SAACD,GACZA,EAAOsF,UAAU,eAAgBf,KR0S/B2H,IACA,SAASlM,EAAQC,EAASe,GAE/B,YSpaD,SAAAuD,KACI,OACIC,SAAU,KACVC,SAAUzD,EAAQ,OAClB0D,kBACIC,SAAU,WACVC,IAAK,IACLuH,SAAU,IACVC,OAAQ,IACR5C,SAAU,KACV3B,MAAO,MAEXhD,QAAS,IAAI7B,EACb8B,WAAYC,EACZC,aAAc,YACdC,YA3FR,GAAYoB,GAACrF,EAAM,GACPqL,EAAOrL,EAAM,IAEnBgC,EAAQ,iBASd+B,EAAA,WAWI,QAAAA,GAAoBG,EAAkBC,GAAlBC,KAAAF,WAAkBE,KAAAD,eAClCC,KAAKkH,oBACLlH,KAAKT,SAAWS,KAAKT,aA4C7B,MAtCII,GAAAyB,UAAA+F,gBAAA,cAAA5F,GAAAvB,IACIiB,GAAE5E,QAAQ2D,KAAKT,SAAU,SAAC6H,EAAK5H,SACpB+B,GAAKhC,SAASC,MAO7BG,EAAAyB,UAAA8F,kBAAA,cAAA3F,GAAAvB,IACIA,MAAKmC,UACDnC,KAAKD,aAAayC,aAAa,yBAAyBE,aAAaC,KAAM,KAAKJ,UAChFvC,KAAKD,aAAa6C,WAAW,SAAU,qBAAyBP,YAAY,aAAaQ,SAAS,SAACC,GAC/FvB,EAAK4F,oBACN5E,UACHvC,KAAKD,aAAa6C,WAAW,QAAS,qBAAyBP,YAAY,sDAAsDQ,SAAS,SAACC,GACvIvB,EAAKyF,QAAUzF,EAAKyF,SACrBzE,YAQX5C,EAAAyB,UAAAiG,YAAA,SAAYvE,EAAQxB,GAChB,GAAMgG,KAEFtH,MAAKF,SAASyH,YAAYjG,IAAUL,EAAEe,WAAWhC,KAAKoE,YACtDnD,EAAE5E,QAAQ2D,KAAKT,SAAU,SAACiI,EAAMhI,GACH,MAArBA,EAAIiI,OAAO,EAAG,IACdR,EAAQS,IAAIJ,EAAY9H,EAAKgI,KAIrCxH,KAAKoE,SAASkD,KArDf3H,EAAAM,SAAW,WAAY,gBAwDlCN,IA2BAxD,QAAA4C,eAAAlE,EAAA,cAAAmE,WT8cCnE,aS9cc,SAACD,GACZA,EAAOsF,UAAUtC,EAAOuB,KTodtBwI,IACA,SAAS/M,EAAQC,EAASe,GAE/B,YUpYD,SAAAuD,KACI,OACIC,SAAU,KACVC,SAAUzD,EAAQ,OAClBwE,SACAX,QAAS,kBACTH,kBACIC,SAAU,WACVe,eAAgB,aAChBd,IAAK,KAETE,WAAYC,EACZC,aAAc,YACdC,WACAsD,cACAC,KAAM,SAACxC,EAAyBJ,EAA2ByC,EAAuBnC,GAC9EF,EAAOG,OAAO,WACV,MAAOD,GAAKtB,KACb,WACCsB,EAAKE,qBApMrB,GAAAuC,GAAA3H,EAAoD,GAUpD+D,EAAA,WAaI,QAAAA,GAAoBiB,EAAgB6C,EAAkB3D,EAAkBC,EAAsBmB,EAAgDC,GAblJ,GAAAI,GAAAvB,IAawBA,MAAAY,SAAgBZ,KAAAyD,WAAkBzD,KAAAF,WAAkBE,KAAAD,eAAsBC,KAAAkB,gBAAgDlB,KAAAmB,YAV9InB,KAAAgH,UAIAhH,KAAA4H,cAAwB,EAOpB5H,KAAKkE,cAELlE,KAAKY,OAAOiH,IAAI,WAAY,WACxBtG,EAAKhC,SAAW,KAChBgC,EAAKuG,OAAS,KACdvG,EAAKY,SAAW,KAChBZ,EAAKM,YAAc,OA4I/B,MAnIIlC,GAAAyB,UAAA2G,SAAA,SAASC,EAAsBpH,GACtBZ,KAAK8H,SACN9H,KAAK8H,WAET9H,KAAK8H,OAAOE,EAAOxI,KAAOoB,EAAUoH,EAAOxI,IAAG,SASlDG,EAAAyB,UAAA6G,SAAA,SAASD,EAAsBE,GAC3B,MAAiB,KAAVA,GAAelI,KAAK8H,OAAOK,eAAeH,EAAOxI,MAAQ0I,GAASlI,KAAK4H,eAAiBM,GAASlI,KAAK4H,cAAgB,GAOjIjI,EAAAyB,UAAAgH,mBAAA,SAAmBF,GACf,GAAIrG,GAAc7B,KAAK6B,YAAY3G,OAAOmK,QAAQpE,EAAEoH,YAAYH,GAASlI,KAAK4H,cAAgBM,EAG9F,IAAIlI,KAAK8H,OAAQ,CACb,GAAIQ,GAAiBtI,KAAK8H,OAAO,GAAIjG,EAA6BrC,IAElE,KAAKQ,KAAKF,SAASyH,YAAYe,GAC3B,SAIR,UAOJ3I,EAAAyB,UAAAmH,aAAA,cAAAhH,GAAAvB,KACQwI,IAWJ,OATAvH,GAAEkF,KAAKnG,KAAK6B,YAAY3G,OAAOmK,QAAS,SAAC2C,EAAQE,GAG7C,GAFAM,EAAMjH,EAAK6G,mBAAmBF,IAEzBM,EAED,MADAjH,GAAKqG,cAAgBM,OAKtBM,GAMX7I,EAAAyB,UAAAqH,MAAA,cAAAlH,GAAAvB,IACIA,MAAKT,YACLS,KAAK8H,UACL9H,KAAK4H,cAAgB,EACrB5H,KAAKgH,UACLhH,KAAKyD,SAAS,WACVlC,EAAKyF,WACN,IAQPrH,EAAAyB,UAAA8C,YAAA,cAAA3C,GAAAvB,IACIA,MAAKmC,UACDnC,KAAKD,aAAa6C,WAAW,MAAO,QAAY,OAAOP,YAAY,mBAAmBmE,iBAAiB,gCAAoC3D,SAAS,SAACC,GACjJvB,EAAKqG,eAAiBrG,EAAKqG,kBAC5BrF,UACHvC,KAAKD,aAAa6C,WAAW,MAAO,QAAY,OAAOP,YAAY,KAAM,KAAM,iBAAiBmE,iBAAiB,8EAAkF3D,SAAS,SAACC,GACrMvB,EAAK6G,sBAAwBnH,EAAEyH,QAAQnH,EAAKM,YAAY3G,OAAOmK,UAAY9D,EAAKM,YAAY3G,OAAOmK,QAAQe,OAAS7E,EAAKqG,eACzHrG,EAAKqG,kBAEVrF,UACHvC,KAAKD,aAAa6C,WAAW,KAAM,gBAAoB,OAAOP,YAAY,YAAYmE,iBAAiB,mGAAuG3D,SAAS,SAACC,GAChNvB,EAAKgH,iBACLhH,EAAKG,UACLH,EAAKzB,SAAS2B,SAASF,EAAKM,YAAYrC,IAAK+B,EAAKhC,UAAUoC,KAAK,SAACC,GAC9DL,EAAKM,YAAYC,kBAAwBP,EAAKJ,UAAUY,KAAKH,GAEzDX,EAAEe,WAAWT,EAAKjB,iBAClBiB,EAAKjB,mBAJbiB,WAQW,WACPA,EAAKG,eAGda,YAOX5C,EAAAyB,UAAAJ,eAAA,cACQa,GADRN,EAAAvB,IAGIA,MAAKF,SAASmC,SAASjC,KAAKR,KAAKmC,KAAK,SAACO,GAGnC,MAFAL,GAAcZ,EAAEgD,UAAU/B,GAEnBX,EAAKzB,SAASsF,UAAUlD,EAAMhH,OAAOmK,WAC7C1D,KAAK,SAAC2D,GACL,GAAID,KAEJpE,GAAEkF,KAAKtE,EAAY3G,OAAOmK,QAAS,SAAC2C,GAC5B/G,EAAE0H,SAASX,KACXA,EAAS1C,EAAa0C,KAGtBA,GAAWA,EAAOzC,OAAShC,EAAAzI,WAAWG,MAAQ+M,EAAOzC,OAAShC,EAAAzI,WAAWI,SACpE8M,EAAO/M,KAAK2N,YAAcZ,EAAOzC,OAAShC,EAAAzI,WAAWG,OACtD+M,EAAO/M,KAAK2N,WAAa/G,EAAY3G,OAAO2N,cAAcD,YAE9DvD,EAAQH,KAAK8C,MAGrBnG,EAAY3G,OAAOmK,QAAUA,EAC7B9D,EAAKM,YAAcA,KA5JpBlC,EAAAM,SAAW,SAAU,WAAY,WAAY,eAAgB,gBAAiB,aA+JzFN,IAgCAxD,QAAA4C,eAAAlE,EAAA,cAAAmE,WVsfCnE,aUtfc,SAACD,GACZA,EAAOsF,UAAU,iBAAkBf,KV4fjC2J,IACA,SAASlO,EAAQC,EAASe,GAE/B,YW1sBD,IAAA2H,GAAA3H,EAAuC,GAMvCmN,EAAA,WAII,QAAAA,GAAYhJ,EAAciJ,GACtB,GAAInH,IACArC,IAAKuJ,EAAOvJ,IACZ+F,KAAMhC,EAAAzI,WAAWG,KACjBwH,MAAO,OACPH,KAAM,cACNrH,MACI2N,YACIrD,KAAM,SACN0D,YACIzB,MACIjC,KAAM,SACN9C,MAAO,UAInByG,aACI1J,IAAK,OACL+F,KAAM,aAKlB,OAAO1D,GAEf,MA5BWkH,GAAA9I,SAAW,eAAgB,eAC3B8I,EAAAvJ,IAAc,eA2BzBuJ,IAEA5M,QAAA4C,eAAAlE,EAAA,cAAAmE,WXqsBCnE,aWrsBc,SAACD,GACZ,GAAMuO,IAAwBJ,EAE9B9H,GAAEkF,KAAKgD,EAAU,SAACC,GACdxO,EAAOyO,QAAQD,EAAI5J,IAAK4J,OX2sB1BE,IACA,SAAS1O,EAAQC,EAASe,GAE/B,YY3vBD,IAAA2H,GAAA3H,EAAuC,GACvC2N,EAAA3N,EAAyB,IAEnBgN,GACFrD,KAAM,SACNiE,UAAW,MAAO,OAAQ,YAC1BP,YACIzJ,KACI+F,KAAM,SACN9C,MAAO,OAEXgH,MACIlE,KAAM,SACN9C,MAAO,SAEXiH,iBACInE,KAAM,QACN9C,MAAO,QACPkH,aAEAlD,OACIlB,KAAM,SACNqE,OAAQ,SACRnH,MAAO,WAGfoH,eACItE,KAAM,QACN9C,MAAO,QACPkH,aAEAlD,OACIlB,KAAM,SACN9C,MAAO,OACP+G,UAAW,SAAU,SACrBP,YACIa,QACIvE,KAAM,UACN9C,MAAO,QAEXsH,QACIxE,KAAM,SACN9C,MAAO,QAEXrC,OACImF,KAAM,SACN9C,MAAO,OAEXuH,aACIzE,KAAM,SACN9C,MAAO,SAKvBwH,UACI1E,KAAM,SACNoE,UAAS,IACTO,QAAS,IACTzH,MAAO,aAEX0H,YACI5E,KAAM,SACNoE,UAAS,aACTlH,MAAO,QAEX2H,YACI7E,KAAM,SACN9C,MAAO,SAEX4H,eACI9E,KAAM,SACN9C,MAAO,OACPwG,YACIqB,UACI/E,KAAM,UACN9C,MAAO,UAEX8H,SACIhF,KAAM,SACN9C,MAAO,QAEX+H,SACIjF,KAAM,SACN9C,MAAO,QAEXgI,IACIlF,KAAM,SACN9C,MAAO,aAEXiI,QACInF,KAAM,SACN9C,MAAO,SACPwG,YACIQ,MACIlE,KAAM,SACNqE,OAAQ,SACRnH,MAAO,WAEXkI,MACIpF,KAAM,SACN9C,MAAO,YAM3BmI,OACIrF,KAAM,QACN9C,MAAO,SACPgE,OACIlB,KAAM,SACNiE,UAAW,MAAO,YAClB/G,MAAO,SACPwG,YACIzJ,KACI+F,KAAM,SACN9C,MAAO,UAEXoI,OACItF,KAAM,QACN9C,MAAO,OACPgE,OACIlB,KAAM,SACNiE,UAAW,WAAY,eAAgB,OACvCP,YACIzJ,KACI+F,KAAM,SACN9C,MAAO,SAEXqI,UACIvF,KAAM,SACN9C,MAAO,OAEXsI,cACIxF,KAAM,SACNoE,UAAS,QACTlH,MAAO,WAKvBuI,MACIzF,KAAM,QACN9C,MAAO,OACPkH,aACAlD,OACIlB,KAAM,SACN9C,MAAO,OACP+G,UAAW,SAAU,SACrBP,YACIc,QACIxE,KAAM,SACN9C,MAAO,QAEXrC,OACImF,KAAM,SACN9C,MAAO,UAKvBwI,UACI1F,KAAM,SACN9C,MAAO,QAEXyI,QACI3F,KAAM,UACN9C,MAAO,YAEX0I,cACI5F,KAAM,QACN9C,MAAO,aACPkH,aACAlD,OACIlB,KAAM,SACN9C,MAAO,SAGf2I,QACI7F,KAAM,SACN9C,MAAO,aAKvBuH,aACIzE,KAAM,SACN9C,MAAO,KACP4I,UAAW,OAQvBC,EAAA,WAII,QAAAA,GAAYvL,EAAciJ,GACtB,GAAInH,IACArC,IAAK8L,EAAK9L,IACV+F,KAAMhC,EAAAzI,WAAWE,KACjByH,MAAO,WACPH,KAAM,wBACNtH,MACIuQ,SACIvC,EAAYwC,cAAc,8BAA+B,OAAOjJ,UAChEyG,EAAYwC,cAAc,iCAAkC,MAAMjJ,UAClEyG,EAAYwC,cAAc,qCAAsC,QAAQjJ,UACxEyG,EAAYwC,cAAc,uCAAwC,QAAQjJ,UAC1EyG,EAAYwC,cAAc,wCAAyC,MAAMjJ,WAE7EkJ,gBAAiBC,EAAOlM,IACxBiG,kBACAC,iBACAC,mBACAxD,YACAuE,iBAEJR,cAAe1G,IAAKmM,EAAKnM,MAAOA,IAAKoM,EAAOpM,MAAOA,IAAKqM,EAAKrM,MAC7D6F,SAAUyG,EAAItM,KACduM,aACIvM,IAAK,qBACLwM,OAAQzC,EAAAlO,WAAWC,IACnB2Q,QAAS,GACTtB,KAAM,KACNuB,KAAM,mBACNC,KACIzE,KACI0E,SAAU,SACVC,QAAS,SAEbC,QACAC,QACAC,QAEJC,eAIR,OAAO5K,GAEf,MA/CWyJ,GAAArL,SAAW,eAAgB,eAC3BqL,EAAA9L,IAAc,2BA8CzB8L,KAEAoB,EAAA,WAII,QAAAA,GAAY3M,EAAciJ,GACtB,GAAInH,IACArC,IAAKkN,EAASlN,IACd+F,KAAMhC,EAAAzI,WAAWG,KACjBwH,MAAO,OACPH,KAAM,MACNrH,MACIiO,aACI1J,IAAK,MACL+F,KAAM,OACNoH,UAAW,aAEXnN,IAAK,OACL+F,KAAM,OACNoH,UAAW,aAEXnN,IAAK,aACL+F,KAAM,OACNoH,UAAW,aAEXnN,IAAK,WACL+F,KAAM,SACNoH,UAAW,aAEXnN,IAAK,aACL+F,KAAM,SACNqH,WACI3N,KAAQ,aACRD,MAAS,eAETC,KAAQ,UACRD,MAAS,YAEb2N,UAAW,aAEXnN,IAAK,cACL+F,KAAM,WACNoH,UAAW,cAKvB,OAAO9K,GAEf,MA/CW6K,GAAAzM,SAAW,eAAgB,eAC3ByM,EAAAlN,IAAc,+BA8CzBkN,KAEAG,EAAA,WAII,QAAAA,GAAY9M,EAAciJ,GACtB,GAAInH,IACArC,IAAKqN,EAAUrN,IACf+F,KAAMhC,EAAAzI,WAAWG,KACjBwH,MAAO,QACPH,KAAM,MACNrH,MACIiO,aACI1J,IAAK,kBACL+F,KAAM,QACNuH,cACA9C,YAAa,oBACb+C,aACAJ,UAAW,aAEXnN,IAAK,gBACL+F,KAAM,QACNyH,eAAgB,kBAChBF,cACA9C,YAAa,oBACb+C,aACAtG,QACIlB,KAAM,UACNoH,UAAW,kBACXlG,QACIjH,IAAK,yBACL+F,KAAM,SACNqH,WACI3N,KAAM,KACND,WAEAC,KAAM,MACND,aAGJQ,IAAK,yBACLmN,UAAW,gBACXpH,KAAM,SAEN/F,IAAK,wBACL+F,KAAM,SAEN/F,IAAK,8BACL+F,KAAM,cAO1B,OAAO1D,GAEf,MAvDWgL,GAAA5M,SAAW,eAAgB,eAC3B4M,EAAArN,IAAc,gCAsDzBqN,KAEAI,EAAA,WAII,QAAAA,GAAYlN,EAAciJ,GACtB,GAAInH,IACArC,IAAKyN,EAASzN,IACd+F,KAAMhC,EAAAzI,WAAWG,KACjBwH,MAAO,OACPH,KAAM,MACNrH,MACIiO,aACI1J,IAAK,gBACL+F,KAAM,OACNkB,QACIjH,IAAK,yBACL+F,KAAM,aAEN/F,IAAK,wBACL+F,KAAM,SACNoH,UAAW,aAEXnN,IAAK,wBACL+F,KAAM,OACNoH,UAAW,aAEXnN,IAAK,mBACL+F,KAAM,WACN8F,UAAW,IACXsB,UAAW,aAEXnN,IAAK,uBACL+F,KAAM,OACNkB,QACIjH,IAAK,4BACL+F,KAAM,OACNoH,UAAW,aAEXnN,IAAK,4BACL+F,KAAM,SACNoH,UAAW,eAGnBA,UAAW,cAKvB,OAAO9K,GAEf,MAjDWoL,GAAAhN,SAAW,eAAgB,eAC3BgN,EAAAzN,IAAc,+BAgDzByN,KAEAC,EAAA,WAII,QAAAA,GAAYnN,EAAciJ,GACtB,GAAInH,IACArC,IAAK2N,EAAS3N,IACd+F,KAAMhC,EAAAzI,WAAWG,KACjBwH,MAAO,OACPH,KAAM,MACNrH,MACIiO,aACI1J,IAAK,QACL+F,KAAM,WACNuH,cACAE,eAAgB,qBAChBvG,QACIlB,KAAM,UACNrJ,MAAOyG,KAAM,IACb8D,QACIjH,IAAK,cACL+F,KAAM,OACNoH,UAAW,aAEXnN,IAAK,mBACL+F,KAAM,OACNoH,UAAW,aAEXnN,IAAK,iBACL+F,KAAM,SACNoH,UAAW,aAEXnN,IAAK,uBACLsN,cACAvH,KAAM,QACNoH,UAAW,aAEXnN,IAAK,eACL+F,KAAM,QACNuH,cACArG,QACIlB,KAAM,UACNoH,UAAW,kBACXlG,QACIjH,IAAK,wBACLmN,UAAW,gBACXpH,KAAM,SAEN/F,IAAK,uBACL+F,KAAM,kBASlC,OAAO1D,GAEf,MA3DWqL,GAAAjN,SAAW,eAAgB,eAC3BiN,EAAA1N,IAAc,+BA0DzB0N,KAEAC,EAAA,WAII,QAAAA,GAAYpN,EAAciJ,GACtB,GAAInH,IACArC,IAAK2N,EAAS3N,IACd+F,KAAMhC,EAAAzI,WAAWG,KACjBwH,MAAO,OACPH,KAAM,MACNrH,MACIiO,aACI1J,IAAK,QACL+F,KAAM,WACNkB,QACIlB,KAAM,UACNoH,UAAW,kBACXlG,QACIjH,IAAK,cACL+F,KAAM,OACNoH,UAAW,aAEXnN,IAAK,gBACL+F,KAAM,QACNuH,cACA9C,YAAa,0BACb+C,aACAtG,QACIlB,KAAM,UACNrJ,MAAOyG,KAAM,GAAIyK,OAAQ,OACzB3G,QACIjH,IAAK,sBACL+F,KAAM,SAEN/F,IAAK,2BACLmN,UAAW,gBACXpH,KAAM,SAEN/F,IAAK,+BACL+F,KAAM,aAId/F,IAAK,iBACL+F,KAAM,UACNoH,UAAW,kBAO/B,OAAO9K,GAEf,MArDWsL,GAAAlN,SAAW,eAAgB,eAC3BkN,EAAA3N,IAAc,+BAoDzB2N,KAEArB,EAAA,WAGI,QAAAA,KACI,GAAIjK,IACArC,IAAKsM,EAAItM,IACT+F,KAAMhC,EAAAzI,WAAWI,OACjBuH,MAAO,WACPH,KAAM,MACN0C,eACA9J,QACI2N,eACID,WAAYA,GAEhBvD,SAAUqH,EAASlN,IAAKqN,EAAUrN,IAAKyN,EAASzN,IAAK0N,EAAS1N,IAAK2N,EAAS3N,MAEhFsC,eACAiK,aACIvM,IAAK,oBACLwM,OAAQzC,EAAAlO,WAAWE,KACnB0Q,QAAS,GACTtB,KAAM,KACNuB,KAAM,mBACNO,eAIR,OAAO5K,GAEf,MA5BWiK,GAAAtM,IAAc,0BA4BzBsM,KAEAD,EAAA,WAGI,QAAAA,KACI,GAAIhK,IACArC,IAAKqM,EAAKrM,IACV+F,KAAMhC,EAAAzI,WAAWI,OACjBuH,MAAO,WACPH,KAAM,eACN0C,eACA9J,QACI2N,eACID,WAAYA,GAEhBvD,SAAUqH,EAASlN,IAAKqN,EAAUrN,IAAKyN,EAASzN,IAAK0N,EAAS1N,IAAK2N,EAAS3N,MAEhFsC,eACAiK,aACIvM,IAAK,oBACLwM,OAAQzC,EAAAlO,WAAWE,KACnB0Q,QAAS,GACTtB,KAAM,KACNuB,KAAM,mBACNO,eAIR,OAAO5K,GAEf,MA5BWgK,GAAArM,IAAc,2BA4BzBqM,KAEAF,EAAA,WAII,QAAAA,GAAY5L,EAAciJ,GACtB,GAAInH,IACArC,IAAKmM,EAAKnM,IACV+F,KAAMhC,EAAAzI,WAAWI,OACjBuH,MAAO,WACPH,KAAM,OACN0C,eACA9J,QACI2N,eACID,WAAYA,GAEhBvD,SAAUqH,EAASlN,IAAKqN,EAAUrN,IAAKyN,EAASzN,IAAK0N,EAAS1N,IAAK2N,EAAS3N,MAEhFsC,eACAiK,aACIvM,IAAK,qBACLwM,OAAQzC,EAAAlO,WAAWI,IACnB4R,YAAa,OACbpB,QAAS,GACTtB,KAAM,KACNuB,KAAM,mBACNO,eAIR,OAAO5K,GAEf,MA9BW8J,GAAA1L,SAAW,eAAgB,eAC3B0L,EAAAnM,IAAc,2BA6BzBmM,KAEAC,EAAA,WAGI,QAAAA,KACI,GAAI/J,IACArC,IAAKoM,EAAOpM,IACZ+F,KAAMhC,EAAAzI,WAAWK,QACjBsH,MAAO,WACPH,KAAM,SACN0C,eACA7J,SACImS,aAAc,GACdC,eAAgB,iBAEpBxB,aACIvM,IAAK,uBACLwM,OAAQzC,EAAAlO,WAAWG,OACnB6R,YAAa,OACbpB,QAAS,GACTtB,KAAM,KACNuB,KAAM,mBACNO,eAIR,OAAO5K,GAEf,MA1BW+J,GAAApM,IAAc,6BA0BzBoM,KAEAF,EAAA,WAGI,QAAAA,KACI,GAAI7J,IACArC,IAAKkM,EAAOlM,IACZ+F,KAAMhC,EAAAzI,WAAWG,KACjBwH,MAAO,WACPH,KAAM,SACNrH,MACI2N,WAAYA,EACZM,aACI1J,IAAK,MACL+F,KAAM,OACNiE,YACAgE,aAAc,YACdb,UAAW,cAKvB,OAAO9K,GAEf,MAtBW6J,GAAAlM,IAAc,6BAsBzBkM,KAEA+B,EAAA,WAGI,QAAAA,KACI,GAAI5L,IACArC,IAAKiO,EAAIjO,IACT+F,KAAMhC,EAAAzI,WAAWG,KACjBwH,MAAO,OACPH,KAAM,yBACNrH,MACI2N,YACIrD,KAAM,SACNiE,UAAW,MAAO,UAClBP,YACIzJ,KACI+F,KAAM,SACN9C,MAAO,WAEXuF,QACIzC,KAAM,SACN9C,MAAO,SAEXiL,SACInI,KAAM,SACN9C,MAAO,MACPwG,YACI0E,KACIpI,KAAM,SACN9C,MAAO,SAEX8C,MACIA,KAAM,SACNoE,UAAS,UACTlH,MAAO,UAEXmL,cACIrI,KAAM,UACNoE,aACAlH,MAAO,YAEXoL,WACItI,KAAM,UACNoE,aACAlH,MAAO,cAEXqL,eACIvI,KAAM,UACNoE,aACAlH,MAAO,YAEXsL,WACIxI,KAAM,UACNoE,aACAlH,MAAO,gBAM3ByG,aACI1J,IAAK,SACL+F,KAAM,SACNqH,WACK5N,MAAS,gBAAiBC,KAAQ,OAAQ+O,MAAS,KACnDhP,MAAS,eAAgBC,KAAQ,OAAQ+O,MAAS,KAClDhP,MAAS,iBAAkBC,KAAQ,UAAW+O,MAAS,KACvDhP,MAAS,gBAAiBC,KAAQ,UAAW+O,MAAS,KACtDhP,MAAS,eAAgBC,KAAQ,OAAQ+O,MAAS,KAEvDrB,UAAW,aAEXnN,IAAK,MACL+F,KAAM,iBACN7G,UAAW,qGACXuP,WACIC,UAAW,MACXC,UAAW,OACXC,WACAC,OAAQ,mBACRC,UAAWhD,EAAK9L,KAEpBmN,UAAW,aAEXnN,IAAK,UACL+F,KAAM,OACNrJ,MAAOyG,KAAQ,IACfjE,UAAW,iBACX+H,QACIjH,IAAK,eACL+F,KAAM,SACNoH,UAAW,WACXC,WACK5N,MAAS,UAAWC,KAAQ,cAC5BD,MAAS,GAAIC,KAAQ,aAG1BO,IAAK,cACLmN,UAAW,WACXpH,KAAM,SAEN/F,IAAK,uBACLd,UAAW,iCACXiO,UAAW,WACXpH,KAAM,aAEN/F,IAAK,oBACLd,UAAW,iCACXiO,UAAW,WACXpH,KAAM,aAEN/F,IAAK,wBACLd,UAAW,iCACXiO,UAAW,WACXpH,KAAM,aAEN/F,IAAK,oBACLd,UAAW,iCACXiO,UAAW,WACXpH,KAAM,gBAMtB,OAAO1D,GAEf,MA7HW4L,GAAAjO,IAAc,0BA6HzBiO,IAEAtR,QAAA4C,eAAAlE,EAAA,cAAAmE,WZ8tBCnE,aY9tBc,SAACD,GACZ,GAAMuO,IAAwBmC,EAAMI,EAAQI,EAAKH,EAAMC,EAAQC,EAAM4B,EAAKf,EAAUG,EAAWI,EAAUC,EAAUC,EAEnHlM,GAAEkF,KAAKgD,EAAU,SAACC,GACdxO,EAAOyO,QAAQD,EAAI5J,IAAK4J,OZouB1BmF,IACA,SAAS3T,EAAQC,EAASe,GAE/B,YargDD,SAAA4S,KACI,GAAI3M,IACArC,IAAK,QACL+F,KAAMhC,EAAAzI,WAAWG,KACjBqH,KAAM,GACNrH,MACI2N,YACIrD,KAAM,SACNiE,UAAW,WAAY,YACvBP,YACIwF,UACIlJ,KAAM,SACNmJ,UAAW,EACXrD,UAAW,GACX5I,MAAO,OAEXkM,UACIpJ,KAAM,SACN9C,MAAO,KACPiM,UAAW,EACXrD,UAAW,MAIvBnC,aACI1J,IAAK,WACL+F,KAAM,SACNqJ,YAAa,MACbtM,MACIuM,SAAU,WAEdlC,UAAW,0BAEXnN,IAAK,WACL+F,KAAM,WACNjD,MACIuM,SAAU,QAEdlC,UAAW,2BAGnBZ,aACIvM,IAAK,cACLwM,OAAQzC,EAAAlO,WAAWE,KACnB0Q,QAAS,GACTtB,KAAM,KACNuB,KAAM,kBACNO,eAIR,OAAO5K,GAGX,QAAAiN,KACI,GAAIjN,IACArC,IAAK,SACL+F,KAAMhC,EAAAzI,WAAWK,QACjBmH,KAAM,GACNnH,SACImS,aAAc,OACdC,eAAgB,UAChBwB,UAAW,OACXC,cAAe,OAEnBjD,aACIvM,IAAK,eACLwM,OAAQzC,EAAAlO,WAAWE,KACnB0Q,QAAS,GACTtB,KAAM,KACNuB,KAAM,mBACNO,eAIR,OAAO5K,GAnFX,GAAA0B,GAAA3H,EAAuC,GACvC2N,EAAA3N,EAAyB,GAqFzBO,QAAA4C,eAAAlE,EAAA,cAAAmE,WbqgDCnE,aargDc,SAACD,GACZ,GAAMqU,IAAUT,IAAoBM,IAEpC7N,GAAEkF,KAAK8I,EAAQ,SAAC/M,GACZtH,EAAOoE,MAAMkD,EAAM1C,IAAK0C,Ob2gD1BgN,IACA,SAAStU,EAAQC,EAASe,GAE/B,YcvmDD,IAAA2H,GAAA3H,EAAuC,GACvC2N,EAAA3N,EAAyB,IAEnBgN,GACFrD,KAAM,SACNiE,UAAW,MAAO,QAAS,QAC3BP,YACIzJ,KACI+F,KAAM,SACN9C,MAAO,OAEXA,OACI8C,KAAM,SACN9C,MAAO,QAEXW,MACImC,KAAM,SACN9C,MAAO,SAEXH,MACIiD,KAAM,SACN9C,MAAO,MAEX0M,WACI5J,KAAM,SACN9C,MAAO,WAEXuH,aACIzE,KAAM,SACN9C,MAAO,KACP4I,UAAW,OAEf+D,QACI7J,KAAM,UACN9C,MAAO,UAQnB4M,EAAA,WAII,QAAAA,GAAYtP,EAAciJ,GACtB,GAAInH,IACArC,IAAK6P,EAAW7P,IAChB+F,KAAMhC,EAAAzI,WAAWE,KACjByH,MAAO,OACPH,KAAM,cACNtH,MACIuQ,SACIvC,EAAYwC,cAAc,8BAA+B,OAAOjJ,UAChEyG,EAAYwC,cAAc,kCAAmC,QAAQjJ,UACrEyG,EAAYwC,cAAc,qDAAsD,MAAMjJ,UACtFyG,EAAYwC,cAAc,gCAAiC,MAAO,OAAOjJ,UACzEyG,EAAYwC,cAAc,gCAAiC,MAAO,OAAOjJ,WAE7EkJ,gBAAiB6D,EAAa9P,IAC9BiG,kBACAC,iBACAC,mBACAxD,YACAuE,iBAEJR,cAAe1G,IAAK+P,EAAW/P,MAAOA,IAAKgQ,EAAahQ,MACxD6F,SAAUoK,EAAUjQ,KACpBuM,aACIvM,IAAK,cACLwM,OAAQzC,EAAAlO,WAAWC,IACnB2Q,QAAS,GACTtB,KAAM,KACNuB,KAAM,UACNC,KACIzE,KACI0E,SAAU,SACVC,QAAS,SAEbC,QACAC,QACAC,QAEJC,eAIR,OAAO5K,GAEf,MA/CWwN,GAAApP,SAAW,eAAgB,eAC3BoP,EAAA7P,IAAc,SA8CzB6P,KAIAK,EAAA,WAII,QAAAA,GAAY3P,EAAciJ,GACtB,GAAInH,IACArC,IAAKkQ,EAAYlQ,IACjB+F,KAAMhC,EAAAzI,WAAWE,KACjByH,MAAO,OACPH,KAAM,cACNyJ,aACIvM,IAAK,aACLwM,OAAQzC,EAAAlO,WAAWC,IACnB2Q,QAAS,GACTtB,KAAM,KACNuB,KAAM,gBACNO,eAIR,OAAO5K,GAEf,MArBW6N,GAAAzP,SAAW,eAAgB,eAC3ByP,EAAAlQ,IAAc,mBAoBzBkQ,KAIAD,EAAA,WAII,QAAAA,GAAY1P,EAAciJ,GACtB,GAAInH,IACArC,IAAKiQ,EAAUjQ,IACf+F,KAAMhC,EAAAzI,WAAWG,KACjBwH,MAAO,OACPH,KAAM,MACN0C,eACA/J,MACI2N,WAAYA,EACZM,aACI1J,IAAK,YACL+F,KAAM,OACNoH,UAAW,aAEXnN,IAAK,MACL+F,KAAM,OACNoH,UAAW,aAEXnN,IAAK,QACL+F,KAAM,OACNoH,UAAW,aAEXnN,IAAK,OACL+F,KAAM,OACNoH,UAAW,aAEXnN,IAAK,OACL+F,KAAM,OACNoH,UAAW,aAEXnN,IAAK,cACL+F,KAAM,WACNoH,UAAW,aAEXnN,IAAK,SACL+F,KAAM,cAGdzD,eACAiK,aACIvM,IAAK,aACLwM,OAAQzC,EAAAlO,WAAWE,KACnB0Q,QAAS,GACTtB,KAAM,KACNuB,KAAM,UACNO,eAIR,OAAO5K,GAEf,MAtDW4N,GAAAxP,SAAW,eAAgB,eAC3BwP,EAAAjQ,IAAc,mBAqDzBiQ,KAIAF,EAAA,WAII,QAAAA,GAAYxP,EAAciJ,GACtB,GAAInH,IACArC,IAAK+P,EAAW/P,IAChB+F,KAAMhC,EAAAzI,WAAWG,KACjBwH,MAAO,OACPH,KAAM,OACN0C,eACA/J,MACI2N,WAAYA,EACZM,aACI1J,IAAK,YACL+F,KAAM,OACNoK,YACAhD,UAAW,aAEXnN,IAAK,MACL+F,KAAM,OACNoH,UAAW,aAEXnN,IAAK,QACL+F,KAAM,OACNoH,UAAW,aAEXnN,IAAK,OACL+F,KAAM,OACNoH,UAAW,aAEXnN,IAAK,OACL+F,KAAM,OACNoH,UAAW,aAEXnN,IAAK,cACL+F,KAAM,WACNoH,UAAW,aAEXnN,IAAK,SACL+F,KAAM,cAGdzD,eACAiK,aACIvM,IAAK,cACLwM,OAAQzC,EAAAlO,WAAWI,IACnB4R,YAAa,OACbpB,QAAS,GACTtB,KAAM,KACNuB,KAAM,UACNO,eAIR,OAAO5K,GAEf,MAxDW0N,GAAAtP,SAAW,eAAgB,eAC3BsP,EAAA/P,IAAc,oBAuDzB+P,KAIAC,EAAA,WAGI,QAAAA,KACI,GAAI3N,IACArC,IAAKgQ,EAAahQ,IAClB+F,KAAMhC,EAAAzI,WAAWK,QACjBsH,MAAO,OACPH,KAAM,SACN0C,eACA7J,SACImS,aAAc,GACdC,eAAgB,aAEpBxB,aACIvM,IAAK,gBACLwM,OAAQzC,EAAAlO,WAAWG,OACnB6R,YAAa,OACbpB,QAAS,GACTtB,KAAM,KACNuB,KAAM,UACNO,eAIR,OAAO5K,GAEf,MA1BW2N,GAAAhQ,IAAc,sBA0BzBgQ,KAIAF,EAAA,WAII,QAAAA,KACI,GAAIzN,IACArC,IAAK8P,EAAa9P,IAClB8C,KAAM,SACNiD,KAAMhC,EAAAzI,WAAWG,KACjBwH,MAAO,SACPxH,MACI2N,WAAYA,EACZM,aACI1J,IAAK,MACL+F,KAAM,OACNiE,YACAoF,YAAa,MACb5E,YAAa,sBACb+C,aACAS,aAAc,YACdb,UAAW,aAEXnN,IAAK,SACL+F,KAAM,SACNiI,aAAc,eACdZ,WAAY5N,MAAO,KAAMC,KAAM,OAAQD,SAAaC,KAAM,OAAQD,SAAcC,KAAM,QACtF0N,UAAW,cAKvB,OAAO9K,GAEf,MAhCWyN,GAAArP,SAAW,eAAgB,eAC3BqP,EAAA9P,IAAc,sBA+BzB8P,IAEAnT,QAAA4C,eAAAlE,EAAA,cAAAmE,Wd8kDCnE,ac9kDc,SAACD,GACZ,GAAMuO,IAAwBqG,EAAcE,EAAaL,EAAYC,EAAcG,EAAWF,EAE9FtO,GAAEkF,KAAKgD,EAAU,SAACC,GACdxO,EAAOyO,QAAQD,EAAI5J,IAAK4J,OdolD1BwG,IACA,SAAShV,EAAQC,EAASe,GAE/B,Ye94DD,IAAYqF,GAACrF,EAAM,GACnB2H,EAAA3H,EAAoD,GACpD2N,EAAA3N,EAA0C,IAC9BqL,EAAOrL,EAAM,IAEzBiU,EAAA,WAGI,QAAAA,GAAoBjP,EAAgBgE,EAAcpF,EAAasQ,GAA3C9P,KAAAY,SAAgBZ,KAAA4E,OAAc5E,KAAAR,MAAaQ,KAAA8P,SAC3DC,QAAQC,IAAIC,WAEpB,MALWJ,GAAA5P,SAAW,SAAU,OAAQ,MAAO,UAK/C4P,KAEAK,EAAA,WAKI,QAAAA,GAAoBC,EAA0CC,EAA6CC,EAAwCC,EAA0C9M,EAA0BrC,GAL3N,GAAAI,GAAAvB,IAMQ,OADgBA,MAAAmQ,aAA0CnQ,KAAAoQ,YAA6CpQ,KAAAqQ,YAAwCrQ,KAAAsQ,UAA0CtQ,KAAAwD,KAA0BxD,KAAAmB,YAIvNnB,KAAAuQ,MAAgC,YAAa,SAACH,GAC1C,GAAM/G,GAAU+G,EAAUI,OAAON,EAAU3O,EAAM,KAEjD,OAAO8H,KANArJ,KA6Mf,MA/LIkQ,GAAA9O,UAAAa,SAAA,SAASzC,GACL,GAAMiR,GAAQzQ,KAAKwD,GAAGiN,OActB,OAZKjR,GAIGQ,KAAKoQ,UAAUM,IAAIlR,GACnBiR,EAAME,QAAQ1P,EAAE2P,cAAc5Q,KAAKoQ,UAAUS,IAAIrR,MAEjDQ,KAAKsQ,QAAQQ,WAAW,WAAWtR,EAAG,MACtCiR,EAAMM,OAAOvR,IAPjBiR,EAAMM,SAWHN,EAAMjP,SAQjB0O,EAAA9O,UAAAgE,UAAA,SAAUW,GAAV,GAAAxE,GAAAvB,KACUyQ,EAAQzQ,KAAKwD,GAAGiN,QAChBnL,KACA0L,KACAC,IAqBN,OAnBAhQ,GAAEkF,KAAKJ,EAAM,SAACvG,GACNyB,EAAEiQ,SAAS1R,GACX8F,EAAc9F,EAAqBA,KAAOA,EAG1CyR,EAASzR,GAAiB+B,EAAKU,SAASzC,GAAemC,KAAK,SAACE,GACzDyD,EAAa9F,GAAiBqC,IADRN,SAEjB,SAAC/B,GACNwR,EAAc9L,KAAK1F,OAK/BQ,KAAKwD,GAAG2N,IAAIF,GAAUtP,KAAK,WACvB8O,EAAME,QAAQrL,KADlBtF,SAES,WACLyQ,EAAME,QAAQrL,KAGXmL,EAAMjP,SAUjB0O,EAAA9O,UAAAyD,cAAA,SAAc/B,EAAoBjB,EAA2B+C,EAAYwM,GAAzE,GAAA7P,GAAAvB,IAGI,QAAQ6B,EAAY0D,MAChB,IAAKhC,GAAAzI,WAAWI,OAChB,IAAKqI,GAAAzI,WAAWG,KACZ,GAAMoW,IAAYC,KACdA,EAAC/N,EAAAzI,WAAWG,MAAOW,EAAQ,OAC3B0V,EAAC/N,EAAAzI,WAAWI,QAASU,EAAQ,Of23D5B0V,Eex3DL,OAAOtR,MAAKmB,UAAUoQ,MAClBC,YAAa1O,EACb2O,uBACAC,iBACAC,cACAC,QACIhN,KAAQA,MACRpF,IAAOqC,EAAYrC,IACnBsQ,OAAUsB,GAEd1R,WAAYmQ,EACZjQ,aAAc,YACdP,SAAUgS,EAAUxP,EAAY0D,QACjC5D,KAAK,WACJiD,EAAO,MAEf,KAAKrB,GAAAzI,WAAWK,QACZ,GAAM0W,GAAU7R,KAAKmB,UAAUhG,UAC1BsH,MAAMZ,EAAY1G,QAAQmS,cAC1BwE,YAAYjQ,EAAY1G,QAAQoS,gBAChCwE,UAAUlQ,EAAY1G,QAAQmS,cAC9BkE,YAAY1O,GACZkP,GAAGnQ,EAAY1G,QAAQ4T,WAAa,MACpChM,OAAOlB,EAAY1G,QAAQ6T,eAAiB;AAEjD,MAAOhP,MAAKmB,UAAUoQ,KAAKM,GAASlQ,KAAK,WACrC,MAAOJ,GAAKE,SAASI,EAAYrC,IAAKoF,KAIlD,MAAO,Kfy3DN,IAAI0M,Iej3DTpB,EAAA9O,UAAAmG,YAAA,SAAYjG,GACR,QAAIA,IACAtB,KAAKmQ,WAAW8B,WAAW,uBACtB3Q,EAAM4Q,UACPnC,QAAQC,IAAI1O,EAAM6Q,QAClBnS,KAAKsQ,QAAQQ,WAAW,kBAepCZ,EAAA9O,UAAAyF,aAAA,SAAahF,EAA2BuQ,EAAiBzO,GAgBrD,MAfA1C,GAAE5E,QAAQwF,EAAYkK,WAAY,SAACsG,GAC/B,GAAIzQ,GAASwQ,EAAQC,EAAW7S,IAE5BoC,KAEAX,EAAE5E,QAAQgW,EAAWlG,IAAIzE,IAAK,SAACN,EAAK5H,GAChCyH,EAAQS,IAAI/D,EAAYnE,EAAKyH,EAAQ4J,IAAIjP,EAAQwF,MAGrDnG,EAAE5E,QAAQgW,EAAWlG,IAAIK,IAAK,SAACpF,EAAK5H,GAChCyH,EAAQqL,OAAO3O,EAAYnE,QAKhCmE,GAUXuM,EAAA9O,UAAAK,SAAA,SAASjC,EAAaoE,EAAwCtC,GAA9D,GAAAC,GAAAvB,IACI,IAAKA,KAAKuH,YAAYjG,GAItB,MAAOtB,MAAKiC,SAASzC,GAAKmC,KAAK,SAACE,GAC5B,GAAI0Q,KA0BJ,OAvBAtR,GAAEkF,KAAKtE,EAAYkK,WAAY,SAACyG,GAE5B,GAAIhR,GACAiR,EAAcD,EAAe/F,UACvBlL,EAAK8O,UAAUqC,iBAAiBF,EAAevG,QAASuG,EAAe7H,KAAM6H,EAAetG,MAC5F3K,EAAK8O,UAAUsC,UAAUH,EAAevG,QAASuG,EAAe7H,KAAM6H,EAAetG,KAE/F,QAAQsG,EAAexG,QACnB,IAAKzC,GAAAlO,WAAWE,KACZiG,EAAUiR,EAAYG,KAAKhP,EAAW,KACtC,MACJ,KAAK2F,GAAAlO,WAAWC,IACZkG,EAAUiR,EAAYI,UAAU,KAAMjP,EAAW,KACjD,MACJ,KAAK2F,GAAAlO,WAAWI,IACZ+F,EAAUiR,EAAYK,UAAUlP,EAAWqD,EAAQ4J,IAAIjN,EAAW4O,EAAenF,aACjF,MACJ,KAAK9D,GAAAlO,WAAWG,OACZgG,EAAUiR,EAAYM,aAAa9L,EAAQ4J,IAAIjN,EAAW4O,EAAenF,aAAc,MAE/FkF,EAAeC,EAAehT,KAAOgC,IAGlC+Q,IACR5Q,KAAK,SAAC4Q,GAEL,MAAOhR,GAAKiC,GAAG2N,IAAIoB,MA/MpBrC,EAAAjQ,SAAW,aAAc,YAAa,YAAa,gBAAiB,KAAM,aAE1EiQ,EAAAtS,MAAgB,WAgN3BsS,IAEA/T,QAAA4C,eAAAlE,EAAA,cAAAmE,Wf01DCnE,ae11Dc,SAACD,GACZA,EAAOoY,SAAS9C,EAAStS,OAAQsS,Mfg2D/B+C,IACA,SAASrY,EAAQC,EAASe,GAE/B,YgBpkED,SAAAsU,KAEI,GAAAgD,GAAA,WAOI,QAAAA,GAAoBjY,EAAc6E,GAAdE,KAAA/E,OAAc+E,KAAAF,WAmDtC,MAhDIoT,GAAA9R,UAAA+R,KAAA,SAAKC,EAAY7T,GACbS,KAAKT,SAAWA,GAOpB2T,EAAA9R,UAAAiS,SAAA,SAASzO,GAEL,MAAKA,IAIL5E,KAAKsD,SAAWsB,EAEZ5E,KAAK/E,KAAKgT,UAAUqF,SACbrM,EAAQS,IAAI1H,KAAKT,SAAU,IAAIS,KAAK/E,KAAKuE,IAAI+T,KAAK,KAAQtM,EAAQ4J,IAAIjM,EAAM5E,KAAK/E,KAAKgT,UAAUqF,eAG3GrM,GAAQS,IAAI1H,KAAKT,SAAU,IAAIS,KAAK/E,KAAKuE,IAAI+T,KAAK,KAAQ3O,IAT/CqC,EAAQqL,OAAOtS,KAAKT,SAAU,IAAIS,KAAK/E,KAAKuE,IAAI+T,KAAK,OAiBpEL,EAAA9R,UAAAoS,MAAA,cACQ3R,GADRN,EAAAvB,KACqB2D,KACb8P,IAEJ,OAAIzT,MAAK/E,KAAKgT,UAAUK,WAEpBrH,EAAQS,IAAI+L,EAAQzT,KAAK/E,KAAKgT,UAAUI,OAAQrO,KAAK0T,YAE9C1T,KAAKF,SAASmC,SAASjC,KAAK/E,KAAKgT,UAAUK,WAAW3M,KAAK,SAACgS,GAE/D,MADA9R,GAAc8R,EACPpS,EAAKzB,SAAS2B,SAASI,EAAYrC,IAAKiU,KAChD9R,KAAK,SAACyQ,GACL,MAAO7Q,GAAKzB,SAAS+G,aAAahF,EAAauQ,EAASzO,KACzDhC,KAAK,SAACyQ,GACL,MAAOA,GAAQ7Q,EAAKtG,KAAKgT,UAAUE,cAIpCnO,KAAK/E,KAAKuM,UAvDd0L,EAAAjT,SAAW,OAAQ,YAyD9BiT,KAEIrV,GACAiC,SAAU,KASdE,MAAKzB,QAAU,SAAUzC,GACrBA,EAAKb,KAAKgT,UAAYhN,EAAE2S,QACpB1F,UAAW,GACXoF,SAAU,GACVnF,UAAW,GACXC,WACAC,OAAQ,GACRC,UAAW,IACZxS,EAAKb,KAAKgT,eACbnS,EAAKb,KAAK4Y,MAAQ,GAAIX,GAAQpX,EAAKb,KAAM4C,EAAOiC,WAGpDE,KAAKuQ,MAAQ,WAAY,SAAUzQ,GAG/B,MAFAjC,GAAOiC,SAAWA,OAvF1B,GAAYmH,GAAOrL,EAAM,GA6FzBO,QAAA4C,eAAAlE,EAAA,cAAAmE,WhBsiECnE,agBtiEc,SAACD,GACZA,EAAOoY,SAAS,uBAAwB9C,MhB4iEtC4D,IACA,SAASlZ,EAAQC,GAEtB,YiB5oED,SAAAqV,KACI,QAAAgD,GAAiBpX,GACb,GAAM4R,IACFqG,OAAQ,OAAQ,OAAQ,QACxBC,KAAM,OACN/U,KAAMnD,EAAKb,KAAKuE,IAAI+T,KAAK,IAG7BzX,GAAKb,KAAKgZ,aAAenY,EAAKb,KAAKgZ,WACnCnY,EAAKb,KAAKiZ,YAAcjT,EAAE2S,OAAO9X,EAAKb,KAAKiZ,gBAAmBxG,GAGlE1N,KAAKzB,QAAU2U,EACflT,KAAKuQ,MAAQ,WACT,WAIRpU,OAAA4C,eAAAlE,EAAA,cAAAmE,WjB2oECnE,aiB3oEc,SAACD,GACZA,EAAOoY,SAAS,qBAAsB9C,MjBipEpCiE,IACA,SAASvZ,EAAQC,EAASe,GAE/B,YACA,IAAIwY,GAAapU,MAAQA,KAAKoU,WAAc,SAAUC,EAAGC,GAErD,QAASC,KAAOvU,KAAKwU,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEnM,eAAesM,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEjT,UAAkB,OAANkT,EAAanY,OAAOuY,OAAOJ,IAAMC,EAAGnT,UAAYkT,EAAElT,UAAW,GAAImT,KkB5qExEtT,EAACrF,EAAM,GAInB+Y,EAAA,mBAAAA,MAuEA,MAtEkBA,GAAAC,aAAuB,cACvBD,EAAAE,aAAuB,qBAMvBF,EAAApW,SAAqC,WAE/C,GAAAuW,GAAA,WACI,QAAAA,GAAsBtN,GAAAxH,KAAAwH,OAgB1B,MAZIsN,GAAA1T,UAAA2T,kBAAA,SAAkBC,EAAcC,GAM5B,MAN4B,UAAAA,UAC5BjV,KAAKwH,KAAOvG,EAAE2S,UAAW5T,KAAKwH,MAC1BwN,KAAMA,EACNC,QAASA,IAGNjV,MAGX8U,EAAA1T,UAAAmB,QAAA,WACI,MAAOvC,MAAKwH,MAEpBsN,KAEAH,EAAA,SAAAO,GACI,QAAAP,GAAsBnN,GAClB0N,EAAAC,KAAAnV,KAAMwH,GADYxH,KAAAwH,OAoB1B,MArByB4M,GAAAO,EAAAO,GAYrBP,EAAAvT,UAAAoK,cAAA,SAAc4J,EAAiB3S,EAAexD,EAAeoW,EAAeL,GACxE,MAAO,IAAIL,IACPS,QAASA,EACT3S,MAAOA,EACPxD,KAAMA,EACNoW,KAAMA,EACNL,KAAMA,KAGlBL,GArByBG,EAuBzB,OAAO,IAAIH,KAODA,EAAAW,SAAmC,WAAY,eAAgB,SAACxV,EAAUC,GACpF,GAAA4U,GAAA,WACI,QAAAA,MAMJ,MAHIA,GAAAvT,UAAA8C,YAAA,SAAY1E,KAGhBmV,IAEA,OAAO,IAAIA,KAEnBA,IAEAxY,QAAA4C,eAAAlE,EAAA,cAAAmE,WlBypECnE,akBzpEc,SAACD,GACZA,EAAOyO,QAAQsL,EAAQC,aAAcD,EAAQpW,SAC7C3D,EAAOyO,QAAQsL,EAAQE,aAAcF,EAAQW,WlB+pE3CC,IACA,SAAS3a,EAAQC,EAASe,GAE/B,YmBjvED,IAAY4Z,GAAG5Z,EAAM,IACT6Z,EAAS7Z,EAAM,KAE3B8Z,EAAA,WACI,QAAAA,KAEIF,EAAIG,UAAU,QAAS,SAACnO,EAAMoO,GAC1B,QAAIH,EAAUI,QAAQrO,IAIf,MAIXgO,EAAIG,UAAU,SAAU,SAACnO,EAAMoO,GAC3B,MAAIH,GAAUK,cAActO,EAAM,SACvB,KAGJ,QAIXgO,EAAIG,UAAU,OAAQ,SAACnO,EAAMoO,GACzB,MAAIH,GAAUM,OAAOvO,GACV,KAGJ,QAGXgO,EAAIG,UAAU,SAAU,SAACnO,EAAMoO,GAC3B,MAAIH,GAAUO,MAAMxO,IAASiO,EAAUQ,KAAKzO,GACjC,MAEH0O,KAAM,SAElBV,EAAIW,iBAAiB,SAAUC,EAAO5O,EAAMoO,GACxC,MAAO,eAAiBQ,EAAMF,OAI1C,MAAAR,KAEa7a,GAAAwb,cAAgB,GAAIX,InB4uE3BY,IACA,SAAS1b,EAAQC,EAASe,aAEM2a,GAAY,YoBvxElD,IAAY5Z,GAAUf,EAAM,EAC5BA,GAAO,GACP,IAAY4a,GAAe5a,EAAM,IACrBqF,EAACrF,EAAM,GACnB6a,EAAA7a,EAAyB,KACzB8a,EAAA9a,EAA4B,IAC5B+a,EAAA/a,EAAwB,KACxBgb,EAAAhb,EAAoB,KACpBib,EAAAjb,EAAqB,IACrBA,GAAO,GACP,IAAA2H,GAAA3H,EAAyB,GAEnBhB,EAAS8B,QAAQ9B,OAAO,cAAegc,aAASC,aAAUF,aAAaD,aAAiB/Z,EAAY,YAAa6Z,GAEvH5b,GAAOiD,QACH,iBACA,qBACA,gBACA,qBACA,oBACA,6BACA,SAACiZ,EAAgBC,EAAoBC,EAAeC,EAAoBC,EAAmBC,EAA4BC,GAEnHX,EAAAY,WAAWN,EAAoBD,GAE/BK,EAA2BG,cAAcL,MAG5CrY,KAAK,aAAc,SAAU,KAAM,WAAY,SAACuR,EAAkCoH,EAAQ/T,EAAkBgU,GACzG,GAAIC,MAEAC,EAAgB,WAChBD,EAAME,cACNJ,EAAOK,GAAGH,EAAMI,QAAQ5Y,KAAMwY,EAAMK,SAAUL,EAAM/J,SAGxDyC,GAAWtI,IAAI,oBAAqB,SAACkQ,EAAKF,EAASC,EAAUE,EAAWC,GACpElI,QAAQC,IAAI,oBAAqB+H,EAAKF,EAASC,EAAUE,EAAWC,KAGxE9H,EAAWtI,IAAI,oBAAqB,SAAUqQ,EAAOL,EAASC,EAAUE,EAAWC,EAAYvK,GACtF+J,EAAME,aACP1W,EAAE2S,OAAO6D,GACLI,QAASA,EACTC,SAAUA,EACVE,UAAWA,EACXC,WAAYA,EACZvK,QAASA,IAEbwK,EAAMC,iBACN3U,EAAG2N,KACCiH,IAAKZ,EAASa,WAAW9B,EAAY,gBACrC+B,MAAOd,EAASa,WAAW9B,EAAY,oBACxC5U,KAAK+V,EAAeA,SAMvC9c,EAAOoE,MAAM,sBACTQ,IAAK,qBACL8C,KAAM,SACNiD,KAAMhC,EAAAzI,WAAWG,KACjBwH,MAAO,SACPxH,MACI2N,YACIrD,KAAM,SACN0D,YACIzJ,KACI+F,KAAM,SACN9C,MAAO,SAInByG,aACI1J,IAAK,MACL+F,KAAM,SACNqJ,YAAa,MACbjC,UAAW,gBAKvBxQ,OAAA4C,eAAAlE,EAAA,cAAAmE,WpB8wECnE,aoB9wEcD,EAAOqE,OpBgxEQkW,KAAKta,EAAS","file":"0.04a37586aa2964f4b3ec.hot-update.js","sourcesContent":["webpackHotUpdate(0,{\n\n/***/ 5:\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t(function (ActionType) {\n\t    ActionType[ActionType[\"none\"] = 0] = \"none\";\n\t    ActionType[ActionType[\"list\"] = 1] = \"list\";\n\t    ActionType[ActionType[\"form\"] = 2] = \"form\";\n\t    ActionType[ActionType[\"wizard\"] = 3] = \"wizard\";\n\t    ActionType[ActionType[\"confirm\"] = 4] = \"confirm\";\n\t})(exports.ActionType || (exports.ActionType = {}));\n\tvar ActionType = exports.ActionType;\n\n\n/***/ },\n\n/***/ 16:\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t(function (MethodType) {\n\t    MethodType[MethodType[\"GET\"] = 0] = \"GET\";\n\t    MethodType[MethodType[\"POST\"] = 1] = \"POST\";\n\t    MethodType[MethodType[\"DELETE\"] = 2] = \"DELETE\";\n\t    MethodType[MethodType[\"PUT\"] = 3] = \"PUT\";\n\t    MethodType[MethodType[\"HEAD\"] = 4] = \"HEAD\";\n\t})(exports.MethodType || (exports.MethodType = {}));\n\tvar MethodType = exports.MethodType;\n\n\n/***/ },\n\n/***/ 44:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar angular = __webpack_require__(7);\n\tvar ngMaterial = __webpack_require__(6);\n\t__webpack_require__(88);\n\t__webpack_require__(135);\n\tvar action_provider_1 = __webpack_require__(159);\n\tvar utils_service_1 = __webpack_require__(162);\n\tvar rest_service_1 = __webpack_require__(18);\n\tvar login_value_1 = __webpack_require__(157);\n\tvar modules_value_1 = __webpack_require__(158);\n\tvar crawler_value_1 = __webpack_require__(156);\n\tvar common_value_1 = __webpack_require__(155);\n\tvar form_directive_1 = __webpack_require__(151);\n\tvar list_directive_1 = __webpack_require__(152);\n\tvar dialog_form_directive_1 = __webpack_require__(149);\n\tvar search_directive_1 = __webpack_require__(153);\n\tvar wizard_directive_1 = __webpack_require__(154);\n\tvar dialog_wizard_directive_1 = __webpack_require__(150);\n\tvar builder_directive_1 = __webpack_require__(148);\n\tvar autocomplete_provider_1 = __webpack_require__(160);\n\tvar jsoneditor_provider_1 = __webpack_require__(161);\n\t__webpack_require__(69);\n\t__webpack_require__(244);\n\t__webpack_require__(163);\n\tvar _name = \"fxAction\";\n\tvar module = angular.module(_name + \"Module\", [ngMaterial, rest_service_1.default, \"schemaForm\", \"ng.jsoneditor\"]);\n\tutils_service_1.default(module);\n\taction_provider_1.default(module);\n\tform_directive_1.default(module);\n\tlist_directive_1.default(module);\n\tmodules_value_1.default(module);\n\tlogin_value_1.default(module);\n\tdialog_form_directive_1.default(module);\n\tsearch_directive_1.default(module);\n\twizard_directive_1.default(module);\n\tdialog_wizard_directive_1.default(module);\n\tbuilder_directive_1.default(module);\n\tcrawler_value_1.default(module);\n\tcommon_value_1.default(module);\n\tautocomplete_provider_1.default(module);\n\tjsoneditor_provider_1.default(module);\n\tfunction sfLayout(args) {\n\t    var layoutDiv = args.fieldFrag.querySelector('[sf-layout]');\n\t    if (layoutDiv && args.form.grid) {\n\t        Object.getOwnPropertyNames(args.form.grid).forEach(function (property, idx, array) {\n\t            layoutDiv.setAttribute(property, args.form.grid[property]);\n\t        });\n\t    }\n\t}\n\t;\n\tmodule\n\t    .config([\"sfErrorMessageProvider\", function (sfErrorMessageProvider) {\n\t        sfErrorMessageProvider.setDefaultMessage(\"302\", \"[{{title}}]是必填项\");\n\t        sfErrorMessageProvider.setDefaultMessage(\"103\", \"[{{title}}]超过了最大值{{schema.maximum}}\");\n\t        sfErrorMessageProvider.setDefaultMessage(\"101\", \"[{{title}}]小于最小值{{schema.minimum}}\");\n\t        sfErrorMessageProvider.setDefaultMessage(\"200\", \"[{{title}}]字符长度小于最小值({{schema.minLength}})\");\n\t        sfErrorMessageProvider.setDefaultMessage(\"201\", \"[{{title}}]字符长度大于最大值({{schema.maxLength}})\");\n\t        sfErrorMessageProvider.setDefaultMessage(\"400\", \"数组长度不正确，{{schema.minItems||0}}-{{schema.maxItems||'∞'}}\");\n\t        sfErrorMessageProvider.setDefaultMessage(\"500\", \"格式不正确\");\n\t    }])\n\t    .config([\"sfBuilderProvider\", \"schemaFormDecoratorsProvider\", \"jsonEditorBuilderProvider\", \"autoCompleteBuilderProvider\", function (sfBuilderProvider, schemaFormDecoratorsProvider, jsonEditorBuilder, autoCompleteBuilder) {\n\t        schemaFormDecoratorsProvider.defineAddOn('materialDecorator', 'jeditor', \"./decorators/jsoneditor.jade\", sfBuilderProvider.stdBuilders.concat(jsonEditorBuilder.builder));\n\t        schemaFormDecoratorsProvider.defineAddOn('materialDecorator', 'card', \"./decorators/card.jade\", [sfBuilderProvider.builders.sfField, sfBuilderProvider.builders.condition, sfBuilderProvider.builders.transclusion]);\n\t        schemaFormDecoratorsProvider.defineAddOn('materialDecorator', 'autocomplete-1', \"./decorators/autocomplete-1.jade\", [sfBuilderProvider.builders.sfField, sfLayout, sfBuilderProvider.builders.condition, autoCompleteBuilder.builder, sfBuilderProvider.builders.transclusion]);\n\t    }])\n\t    .run([\"$templateCache\", \"autoCompleteBuilder\", function ($templateCache) {\n\t        $templateCache.put('./decorators/jsoneditor.jade', __webpack_require__(102)());\n\t        $templateCache.put('./decorators/card.jade', __webpack_require__(101)());\n\t        $templateCache.put('./decorators/autocomplete-1.jade', __webpack_require__(100)());\n\t        $templateCache.put('./decorators/section-1.jade', __webpack_require__(103)());\n\t    }]);\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = module.name;\n\n\n/***/ },\n\n/***/ 148:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar _name = \"fxBuilderAction\";\n\tvar Controller = (function () {\n\t    function Controller(fxAction, toolbarUtils) {\n\t        this.fxAction = fxAction;\n\t        this.toolbarUtils = toolbarUtils;\n\t        this.formData = this.formData || {};\n\t    }\n\t    Controller.$inject = [\"fxAction\", \"toolbarUtils\"];\n\t    return Controller;\n\t}());\n\tfunction Directive() {\n\t    return {\n\t        restrict: 'EA',\n\t        template: __webpack_require__(104)(),\n\t        bindToController: {\n\t            formData: \"=ngModel\",\n\t            key: \"@\"\n\t        },\n\t        require: \"^\" + _name,\n\t        controller: Controller,\n\t        controllerAs: 'formBuilderCtl',\n\t        replace: true\n\t    };\n\t}\n\tDirective.$inject = [];\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = function (module) {\n\t    module.directive(_name, Directive);\n\t};\n\n\n/***/ },\n\n/***/ 149:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar _ = __webpack_require__(3);\n\tvar _dirName = 'fxDialogFormAction';\n\tvar Controller = (function () {\n\t    function Controller($scope, fxAction, materialUtils, toolbarUtils, $mdDialog) {\n\t        this.$scope = $scope;\n\t        this.fxAction = fxAction;\n\t        this.materialUtils = materialUtils;\n\t        this.toolbarUtils = toolbarUtils;\n\t        this.$mdDialog = $mdDialog;\n\t        this.formData = this.formData || {};\n\t    }\n\t    Controller.prototype.doSubmit = function ($form) {\n\t        var _this = this;\n\t        var promise = this.fxAction.doAction(this.key, this.formData, $form);\n\t        this.isBusy = true;\n\t        if (promise) {\n\t            promise.then(function (result) {\n\t                _this.actionModel.closeDialog === true && _this.$mdDialog.hide(result);\n\t                if (_.isFunction(_this.submitCallBack)) {\n\t                    _this.submitCallBack();\n\t                }\n\t            }).finally(function () {\n\t                _this.isBusy = false;\n\t            });\n\t        }\n\t        return promise;\n\t    };\n\t    Controller.prototype.getActionModel = function () {\n\t        var _this = this;\n\t        this.fxAction.getModel(this.key).then(function (model) {\n\t            _this.actionModel = model;\n\t            _this.toolbars = [\n\t                _this.toolbarUtils.noneBuilder(\"icon\").iconBuilder(_this.actionModel.icon).toValue(),\n\t                _this.toolbarUtils.labelBuilder(_this.actionModel.title).attrBuilder({ flex: \"\" }).toValue(),\n\t                _this.toolbarUtils.btnBuilder(\"关闭\", \"md-icon-button\", false).iconBuilder(\"close\").btnClick(function ($event) {\n\t                    _this.$mdDialog.cancel();\n\t                }).toValue()\n\t            ];\n\t        });\n\t    };\n\t    Controller.$inject = [\"$scope\", \"fxAction\", \"materialUtils\", \"toolbarUtils\", \"$mdDialog\"];\n\t    return Controller;\n\t}());\n\tfunction Directive() {\n\t    return {\n\t        restrict: 'EA',\n\t        template: __webpack_require__(106)(),\n\t        scope: true,\n\t        require: \"^\" + _dirName,\n\t        bindToController: {\n\t            key: \"@\",\n\t            formData: '=ngModel',\n\t            submitCallBack: '=?ngSubmit'\n\t        },\n\t        controller: Controller,\n\t        controllerAs: 'dialogFormCtl',\n\t        replace: false,\n\t        compile: function ($ele) {\n\t            $ele.replaceWith(angular.element($ele.html()));\n\t            return function ($scope, $ele, $attrs, $ctl) {\n\t                $scope.$watch(function () {\n\t                    return $ctl.key;\n\t                }, function () {\n\t                    $ctl.getActionModel();\n\t                });\n\t            };\n\t        }\n\t    };\n\t}\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = function (module) {\n\t    module.directive(_dirName, Directive);\n\t};\n\n\n/***/ },\n\n/***/ 150:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar _dirName = 'fxDialogWizardAction';\n\tvar Controller = (function () {\n\t    function Controller($scope, fxAction, materialUtils, toolbarUtils, $mdDialog) {\n\t        this.$scope = $scope;\n\t        this.fxAction = fxAction;\n\t        this.materialUtils = materialUtils;\n\t        this.toolbarUtils = toolbarUtils;\n\t        this.$mdDialog = $mdDialog;\n\t        this.formData = this.formData || {};\n\t    }\n\t    Controller.prototype.getActionModel = function () {\n\t        var _this = this;\n\t        this.fxAction.getModel(this.key).then(function (model) {\n\t            _this.actionModel = model;\n\t            _this.toolbars = [\n\t                _this.toolbarUtils.noneBuilder(\"icon\").iconBuilder(_this.actionModel.icon).toValue(),\n\t                _this.toolbarUtils.labelBuilder(_this.actionModel.title).attrBuilder({ flex: \"\" }).toValue(),\n\t                _this.toolbarUtils.btnBuilder(\"关闭\", \"md-icon-button\", false).iconBuilder(\"close\").btnClick(function ($event) {\n\t                    _this.$mdDialog.cancel(\"用户关闭\");\n\t                }).toValue()\n\t            ];\n\t        });\n\t    };\n\t    Controller.$inject = [\"$scope\", \"fxAction\", \"materialUtils\", \"toolbarUtils\", \"$mdDialog\"];\n\t    return Controller;\n\t}());\n\tfunction Directive() {\n\t    return {\n\t        restrict: 'EA',\n\t        template: __webpack_require__(111)(),\n\t        scope: true,\n\t        require: \"^\" + _dirName,\n\t        bindToController: {\n\t            key: \"@\",\n\t            formData: '=ngModel',\n\t            submitCallBack: \"=?ngSubmit\",\n\t        },\n\t        controller: Controller,\n\t        controllerAs: 'dialogWizardCtl',\n\t        replace: false,\n\t        compile: function ($ele) {\n\t            $ele.replaceWith(angular.element($ele.html()));\n\t            return function ($scope, $ele, $attr, $ctl) {\n\t                $scope.$watch(function () {\n\t                    return $ctl.key;\n\t                }, function () {\n\t                    $ctl.getActionModel();\n\t                });\n\t            };\n\t        }\n\t    };\n\t}\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = function (module) {\n\t    module.directive(_dirName, Directive);\n\t};\n\n\n/***/ },\n\n/***/ 151:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Controller = (function () {\n\t    function Controller($scope, fxAction) {\n\t        this.$scope = $scope;\n\t        this.fxAction = fxAction;\n\t        this.formData = this.formData || {};\n\t    }\n\t    Controller.prototype.getActionModel = function () {\n\t        var _this = this;\n\t        this.fxAction.getModel(this.key).then(function (model) {\n\t            _this.actionModel = model;\n\t        });\n\t    };\n\t    Controller.$inject = [\"$scope\", \"fxAction\"];\n\t    return Controller;\n\t}());\n\tfunction Directive() {\n\t    return {\n\t        restrict: 'EA',\n\t        template: __webpack_require__(107)(),\n\t        scope: true,\n\t        require: \"^fxFormAction\",\n\t        bindToController: {\n\t            formData: \"=ngModel\",\n\t            actionModel: \"=?\",\n\t            key: \"@?\"\n\t        },\n\t        controller: Controller,\n\t        controllerAs: 'formCtl',\n\t        replace: true,\n\t        transclude: true,\n\t        link: function ($scope, $ele, $attrs, $ctl) {\n\t            $scope.$watch(function () {\n\t                return $ctl.key;\n\t            }, function () {\n\t                $ctl.getActionModel();\n\t            });\n\t        }\n\t    };\n\t}\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = function (module) {\n\t    module.directive(\"fxFormAction\", Directive);\n\t};\n\n\n/***/ },\n\n/***/ 152:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar action_model_1 = __webpack_require__(5);\n\tvar Controller = (function () {\n\t    function Controller($scope, $q, $timeout, fxAction, toolbarUtils, materialUtils) {\n\t        var _this = this;\n\t        this.$scope = $scope;\n\t        this.$q = $q;\n\t        this.$timeout = $timeout;\n\t        this.fxAction = fxAction;\n\t        this.toolbarUtils = toolbarUtils;\n\t        this.materialUtils = materialUtils;\n\t        this.mdLimitOptions = [10, 30, 50, 100, 300];\n\t        this.clientData = {};\n\t        this.queryData = { offset: 0, limit: 10, page: 1 };\n\t        this.isBusy = false;\n\t        this.showPage = false;\n\t        this.selected = [];\n\t        fxAction.getModel(this.key).then(function (model) {\n\t            _this.actionModel = _.cloneDeep(model);\n\t            _this.initToolbar();\n\t            _this.initItemToolbar();\n\t            _this.doSearch();\n\t        });\n\t        this.onOrderChange = this.orderChange.bind(this);\n\t        this.onPageChange = this.pageChange.bind(this);\n\t        this.doSearchBind = this.doSearch.bind(this);\n\t    }\n\t    Controller.prototype.doClickActionMenu = function ($event, actionModel, item) {\n\t        var _this = this;\n\t        this.fxAction.doActionModel($event, actionModel, item).then(function (result) {\n\t            _this.materialUtils.showMsg(\"\" + (actionModel.successMsg || \"操作成功!\"));\n\t            _this.$timeout(function () {\n\t                if (actionModel.refreshList) {\n\t                    _this.doSearch(_this.queryData.where || {});\n\t                }\n\t            }, 200);\n\t        });\n\t    };\n\t    Controller.prototype.initToolbar = function () {\n\t        var _this = this;\n\t        this.actionModel.list.toolbars.push(this.toolbarUtils.noneBuilder(\"icon\").iconBuilder(this.actionModel.icon, { fill: \"black\" }).toValue());\n\t        this.actionModel.list.toolbars.push(this.toolbarUtils.labelBuilder(\"\" + this.actionModel.title).attrBuilder({ flex: \"\" }).toValue());\n\t        this.fxAction.getModels(this.actionModel.actions).then(function (actionModels) {\n\t            _.forEach(actionModels, function (actionModel) {\n\t                if (actionModel.type !== action_model_1.ActionType.list) {\n\t                    _this.actionModel.list.toolbars.push(_this.toolbarUtils.btnBuilder(actionModel.title, \"md-icon-button\", false).tooltipBuilder(\"\").iconBuilder(actionModel.icon, { fill: \"black\" }).btnClick(function ($event, item) {\n\t                        _this.doClickActionMenu($event, actionModel, item || {});\n\t                    }).toValue());\n\t                }\n\t            });\n\t            if (_this.actionModel.list.showRefreshBtn) {\n\t                _this.actionModel.list.toolbars.push(_this.toolbarUtils.btnBuilder(\"刷新\", \"md-icon-button\", false).iconBuilder(\"refresh\", { fill: \"black\" }).btnClick(function ($event) {\n\t                    _this.doSearch(_this.queryData.where || {});\n\t                }).toValue());\n\t            }\n\t            if (_this.actionModel.list.showSearchBtn) {\n\t                _this.actionModel.list.toolbars.push(_this.toolbarUtils.btnBuilder(\"{{listCtl.actionModel.list.showSearchPanel?'关闭搜索栏':'打开搜索栏'}}\", \"md-icon-button\", false).iconBuilder(\"{{listCtl.actionModel.list.showSearchPanel?'window-open':'window-closed'}}\", { fill: \"black\" }).btnClick(function ($event) {\n\t                    _this.actionModel.list.showSearchPanel = !_this.actionModel.list.showSearchPanel;\n\t                }).toValue());\n\t            }\n\t        });\n\t    };\n\t    Controller.prototype.initItemToolbar = function () {\n\t        var _this = this;\n\t        var menuTool = this.toolbarUtils.menuBuilder(\"\", \"md-icon-button\").tooltipBuilder(\"操作菜单\").iconBuilder(\"expand_more\").menuOptionsBuilder().toValue();\n\t        var keys = [];\n\t        var itemActionsObj = _.keyBy(this.actionModel.itemActions, \"key\");\n\t        _.each(this.actionModel.itemActions, function (item) {\n\t            keys.push(item.key);\n\t        });\n\t        keys.length && this.fxAction.getModels(keys).then(function (actionModels) {\n\t            _.forEach(actionModels, function (actionModel, key) {\n\t                var condition = itemActionsObj[key].condition;\n\t                switch (actionModel.type) {\n\t                    case action_model_1.ActionType.form:\n\t                    case action_model_1.ActionType.wizard:\n\t                    case action_model_1.ActionType.confirm:\n\t                        var menu = _this.toolbarUtils.menuItemBuilder(actionModel.title, null, true).tooltipBuilder(\"\").noOptions(true, false).iconBuilder(actionModel.icon).btnClick(function ($event, item) {\n\t                            _this.doClickActionMenu($event, actionModel, item);\n\t                        });\n\t                        if (condition) {\n\t                            menu.conditionBuilder(condition);\n\t                        }\n\t                        menuTool.items.push(menu.toValue());\n\t                        break;\n\t                }\n\t            });\n\t            _this.actionModel.list.itemToolbars = [menuTool];\n\t        });\n\t    };\n\t    Controller.prototype.orderChange = function (order) {\n\t        this.queryData.order = order;\n\t        this.doSearch(this.queryData.where || {});\n\t    };\n\t    Controller.prototype.pageChange = function (page, limit) {\n\t        if (limit !== this.queryData.limit) {\n\t            page = 1;\n\t        }\n\t        this.queryData.page = page;\n\t        if (page > 0) {\n\t            this.queryData.offset = (page - 1) * limit;\n\t        }\n\t        this.doSearch(this.queryData.where || {});\n\t    };\n\t    Controller.prototype.doSearch = function (filterData) {\n\t        var _this = this;\n\t        this.isBusy = true;\n\t        this.queryData.where = filterData || {};\n\t        this.promise = this.fxAction.doAction(this.key, this.queryData);\n\t        if (!this.promise) {\n\t            return;\n\t        }\n\t        this.promise.then(function (result) {\n\t            _this.fxAction.doDealResult(_this.actionModel, result, _this.clientData);\n\t        }).finally(function () {\n\t            _this.isBusy = false;\n\t        });\n\t    };\n\t    Controller.$inject = [\"$scope\", \"$q\", \"$timeout\", \"fxAction\", \"toolbarUtils\", \"materialUtils\"];\n\t    return Controller;\n\t}());\n\tfunction Directive() {\n\t    return {\n\t        restrict: 'EA',\n\t        template: __webpack_require__(108)(),\n\t        scope: true,\n\t        bindToController: {\n\t            key: \"@\",\n\t            selected: '=?'\n\t        },\n\t        controller: Controller,\n\t        controllerAs: 'listCtl',\n\t        replace: true,\n\t        transclude: true\n\t    };\n\t}\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = function (module) {\n\t    module.directive(\"fxListAction\", Directive);\n\t};\n\n\n/***/ },\n\n/***/ 153:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar _ = __webpack_require__(3);\n\tvar pointer = __webpack_require__(25);\n\tvar _name = \"fxSearchAction\";\n\tvar Controller = (function () {\n\t    function Controller(fxAction, toolbarUtils) {\n\t        this.fxAction = fxAction;\n\t        this.toolbarUtils = toolbarUtils;\n\t        this.initSearchToolbar();\n\t        this.formData = this.formData || {};\n\t    }\n\t    Controller.prototype.clearFilterData = function () {\n\t        var _this = this;\n\t        _.forEach(this.formData, function (val, key) {\n\t            delete _this.formData[key];\n\t        });\n\t    };\n\t    Controller.prototype.initSearchToolbar = function () {\n\t        var _this = this;\n\t        this.toolbars = [\n\t            this.toolbarUtils.labelBuilder('{{searchCtl.title}}搜索').attrBuilder({ flex: \"\" }).toValue(),\n\t            this.toolbarUtils.btnBuilder(\"清空搜索条件\", \"md-icon-button\", false).iconBuilder(\"clear_all\").btnClick(function ($event) {\n\t                _this.clearFilterData();\n\t            }).toValue(),\n\t            this.toolbarUtils.btnBuilder(\"关闭搜索栏\", \"md-icon-button\", false).iconBuilder(\"{{searchCtl.isShow?'window-open':'window-closed'}}\").btnClick(function ($event) {\n\t                _this.isShow = !_this.isShow;\n\t            }).toValue()\n\t        ];\n\t    };\n\t    Controller.prototype.doPreSearch = function ($event, $form) {\n\t        var searchData = {};\n\t        if (this.fxAction.doFormCheck($form) && _.isFunction(this.doSearch)) {\n\t            _.forEach(this.formData, function (data, key) {\n\t                if (key.substr(0, 1) === \"/\") {\n\t                    pointer.set(searchData, key, data);\n\t                }\n\t            });\n\t            this.doSearch(searchData);\n\t        }\n\t    };\n\t    Controller.$inject = [\"fxAction\", \"toolbarUtils\"];\n\t    return Controller;\n\t}());\n\tfunction Directive() {\n\t    return {\n\t        restrict: 'EA',\n\t        template: __webpack_require__(109)(),\n\t        bindToController: {\n\t            formData: \"=ngModel\",\n\t            key: \"@\",\n\t            disabled: '=',\n\t            isShow: '=',\n\t            doSearch: '=?',\n\t            title: '=?'\n\t        },\n\t        require: \"^\" + _name,\n\t        controller: Controller,\n\t        controllerAs: 'searchCtl',\n\t        replace: true\n\t    };\n\t}\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = function (module) {\n\t    module.directive(_name, Directive);\n\t};\n\n\n/***/ },\n\n/***/ 154:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar action_model_1 = __webpack_require__(5);\n\tvar Controller = (function () {\n\t    function Controller($scope, $timeout, fxAction, toolbarUtils, materialUtils, $mdDialog) {\n\t        var _this = this;\n\t        this.$scope = $scope;\n\t        this.$timeout = $timeout;\n\t        this.fxAction = fxAction;\n\t        this.toolbarUtils = toolbarUtils;\n\t        this.materialUtils = materialUtils;\n\t        this.$mdDialog = $mdDialog;\n\t        this.isShow = true;\n\t        this.selectedIndex = 0;\n\t        this.initToolbar();\n\t        this.$scope.$on(\"$destroy\", function () {\n\t            _this.formData = null;\n\t            _this.$forms = null;\n\t            _this.toolbars = null;\n\t            _this.actionModel = null;\n\t        });\n\t    }\n\t    Controller.prototype.initForm = function (action, $scope) {\n\t        if (!this.$forms) {\n\t            this.$forms = {};\n\t        }\n\t        this.$forms[action.key] = $scope[(action.key + \"Form\")];\n\t    };\n\t    Controller.prototype.showForm = function (action, index) {\n\t        return index === 0 || this.$forms.hasOwnProperty(action.key) || index == this.selectedIndex || index == this.selectedIndex + 1;\n\t    };\n\t    Controller.prototype.doCheckCurrentForm = function (index) {\n\t        var actionModel = this.actionModel.wizard.actions[_.isUndefined(index) ? this.selectedIndex : index];\n\t        if (this.$forms) {\n\t            var formController = this.$forms[(\"\" + actionModel.key)];\n\t            if (!this.fxAction.doFormCheck(formController)) {\n\t                return false;\n\t            }\n\t        }\n\t        return true;\n\t    };\n\t    Controller.prototype.doCheckForms = function () {\n\t        var _this = this;\n\t        var res = true;\n\t        _.each(this.actionModel.wizard.actions, function (action, index) {\n\t            res = _this.doCheckCurrentForm(index);\n\t            if (!res) {\n\t                _this.selectedIndex = index;\n\t                return false;\n\t            }\n\t        });\n\t        return res;\n\t    };\n\t    Controller.prototype.reset = function () {\n\t        var _this = this;\n\t        this.formData = {};\n\t        this.$forms = {};\n\t        this.selectedIndex = 0;\n\t        this.isShow = false;\n\t        this.$timeout(function () {\n\t            _this.isShow = true;\n\t        }, 0);\n\t    };\n\t    Controller.prototype.initToolbar = function () {\n\t        var _this = this;\n\t        this.toolbars = [\n\t            this.toolbarUtils.btnBuilder(\"上一步\", null, true, \"top\").iconBuilder(\"navigate_before\").conditionBuilder(\"wizardCtl.selectedIndex>0\", false).btnClick(function ($event) {\n\t                _this.selectedIndex && _this.selectedIndex--;\n\t            }).toValue(),\n\t            this.toolbarUtils.btnBuilder(\"下一步\", null, true, \"top\").iconBuilder(null, null, \"navigate_next\").conditionBuilder(\"wizardCtl.selectedIndex < wizardCtl.actionModel.wizard.actions.length-1\", false).btnClick(function ($event) {\n\t                if (_this.doCheckCurrentForm() && _.isArray(_this.actionModel.wizard.actions) && _this.actionModel.wizard.actions.length > _this.selectedIndex) {\n\t                    _this.selectedIndex++;\n\t                }\n\t            }).toValue(),\n\t            this.toolbarUtils.btnBuilder(\"完成\", \"md-primary\", true, \"top\").iconBuilder(\"done_all\").conditionBuilder(\"!wizardCtl.isBusy && wizardCtl.selectedIndex===wizardCtl.actionModel.wizard.actions.length-1\", false).btnClick(function ($event) {\n\t                if (_this.doCheckForms()) {\n\t                    _this.isBusy = true;\n\t                    _this.fxAction.doAction(_this.actionModel.key, _this.formData).then(function (result) {\n\t                        _this.actionModel.closeDialog === true && _this.$mdDialog.hide(result);\n\t                        if (_.isFunction(_this.submitCallBack)) {\n\t                            _this.submitCallBack();\n\t                        }\n\t                    }).finally(function () {\n\t                        _this.isBusy = false;\n\t                    });\n\t                }\n\t            }).toValue()\n\t        ];\n\t    };\n\t    Controller.prototype.getActionModel = function () {\n\t        var _this = this;\n\t        var actionModel;\n\t        this.fxAction.getModel(this.key).then(function (model) {\n\t            actionModel = _.cloneDeep(model);\n\t            return _this.fxAction.getModels(model.wizard.actions);\n\t        }).then(function (actionModels) {\n\t            var actions = [];\n\t            _.each(actionModel.wizard.actions, function (action) {\n\t                if (_.isString(action)) {\n\t                    action = actionModels[action];\n\t                }\n\t                if (action && (action.type === action_model_1.ActionType.form || action.type === action_model_1.ActionType.wizard)) {\n\t                    if (!action.form.dataSchema && action.type === action_model_1.ActionType.form) {\n\t                        action.form.dataSchema = actionModel.wizard.defaultSchema.dataSchema;\n\t                    }\n\t                    actions.push(action);\n\t                }\n\t            });\n\t            actionModel.wizard.actions = actions;\n\t            _this.actionModel = actionModel;\n\t        });\n\t    };\n\t    Controller.$inject = [\"$scope\", \"$timeout\", \"fxAction\", \"toolbarUtils\", \"materialUtils\", \"$mdDialog\"];\n\t    return Controller;\n\t}());\n\tfunction Directive() {\n\t    return {\n\t        restrict: 'EA',\n\t        template: __webpack_require__(112)(),\n\t        scope: true,\n\t        require: \"^fxWizardAction\",\n\t        bindToController: {\n\t            formData: \"=ngModel\",\n\t            submitCallBack: \"=?ngSubmit\",\n\t            key: \"@\"\n\t        },\n\t        controller: Controller,\n\t        controllerAs: 'wizardCtl',\n\t        replace: true,\n\t        transclude: true,\n\t        link: function ($scope, $ele, $attr, $ctl) {\n\t            $scope.$watch(function () {\n\t                return $ctl.key;\n\t            }, function () {\n\t                $ctl.getActionModel();\n\t            });\n\t        }\n\t    };\n\t}\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = function (module) {\n\t    module.directive(\"fxWizardAction\", Directive);\n\t};\n\n\n/***/ },\n\n/***/ 155:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar action_model_1 = __webpack_require__(5);\n\tvar Result = (function () {\n\t    function Result(toolbarUtils, actionUtils) {\n\t        var actionModel = {\n\t            key: Result.key,\n\t            type: action_model_1.ActionType.form,\n\t            title: \"结果反馈\",\n\t            icon: \"view-module\",\n\t            form: {\n\t                dataSchema: {\n\t                    type: \"object\",\n\t                    properties: {\n\t                        data: {\n\t                            type: \"object\",\n\t                            title: \"返回结果\"\n\t                        }\n\t                    }\n\t                },\n\t                formSchema: [{\n\t                        key: \"data\",\n\t                        type: \"jeditor\"\n\t                    }]\n\t            }\n\t        };\n\t        return actionModel;\n\t    }\n\t    Result.$inject = [\"toolbarUtils\", \"actionUtils\"];\n\t    Result.key = \"resultAction\";\n\t    return Result;\n\t}());\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = function (module) {\n\t    var services = [Result];\n\t    _.each(services, function (ser) {\n\t        module.service(ser.key, ser);\n\t    });\n\t};\n\n\n/***/ },\n\n/***/ 156:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar action_model_1 = __webpack_require__(5);\n\tvar interface_model_1 = __webpack_require__(16);\n\tvar dataSchema = {\n\t    type: \"object\",\n\t    required: [\"key\", \"host\", \"interval\"],\n\t    properties: {\n\t        key: {\n\t            type: \"string\",\n\t            title: \"KEY\"\n\t        },\n\t        host: {\n\t            type: \"string\",\n\t            title: \"主HOST\"\n\t        },\n\t        domainWhiteList: {\n\t            type: \"array\",\n\t            title: \"域名白名单\",\n\t            default: [],\n\t            items: {\n\t                type: \"string\",\n\t                format: \"url-ip\",\n\t                title: \"域名或者IP\"\n\t            }\n\t        },\n\t        whitePathList: {\n\t            type: \"array\",\n\t            title: \"路径白名单\",\n\t            default: [],\n\t            items: {\n\t                type: \"object\",\n\t                title: \"路径配置\",\n\t                required: [\"regexp\", \"scope\"],\n\t                properties: {\n\t                    enable: {\n\t                        type: \"boolean\",\n\t                        title: \"是否启用\"\n\t                    },\n\t                    regexp: {\n\t                        type: \"string\",\n\t                        title: \"正则规则\"\n\t                    },\n\t                    scope: {\n\t                        type: \"string\",\n\t                        title: \"修饰符\"\n\t                    },\n\t                    description: {\n\t                        type: \"string\",\n\t                        title: \"介绍\"\n\t                    },\n\t                }\n\t            }\n\t        },\n\t        interval: {\n\t            type: \"number\",\n\t            default: 1000,\n\t            minimum: 1000,\n\t            title: \"下载间隔，单位ms\"\n\t        },\n\t        downloader: {\n\t            type: \"string\",\n\t            default: \"superagent\",\n\t            title: \"下载策略\"\n\t        },\n\t        initDomain: {\n\t            type: \"string\",\n\t            title: \"初始化域名\"\n\t        },\n\t        proxySettings: {\n\t            type: \"object\",\n\t            title: \"基础设置\",\n\t            properties: {\n\t                useProxy: {\n\t                    type: \"boolean\",\n\t                    title: \"是否启用代理\"\n\t                },\n\t                timeout: {\n\t                    type: \"number\",\n\t                    title: \"超时时间\"\n\t                },\n\t                charset: {\n\t                    type: \"string\",\n\t                    title: \"字符编码\"\n\t                },\n\t                ua: {\n\t                    type: \"string\",\n\t                    title: \"USERAGENT\"\n\t                },\n\t                ipInfo: {\n\t                    type: \"object\",\n\t                    title: \"代理ip设置\",\n\t                    properties: {\n\t                        host: {\n\t                            type: \"string\",\n\t                            format: 'url-ip',\n\t                            title: \"代理ip或域名\"\n\t                        },\n\t                        port: {\n\t                            type: \"number\",\n\t                            title: \"代理端口\"\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        },\n\t        pages: {\n\t            type: \"array\",\n\t            title: \"分析页面配置\",\n\t            items: {\n\t                type: \"object\",\n\t                required: [\"key\", \"fieldKey\"],\n\t                title: \"分析页面配置\",\n\t                properties: {\n\t                    key: {\n\t                        type: \"string\",\n\t                        title: \"页面的KEY\"\n\t                    },\n\t                    areas: {\n\t                        type: \"array\",\n\t                        title: \"页面区域\",\n\t                        items: {\n\t                            type: \"object\",\n\t                            required: [\"selector\", \"dealStrategy\", \"key\"],\n\t                            properties: {\n\t                                key: {\n\t                                    type: \"string\",\n\t                                    title: \"区域KEY\"\n\t                                },\n\t                                selector: {\n\t                                    type: \"string\",\n\t                                    title: \"选择器\"\n\t                                },\n\t                                dealStrategy: {\n\t                                    type: \"string\",\n\t                                    default: \"jsdom\",\n\t                                    title: \"分析策略\"\n\t                                }\n\t                            }\n\t                        }\n\t                    },\n\t                    rule: {\n\t                        type: \"array\",\n\t                        title: \"匹配规则\",\n\t                        default: [],\n\t                        items: {\n\t                            type: \"object\",\n\t                            title: \"路径配置\",\n\t                            required: [\"regexp\", \"scope\"],\n\t                            properties: {\n\t                                regexp: {\n\t                                    type: \"string\",\n\t                                    title: \"正则规则\"\n\t                                },\n\t                                scope: {\n\t                                    type: \"string\",\n\t                                    title: \"修饰符\"\n\t                                }\n\t                            }\n\t                        }\n\t                    },\n\t                    fieldKey: {\n\t                        type: \"string\",\n\t                        title: \"主键字段\"\n\t                    },\n\t                    strict: {\n\t                        type: \"boolean\",\n\t                        title: \"是否启用严格模式\"\n\t                    },\n\t                    strictFields: {\n\t                        type: \"array\",\n\t                        title: \"严格模式下，验证字段\",\n\t                        default: [],\n\t                        items: {\n\t                            type: \"string\",\n\t                            title: \"验证字段\"\n\t                        }\n\t                    },\n\t                    fields: {\n\t                        type: \"object\",\n\t                        title: \"分析字段配置\"\n\t                    }\n\t                }\n\t            }\n\t        },\n\t        description: {\n\t            type: \"string\",\n\t            title: \"描述\",\n\t            maxLength: 500\n\t        }\n\t    }\n\t};\n\tvar List = (function () {\n\t    function List(toolbarUtils, actionUtils) {\n\t        var actionModel = {\n\t            key: List.key,\n\t            type: action_model_1.ActionType.list,\n\t            title: \"爬虫配置文件管理\",\n\t            icon: \"content-save-settings\",\n\t            list: {\n\t                columns: [\n\t                    actionUtils.columnBuilder(\"<span>{{::item.key}}</span>\", \"KEY\").toValue(),\n\t                    actionUtils.columnBuilder(\"<span>{{ ::item.host }}</span>\", \"域名\").toValue(),\n\t                    actionUtils.columnBuilder(\"<span>{{ ::item.interval }}</span>\", \"间隔时间\").toValue(),\n\t                    actionUtils.columnBuilder(\"<span>{{ ::item.downloader }}</span>\", \"下载策略\").toValue(),\n\t                    actionUtils.columnBuilder(\"<span>{{ ::item.description }}</span>\", \"详情\").toValue()\n\t                ],\n\t                searchActionKey: Search.key,\n\t                showRefreshBtn: true,\n\t                showSearchBtn: true,\n\t                showSearchPanel: false,\n\t                toolbars: [],\n\t                itemToolbars: []\n\t            },\n\t            itemActions: [{ key: Edit.key }, { key: Delete.key }, { key: Copy.key }],\n\t            actions: [Add.key],\n\t            interfaces: [{\n\t                    key: \"crawlerSettingList\",\n\t                    method: interface_model_1.MethodType.GET,\n\t                    address: \"\",\n\t                    port: null,\n\t                    path: \"crawler_settings\",\n\t                    jpp: {\n\t                        set: {\n\t                            \"/total\": \"/count\",\n\t                            \"/rows\": \"/rows\"\n\t                        },\n\t                        copy: {},\n\t                        move: {},\n\t                        del: {}\n\t                    },\n\t                    isRestful: true\n\t                }]\n\t        };\n\t        return actionModel;\n\t    }\n\t    List.$inject = [\"toolbarUtils\", \"actionUtils\"];\n\t    List.key = \"crawlerSettingListAction\";\n\t    return List;\n\t}());\n\tvar AddFirst = (function () {\n\t    function AddFirst(toolbarUtils, actionUtils) {\n\t        var actionModel = {\n\t            key: AddFirst.key,\n\t            type: action_model_1.ActionType.form,\n\t            title: \"基础设置\",\n\t            icon: \"add\",\n\t            form: {\n\t                formSchema: [{\n\t                        key: \"key\",\n\t                        type: \"text\",\n\t                        htmlClass: \"md-block\"\n\t                    }, {\n\t                        key: \"host\",\n\t                        type: \"text\",\n\t                        htmlClass: \"md-block\"\n\t                    }, {\n\t                        key: \"initDomain\",\n\t                        type: \"text\",\n\t                        htmlClass: \"md-block\"\n\t                    }, {\n\t                        key: \"interval\",\n\t                        type: \"number\",\n\t                        htmlClass: \"md-block\"\n\t                    }, {\n\t                        key: \"downloader\",\n\t                        type: \"select\",\n\t                        titleMap: [{\n\t                                \"name\": \"SUPERAGENT\",\n\t                                \"value\": \"superagent\"\n\t                            }, {\n\t                                \"name\": \"PHANTOM\",\n\t                                \"value\": \"phantom\"\n\t                            }],\n\t                        htmlClass: \"md-block\"\n\t                    }, {\n\t                        key: \"description\",\n\t                        type: \"textarea\",\n\t                        htmlClass: \"md-block\"\n\t                    }]\n\t            }\n\t        };\n\t        return actionModel;\n\t    }\n\t    AddFirst.$inject = [\"toolbarUtils\", \"actionUtils\"];\n\t    AddFirst.key = \"crawlerSettingAddFirstAction\";\n\t    return AddFirst;\n\t}());\n\tvar AddSecond = (function () {\n\t    function AddSecond(toolbarUtils, actionUtils) {\n\t        var actionModel = {\n\t            key: AddSecond.key,\n\t            type: action_model_1.ActionType.form,\n\t            title: \"白名单设置\",\n\t            icon: \"add\",\n\t            form: {\n\t                formSchema: [{\n\t                        key: \"domainWhiteList\",\n\t                        type: \"chips\",\n\t                        startEmpty: true,\n\t                        description: \"域名白名单，配置可以爬取的域名列表\",\n\t                        showHints: true,\n\t                        htmlClass: \"md-block\"\n\t                    }, {\n\t                        key: \"whitePathList\",\n\t                        type: \"array\",\n\t                        fieldHtmlClass: \"layout-row flex\",\n\t                        startEmpty: true,\n\t                        description: \"路径白名单，配置可以爬取的路径列表\",\n\t                        showHints: true,\n\t                        items: [{\n\t                                type: \"section\",\n\t                                htmlClass: \"layout-row flex\",\n\t                                items: [{\n\t                                        key: \"whitePathList[].enable\",\n\t                                        type: \"select\",\n\t                                        titleMap: [{\n\t                                                name: \"启用\",\n\t                                                value: true\n\t                                            }, {\n\t                                                name: \"不启用\",\n\t                                                value: false\n\t                                            }]\n\t                                    }, {\n\t                                        key: \"whitePathList[].regexp\",\n\t                                        htmlClass: \"md-block flex\",\n\t                                        type: \"text\"\n\t                                    }, {\n\t                                        key: \"whitePathList[].scope\",\n\t                                        type: \"text\"\n\t                                    }, {\n\t                                        key: \"whitePathList[].description\",\n\t                                        type: \"text\"\n\t                                    }]\n\t                            }]\n\t                    }]\n\t            }\n\t        };\n\t        return actionModel;\n\t    }\n\t    AddSecond.$inject = [\"toolbarUtils\", \"actionUtils\"];\n\t    AddSecond.key = \"crawlerSettingAddSecondAction\";\n\t    return AddSecond;\n\t}());\n\tvar AddThird = (function () {\n\t    function AddThird(toolbarUtils, actionUtils) {\n\t        var actionModel = {\n\t            key: AddThird.key,\n\t            type: action_model_1.ActionType.form,\n\t            title: \"其他设置\",\n\t            icon: \"add\",\n\t            form: {\n\t                formSchema: [{\n\t                        key: \"proxySettings\",\n\t                        type: \"card\",\n\t                        items: [{\n\t                                key: \"proxySettings.useProxy\",\n\t                                type: \"checkbox\"\n\t                            }, {\n\t                                key: \"proxySettings.timeout\",\n\t                                type: \"number\",\n\t                                htmlClass: \"md-block\"\n\t                            }, {\n\t                                key: \"proxySettings.charset\",\n\t                                type: \"text\",\n\t                                htmlClass: \"md-block\"\n\t                            }, {\n\t                                key: \"proxySettings.ua\",\n\t                                type: \"textarea\",\n\t                                maxLength: 300,\n\t                                htmlClass: \"md-block\"\n\t                            }, {\n\t                                key: \"proxySettings.ipInfo\",\n\t                                type: \"card\",\n\t                                items: [{\n\t                                        key: \"proxySettings.ipInfo.host\",\n\t                                        type: \"text\",\n\t                                        htmlClass: \"md-block\"\n\t                                    }, {\n\t                                        key: \"proxySettings.ipInfo.port\",\n\t                                        type: \"number\",\n\t                                        htmlClass: \"md-block\"\n\t                                    }]\n\t                            }],\n\t                        htmlClass: \"md-block\"\n\t                    }]\n\t            }\n\t        };\n\t        return actionModel;\n\t    }\n\t    AddThird.$inject = [\"toolbarUtils\", \"actionUtils\"];\n\t    AddThird.key = \"crawlerSettingAddThirdAction\";\n\t    return AddThird;\n\t}());\n\tvar AddForth = (function () {\n\t    function AddForth(toolbarUtils, actionUtils) {\n\t        var actionModel = {\n\t            key: AddFifth.key,\n\t            type: action_model_1.ActionType.form,\n\t            title: \"页面配置\",\n\t            icon: \"add\",\n\t            form: {\n\t                formSchema: [{\n\t                        key: \"pages\",\n\t                        type: \"tabarray\",\n\t                        startEmpty: true,\n\t                        fieldHtmlClass: \"layout-column flex\",\n\t                        items: [{\n\t                                type: \"section\",\n\t                                grid: { flex: \"\" },\n\t                                items: [{\n\t                                        key: \"pages[].key\",\n\t                                        type: \"text\",\n\t                                        htmlClass: \"md-block\"\n\t                                    }, {\n\t                                        key: \"pages[].fieldKey\",\n\t                                        type: \"text\",\n\t                                        htmlClass: \"md-block\"\n\t                                    }, {\n\t                                        key: \"pages[].strict\",\n\t                                        type: \"switch\",\n\t                                        htmlClass: \"md-block\"\n\t                                    }, {\n\t                                        key: \"pages[].strictFields\",\n\t                                        startEmpty: true,\n\t                                        type: \"chips\",\n\t                                        htmlClass: \"md-block\"\n\t                                    }, {\n\t                                        key: \"pages[].rule\",\n\t                                        type: \"array\",\n\t                                        startEmpty: true,\n\t                                        items: [{\n\t                                                type: \"section\",\n\t                                                htmlClass: \"layout-row flex\",\n\t                                                items: [{\n\t                                                        key: \"pages[].rule[].regexp\",\n\t                                                        htmlClass: \"md-block flex\",\n\t                                                        type: \"text\"\n\t                                                    }, {\n\t                                                        key: \"pages[].rule[].scope\",\n\t                                                        type: \"text\"\n\t                                                    }]\n\t                                            }]\n\t                                    }]\n\t                            }]\n\t                    }]\n\t            }\n\t        };\n\t        return actionModel;\n\t    }\n\t    AddForth.$inject = [\"toolbarUtils\", \"actionUtils\"];\n\t    AddForth.key = \"crawlerSettingAddForthAction\";\n\t    return AddForth;\n\t}());\n\tvar AddFifth = (function () {\n\t    function AddFifth(toolbarUtils, actionUtils) {\n\t        var actionModel = {\n\t            key: AddFifth.key,\n\t            type: action_model_1.ActionType.form,\n\t            title: \"页面配置\",\n\t            icon: \"add\",\n\t            form: {\n\t                formSchema: [{\n\t                        key: \"pages\",\n\t                        type: \"tabarray\",\n\t                        items: [{\n\t                                type: \"section\",\n\t                                htmlClass: \"column-row flex\",\n\t                                items: [{\n\t                                        key: \"pages[].key\",\n\t                                        type: \"text\",\n\t                                        htmlClass: \"md-block\"\n\t                                    }, {\n\t                                        key: \"pages[].areas\",\n\t                                        type: \"array\",\n\t                                        startEmpty: true,\n\t                                        description: \"区域配置，用户优化分析性能，减少dom的查询。\",\n\t                                        showHints: true,\n\t                                        items: [{\n\t                                                type: \"section\",\n\t                                                grid: { flex: \"\", layout: \"row\" },\n\t                                                items: [{\n\t                                                        key: \"pages[].areas[].key\",\n\t                                                        type: \"text\"\n\t                                                    }, {\n\t                                                        key: \"pages[].areas[].selector\",\n\t                                                        htmlClass: \"md-block flex\",\n\t                                                        type: \"text\"\n\t                                                    }, {\n\t                                                        key: \"pages[].areas[].dealStrategy\",\n\t                                                        type: \"text\"\n\t                                                    }]\n\t                                            }]\n\t                                    }, {\n\t                                        key: \"pages[].fields\",\n\t                                        type: \"jeditor\",\n\t                                        htmlClass: \"md-block\"\n\t                                    }]\n\t                            }]\n\t                    }]\n\t            }\n\t        };\n\t        return actionModel;\n\t    }\n\t    AddFifth.$inject = [\"toolbarUtils\", \"actionUtils\"];\n\t    AddFifth.key = \"crawlerSettingAddFifthAction\";\n\t    return AddFifth;\n\t}());\n\tvar Add = (function () {\n\t    function Add() {\n\t        var actionModel = {\n\t            key: Add.key,\n\t            type: action_model_1.ActionType.wizard,\n\t            title: \"新建爬虫配置文件\",\n\t            icon: \"add\",\n\t            refreshList: true,\n\t            wizard: {\n\t                defaultSchema: {\n\t                    dataSchema: dataSchema\n\t                },\n\t                actions: [AddFirst.key, AddSecond.key, AddThird.key, AddForth.key, AddFifth.key]\n\t            },\n\t            closeDialog: true,\n\t            interfaces: [{\n\t                    key: \"crawlerSettingAdd\",\n\t                    method: interface_model_1.MethodType.POST,\n\t                    address: \"\",\n\t                    port: null,\n\t                    path: \"crawler_settings\",\n\t                    isRestful: true\n\t                }]\n\t        };\n\t        return actionModel;\n\t    }\n\t    Add.key = \"crawlerSettingAddAction\";\n\t    return Add;\n\t}());\n\tvar Copy = (function () {\n\t    function Copy() {\n\t        var actionModel = {\n\t            key: Copy.key,\n\t            type: action_model_1.ActionType.wizard,\n\t            title: \"复制爬虫配置文件\",\n\t            icon: \"content_copy\",\n\t            refreshList: true,\n\t            wizard: {\n\t                defaultSchema: {\n\t                    dataSchema: dataSchema\n\t                },\n\t                actions: [AddFirst.key, AddSecond.key, AddThird.key, AddForth.key, AddFifth.key]\n\t            },\n\t            closeDialog: true,\n\t            interfaces: [{\n\t                    key: \"crawlerSettingAdd\",\n\t                    method: interface_model_1.MethodType.POST,\n\t                    address: \"\",\n\t                    port: null,\n\t                    path: \"crawler_settings\",\n\t                    isRestful: true\n\t                }]\n\t        };\n\t        return actionModel;\n\t    }\n\t    Copy.key = \"crawlerSettingCopyAction\";\n\t    return Copy;\n\t}());\n\tvar Edit = (function () {\n\t    function Edit(toolbarUtils, actionUtils) {\n\t        var actionModel = {\n\t            key: Edit.key,\n\t            type: action_model_1.ActionType.wizard,\n\t            title: \"修改爬虫配置文件\",\n\t            icon: \"edit\",\n\t            refreshList: true,\n\t            wizard: {\n\t                defaultSchema: {\n\t                    dataSchema: dataSchema\n\t                },\n\t                actions: [AddFirst.key, AddSecond.key, AddThird.key, AddForth.key, AddFifth.key]\n\t            },\n\t            closeDialog: true,\n\t            interfaces: [{\n\t                    key: \"crawlerSettingEdit\",\n\t                    method: interface_model_1.MethodType.PUT,\n\t                    idFieldPath: \"/key\",\n\t                    address: \"\",\n\t                    port: null,\n\t                    path: \"crawler_settings\",\n\t                    isRestful: true\n\t                }]\n\t        };\n\t        return actionModel;\n\t    }\n\t    Edit.$inject = [\"toolbarUtils\", \"actionUtils\"];\n\t    Edit.key = \"crawlerSettingEditAction\";\n\t    return Edit;\n\t}());\n\tvar Delete = (function () {\n\t    function Delete() {\n\t        var actionModel = {\n\t            key: Delete.key,\n\t            type: action_model_1.ActionType.confirm,\n\t            title: \"删除爬虫配置文件\",\n\t            icon: \"delete\",\n\t            refreshList: true,\n\t            confirm: {\n\t                confirmTitle: \"\",\n\t                confirmContent: \"确定要删除爬虫配置文件吗!\"\n\t            },\n\t            interfaces: [{\n\t                    key: \"crawlerSettingDelete\",\n\t                    method: interface_model_1.MethodType.DELETE,\n\t                    idFieldPath: \"/key\",\n\t                    address: \"\",\n\t                    port: null,\n\t                    path: \"crawler_settings\",\n\t                    isRestful: true\n\t                }]\n\t        };\n\t        return actionModel;\n\t    }\n\t    Delete.key = \"crawlerSettingDeleteAction\";\n\t    return Delete;\n\t}());\n\tvar Search = (function () {\n\t    function Search() {\n\t        var actionModel = {\n\t            key: Search.key,\n\t            type: action_model_1.ActionType.form,\n\t            title: \"搜索爬虫配置文件\",\n\t            icon: \"search\",\n\t            form: {\n\t                dataSchema: dataSchema,\n\t                formSchema: [{\n\t                        key: \"key\",\n\t                        type: \"text\",\n\t                        required: false,\n\t                        copyValueTo: [\"/key/$eq\"],\n\t                        htmlClass: \"md-block\"\n\t                    }]\n\t            }\n\t        };\n\t        return actionModel;\n\t    }\n\t    Search.key = \"crawlerSettingSearchAction\";\n\t    return Search;\n\t}());\n\tvar Ack = (function () {\n\t    function Ack() {\n\t        var actionModel = {\n\t            key: Ack.key,\n\t            type: action_model_1.ActionType.form,\n\t            title: \"爬虫命令\",\n\t            icon: \"apple-keyboard-command\",\n\t            form: {\n\t                dataSchema: {\n\t                    type: \"object\",\n\t                    required: [\"key\", \"action\"],\n\t                    properties: {\n\t                        key: {\n\t                            type: \"string\",\n\t                            title: \"配置文件KEY\"\n\t                        },\n\t                        action: {\n\t                            type: \"string\",\n\t                            title: \"执行的命令\"\n\t                        },\n\t                        options: {\n\t                            type: \"object\",\n\t                            title: \"可选项\",\n\t                            properties: {\n\t                                url: {\n\t                                    type: \"string\",\n\t                                    title: \"测试的地址\"\n\t                                },\n\t                                type: {\n\t                                    type: \"string\",\n\t                                    default: \"forever\",\n\t                                    title: \"爬虫启动模式\"\n\t                                },\n\t                                startCrawler: {\n\t                                    type: \"boolean\",\n\t                                    default: true,\n\t                                    title: \"开启爬取链接模块\"\n\t                                },\n\t                                startDeal: {\n\t                                    type: \"boolean\",\n\t                                    default: true,\n\t                                    title: \"开启html处理模块\"\n\t                                },\n\t                                startDownload: {\n\t                                    type: \"boolean\",\n\t                                    default: false,\n\t                                    title: \"开启图片下载模块\"\n\t                                },\n\t                                startChip: {\n\t                                    type: \"boolean\",\n\t                                    default: false,\n\t                                    title: \"开启更换ip模块\"\n\t                                }\n\t                            }\n\t                        }\n\t                    }\n\t                },\n\t                formSchema: [{\n\t                        key: \"action\",\n\t                        type: \"select\",\n\t                        titleMap: [\n\t                            { \"value\": \"crawler:start\", \"name\": \"开始爬虫\", \"group\": \"\" },\n\t                            { \"value\": \"crawler:stop\", \"name\": \"停止爬虫\", \"group\": \"\" },\n\t                            { \"value\": \"crawler:create\", \"name\": \"开启一个新爬虫\", \"group\": \"\" },\n\t                            { \"value\": \"crawler:reset\", \"name\": \"重置一个数据库\", \"group\": \"\" },\n\t                            { \"value\": \"crawler:test\", \"name\": \"测试地址\", \"group\": \"\" }\n\t                        ],\n\t                        htmlClass: \"md-block\"\n\t                    }, {\n\t                        key: \"key\",\n\t                        type: \"autocomplete-1\",\n\t                        condition: \"model.action==='crawler:start' || model.action==='crawler:reset'  || model.action==='crawler:test'\",\n\t                        acOptions: {\n\t                            textField: \"key\",\n\t                            dataField: \"rows\",\n\t                            noCache: false,\n\t                            search: \"/where/key/$like\",\n\t                            actionKey: List.key\n\t                        },\n\t                        htmlClass: \"md-block\"\n\t                    }, {\n\t                        key: \"options\",\n\t                        type: \"card\",\n\t                        grid: { \"flex\": \"\" },\n\t                        condition: \"!!model.action\",\n\t                        items: [{\n\t                                key: \"options.type\",\n\t                                type: \"select\",\n\t                                htmlClass: \"md-block\",\n\t                                titleMap: [\n\t                                    { \"value\": \"forever\", \"name\": \"FOREVER启动\" },\n\t                                    { \"value\": \"\", \"name\": \"NODE启动\" }\n\t                                ]\n\t                            }, {\n\t                                key: \"options.url\",\n\t                                htmlClass: \"md-block\",\n\t                                type: \"text\"\n\t                            }, {\n\t                                key: \"options.startCrawler\",\n\t                                condition: \"model.action==='crawler:start'\",\n\t                                htmlClass: \"md-block\",\n\t                                type: \"checkbox\"\n\t                            }, {\n\t                                key: \"options.startDeal\",\n\t                                condition: \"model.action==='crawler:start'\",\n\t                                htmlClass: \"md-block\",\n\t                                type: \"checkbox\"\n\t                            }, {\n\t                                key: \"options.startDownload\",\n\t                                condition: \"model.action==='crawler:start'\",\n\t                                htmlClass: \"md-block\",\n\t                                type: \"checkbox\"\n\t                            }, {\n\t                                key: \"options.startChip\",\n\t                                condition: \"model.action==='crawler:start'\",\n\t                                htmlClass: \"md-block\",\n\t                                type: \"checkbox\"\n\t                            }]\n\t                    }]\n\t            }\n\t        };\n\t        return actionModel;\n\t    }\n\t    Ack.key = \"crawlerSettingAckAction\";\n\t    return Ack;\n\t}());\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = function (module) {\n\t    var services = [List, Search, Add, Edit, Delete, Copy, Ack, AddFirst, AddSecond, AddThird, AddForth, AddFifth];\n\t    _.each(services, function (ser) {\n\t        module.service(ser.key, ser);\n\t    });\n\t};\n\n\n/***/ },\n\n/***/ 157:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar action_model_1 = __webpack_require__(5);\n\tvar interface_model_1 = __webpack_require__(16);\n\tfunction LoginSchemaValue() {\n\t    var actionModel = {\n\t        key: \"login\",\n\t        type: action_model_1.ActionType.form,\n\t        icon: \"\",\n\t        form: {\n\t            dataSchema: {\n\t                type: \"object\",\n\t                required: [\"username\", \"password\"],\n\t                properties: {\n\t                    username: {\n\t                        type: \"string\",\n\t                        minLength: 4,\n\t                        maxLength: 20,\n\t                        title: \"用户名\"\n\t                    },\n\t                    password: {\n\t                        type: \"string\",\n\t                        title: \"密码\",\n\t                        minLength: 4,\n\t                        maxLength: 20\n\t                    }\n\t                }\n\t            },\n\t            formSchema: [{\n\t                    key: \"username\",\n\t                    type: \"string\",\n\t                    placeHolder: \"用户名\",\n\t                    icon: {\n\t                        leftIcon: \"account\"\n\t                    },\n\t                    htmlClass: \"md-icon-left md-block\"\n\t                }, {\n\t                    key: \"password\",\n\t                    type: \"password\",\n\t                    icon: {\n\t                        leftIcon: \"lock\"\n\t                    },\n\t                    htmlClass: \"md-icon-left md-block\"\n\t                }]\n\t        },\n\t        interfaces: [{\n\t                key: \"loginAction\",\n\t                method: interface_model_1.MethodType.POST,\n\t                address: \"\",\n\t                port: null,\n\t                path: \"/passport/login\",\n\t                isRestful: false\n\t            }]\n\t    };\n\t    return actionModel;\n\t}\n\tfunction LogoutSchemaValue() {\n\t    var actionModel = {\n\t        key: \"logout\",\n\t        type: action_model_1.ActionType.confirm,\n\t        icon: \"\",\n\t        confirm: {\n\t            confirmTitle: '用户中心',\n\t            confirmContent: '确定要退出么?',\n\t            confirmOk: \"果断退出\",\n\t            confirmCancel: '在看看'\n\t        },\n\t        interfaces: [{\n\t                key: \"logoutAction\",\n\t                method: interface_model_1.MethodType.POST,\n\t                address: \"\",\n\t                port: null,\n\t                path: \"/passport/logout\",\n\t                isRestful: false\n\t            }]\n\t    };\n\t    return actionModel;\n\t}\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = function (module) {\n\t    var models = [LoginSchemaValue(), LogoutSchemaValue()];\n\t    _.each(models, function (model) {\n\t        module.value(model.key, model);\n\t    });\n\t};\n\n\n/***/ },\n\n/***/ 158:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar action_model_1 = __webpack_require__(5);\n\tvar interface_model_1 = __webpack_require__(16);\n\tvar dataSchema = {\n\t    type: \"object\",\n\t    required: [\"key\", \"title\", \"icon\"],\n\t    properties: {\n\t        key: {\n\t            type: \"string\",\n\t            title: \"KEY\"\n\t        },\n\t        title: {\n\t            type: \"string\",\n\t            title: \"模块名称\"\n\t        },\n\t        link: {\n\t            type: \"string\",\n\t            title: \"路由状态名\"\n\t        },\n\t        icon: {\n\t            type: \"string\",\n\t            title: \"图标\"\n\t        },\n\t        parentKey: {\n\t            type: \"string\",\n\t            title: \"父亲节点KEY\"\n\t        },\n\t        description: {\n\t            type: \"string\",\n\t            title: \"描述\",\n\t            maxLength: \"500\"\n\t        },\n\t        showed: {\n\t            type: \"boolean\",\n\t            title: \"是否显示\"\n\t        }\n\t    }\n\t};\n\tvar ModuleList = (function () {\n\t    function ModuleList(toolbarUtils, actionUtils) {\n\t        var actionModel = {\n\t            key: ModuleList.key,\n\t            type: action_model_1.ActionType.list,\n\t            title: \"模块管理\",\n\t            icon: \"view-module\",\n\t            list: {\n\t                columns: [\n\t                    actionUtils.columnBuilder(\"<span>{{::item.key}}</span>\", \"KEY\").toValue(),\n\t                    actionUtils.columnBuilder(\"<span>{{ ::item.title }}</span>\", \"模块名称\").toValue(),\n\t                    actionUtils.columnBuilder(\"<ng-md-icon icon=\\\"{{ ::item.icon }}\\\"></ng-md-icon>\", \"图标\").toValue(),\n\t                    actionUtils.columnBuilder(\"<span>{{ ::item.lft }}</span>\", \"lft\", \"lft\").toValue(),\n\t                    actionUtils.columnBuilder(\"<span>{{ ::item.rgt }}</span>\", \"rgt\", \"rgt\").toValue()\n\t                ],\n\t                searchActionKey: ModuleSearch.key,\n\t                showRefreshBtn: true,\n\t                showSearchBtn: true,\n\t                showSearchPanel: false,\n\t                toolbars: [],\n\t                itemToolbars: []\n\t            },\n\t            itemActions: [{ key: ModuleEdit.key }, { key: ModuleDelete.key }],\n\t            actions: [ModuleAdd.key],\n\t            interfaces: [{\n\t                    key: \"modulesList\",\n\t                    method: interface_model_1.MethodType.GET,\n\t                    address: \"\",\n\t                    port: null,\n\t                    path: \"modules\",\n\t                    jpp: {\n\t                        set: {\n\t                            \"/total\": \"/count\",\n\t                            \"/rows\": \"/rows\"\n\t                        },\n\t                        copy: {},\n\t                        move: {},\n\t                        del: {}\n\t                    },\n\t                    isRestful: true\n\t                }]\n\t        };\n\t        return actionModel;\n\t    }\n\t    ModuleList.$inject = [\"toolbarUtils\", \"actionUtils\"];\n\t    ModuleList.key = \"module\";\n\t    return ModuleList;\n\t}());\n\tvar ModuleMenus = (function () {\n\t    function ModuleMenus(toolbarUtils, actionUtils) {\n\t        var actionModel = {\n\t            key: ModuleMenus.key,\n\t            type: action_model_1.ActionType.list,\n\t            title: \"模块管理\",\n\t            icon: \"view-module\",\n\t            interfaces: [{\n\t                    key: \"moduleMenu\",\n\t                    method: interface_model_1.MethodType.GET,\n\t                    address: \"\",\n\t                    port: null,\n\t                    path: \"/modules/menu\",\n\t                    isRestful: false\n\t                }]\n\t        };\n\t        return actionModel;\n\t    }\n\t    ModuleMenus.$inject = [\"toolbarUtils\", \"actionUtils\"];\n\t    ModuleMenus.key = \"moduleMenuAction\";\n\t    return ModuleMenus;\n\t}());\n\tvar ModuleAdd = (function () {\n\t    function ModuleAdd(toolbarUtils, actionUtils) {\n\t        var actionModel = {\n\t            key: ModuleAdd.key,\n\t            type: action_model_1.ActionType.form,\n\t            title: \"新建模块\",\n\t            icon: \"add\",\n\t            refreshList: true,\n\t            form: {\n\t                dataSchema: dataSchema,\n\t                formSchema: [{\n\t                        key: \"parentKey\",\n\t                        type: \"text\",\n\t                        htmlClass: \"md-block\"\n\t                    }, {\n\t                        key: \"key\",\n\t                        type: \"text\",\n\t                        htmlClass: \"md-block\"\n\t                    }, {\n\t                        key: \"title\",\n\t                        type: \"text\",\n\t                        htmlClass: \"md-block\"\n\t                    }, {\n\t                        key: \"link\",\n\t                        type: \"text\",\n\t                        htmlClass: \"md-block\"\n\t                    }, {\n\t                        key: \"icon\",\n\t                        type: \"text\",\n\t                        htmlClass: \"md-block\"\n\t                    }, {\n\t                        key: \"description\",\n\t                        type: \"textarea\",\n\t                        htmlClass: \"md-block\"\n\t                    }, {\n\t                        key: \"showed\",\n\t                        type: \"checkbox\"\n\t                    }]\n\t            },\n\t            closeDialog: true,\n\t            interfaces: [{\n\t                    key: \"modulesAdd\",\n\t                    method: interface_model_1.MethodType.POST,\n\t                    address: \"\",\n\t                    port: null,\n\t                    path: \"modules\",\n\t                    isRestful: true\n\t                }]\n\t        };\n\t        return actionModel;\n\t    }\n\t    ModuleAdd.$inject = [\"toolbarUtils\", \"actionUtils\"];\n\t    ModuleAdd.key = \"modulesAddAction\";\n\t    return ModuleAdd;\n\t}());\n\tvar ModuleEdit = (function () {\n\t    function ModuleEdit(toolbarUtils, actionUtils) {\n\t        var actionModel = {\n\t            key: ModuleEdit.key,\n\t            type: action_model_1.ActionType.form,\n\t            title: \"修改模块\",\n\t            icon: \"edit\",\n\t            refreshList: true,\n\t            form: {\n\t                dataSchema: dataSchema,\n\t                formSchema: [{\n\t                        key: \"parentKey\",\n\t                        type: \"text\",\n\t                        readonly: true,\n\t                        htmlClass: \"md-block\"\n\t                    }, {\n\t                        key: \"key\",\n\t                        type: \"text\",\n\t                        htmlClass: \"md-block\"\n\t                    }, {\n\t                        key: \"title\",\n\t                        type: \"text\",\n\t                        htmlClass: \"md-block\"\n\t                    }, {\n\t                        key: \"link\",\n\t                        type: \"text\",\n\t                        htmlClass: \"md-block\"\n\t                    }, {\n\t                        key: \"icon\",\n\t                        type: \"text\",\n\t                        htmlClass: \"md-block\"\n\t                    }, {\n\t                        key: \"description\",\n\t                        type: \"textarea\",\n\t                        htmlClass: \"md-block\"\n\t                    }, {\n\t                        key: \"showed\",\n\t                        type: \"checkbox\"\n\t                    }]\n\t            },\n\t            closeDialog: true,\n\t            interfaces: [{\n\t                    key: \"modulesEdit\",\n\t                    method: interface_model_1.MethodType.PUT,\n\t                    idFieldPath: \"/key\",\n\t                    address: \"\",\n\t                    port: null,\n\t                    path: \"modules\",\n\t                    isRestful: true\n\t                }]\n\t        };\n\t        return actionModel;\n\t    }\n\t    ModuleEdit.$inject = [\"toolbarUtils\", \"actionUtils\"];\n\t    ModuleEdit.key = \"modulesEditAction\";\n\t    return ModuleEdit;\n\t}());\n\tvar ModuleDelete = (function () {\n\t    function ModuleDelete() {\n\t        var actionModel = {\n\t            key: ModuleDelete.key,\n\t            type: action_model_1.ActionType.confirm,\n\t            title: \"删除模块\",\n\t            icon: \"delete\",\n\t            refreshList: true,\n\t            confirm: {\n\t                confirmTitle: \"\",\n\t                confirmContent: \"确定要删除模块吗!\"\n\t            },\n\t            interfaces: [{\n\t                    key: \"modulesDelete\",\n\t                    method: interface_model_1.MethodType.DELETE,\n\t                    idFieldPath: \"/key\",\n\t                    address: \"\",\n\t                    port: null,\n\t                    path: \"modules\",\n\t                    isRestful: true\n\t                }]\n\t        };\n\t        return actionModel;\n\t    }\n\t    ModuleDelete.key = \"modulesDeleteAction\";\n\t    return ModuleDelete;\n\t}());\n\tvar ModuleSearch = (function () {\n\t    function ModuleSearch() {\n\t        var actionModel = {\n\t            key: ModuleSearch.key,\n\t            icon: \"search\",\n\t            type: action_model_1.ActionType.form,\n\t            title: \"模块搜索表单\",\n\t            form: {\n\t                dataSchema: dataSchema,\n\t                formSchema: [{\n\t                        key: \"key\",\n\t                        type: \"text\",\n\t                        required: false,\n\t                        placeHolder: \"KEY\",\n\t                        description: \"请输入key来进行搜索,不支持模糊查询\",\n\t                        showHints: true,\n\t                        copyValueTo: [\"/key/$eq\"],\n\t                        htmlClass: \"md-block\"\n\t                    }, {\n\t                        key: \"showed\",\n\t                        type: \"select\",\n\t                        copyValueTo: [\"/showed/$eq\"],\n\t                        titleMap: [{ value: null, name: \"全部\" }, { value: true, name: \"显示\" }, { value: false, name: \"不显示\" }],\n\t                        htmlClass: \"md-block\"\n\t                    }]\n\t            }\n\t        };\n\t        return actionModel;\n\t    }\n\t    ModuleSearch.$inject = [\"toolbarUtils\", \"actionUtils\"];\n\t    ModuleSearch.key = \"modulesSearchAction\";\n\t    return ModuleSearch;\n\t}());\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = function (module) {\n\t    var services = [ModuleDelete, ModuleMenus, ModuleList, ModuleSearch, ModuleAdd, ModuleEdit];\n\t    _.each(services, function (ser) {\n\t        module.service(ser.key, ser);\n\t    });\n\t};\n\n\n/***/ },\n\n/***/ 159:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar _ = __webpack_require__(3);\n\tvar action_model_1 = __webpack_require__(5);\n\tvar interface_model_1 = __webpack_require__(16);\n\tvar pointer = __webpack_require__(25);\n\tvar DialogController = (function () {\n\t    function DialogController($scope, item, key, submit) {\n\t        this.$scope = $scope;\n\t        this.item = item;\n\t        this.key = key;\n\t        this.submit = submit;\n\t        console.log(arguments);\n\t    }\n\t    DialogController.$inject = [\"$scope\", \"item\", \"key\", \"submit\"];\n\t    return DialogController;\n\t}());\n\tvar Provider = (function () {\n\t    function Provider($rootScope, $injector, restUtils, mdUtils, $q, $mdDialog) {\n\t        var _this = this;\n\t        this.$rootScope = $rootScope;\n\t        this.$injector = $injector;\n\t        this.restUtils = restUtils;\n\t        this.mdUtils = mdUtils;\n\t        this.$q = $q;\n\t        this.$mdDialog = $mdDialog;\n\t        this.$get = [\"$injector\", function ($injector) {\n\t                var service = $injector.invoke(Provider, _this, null);\n\t                return service;\n\t            }];\n\t        return this;\n\t    }\n\t    Provider.prototype.getModel = function (key) {\n\t        var defer = this.$q.defer();\n\t        if (!key) {\n\t            defer.reject();\n\t        }\n\t        else {\n\t            if (this.$injector.has(key)) {\n\t                defer.resolve(_.cloneDeepWith(this.$injector.get(key)));\n\t            }\n\t            else {\n\t                this.mdUtils.showErrMsg(\"\\u6CA1\\u6709\\u627E\\u5230key[\" + key + \"]!\");\n\t                defer.reject(key);\n\t            }\n\t        }\n\t        return defer.promise;\n\t    };\n\t    Provider.prototype.getModels = function (keys) {\n\t        var _this = this;\n\t        var defer = this.$q.defer();\n\t        var actionModels = {};\n\t        var notFoundsKeys = [];\n\t        var promises = {};\n\t        _.each(keys, function (key) {\n\t            if (_.isObject(key)) {\n\t                actionModels[key.key] = key;\n\t            }\n\t            else {\n\t                promises[key] = _this.getModel(key).then(function (actionModel) {\n\t                    actionModels[key] = actionModel;\n\t                }).catch(function (key) {\n\t                    notFoundsKeys.push(key);\n\t                });\n\t            }\n\t        });\n\t        this.$q.all(promises).then(function () {\n\t            defer.resolve(actionModels);\n\t        }).catch(function () {\n\t            defer.resolve(actionModels);\n\t        });\n\t        return defer.promise;\n\t    };\n\t    Provider.prototype.doActionModel = function ($event, actionModel, item, callback) {\n\t        var _this = this;\n\t        switch (actionModel.type) {\n\t            case action_model_1.ActionType.wizard:\n\t            case action_model_1.ActionType.form:\n\t                var templates = (_a = {},\n\t                    _a[action_model_1.ActionType.form] = __webpack_require__(105)(),\n\t                    _a[action_model_1.ActionType.wizard] = __webpack_require__(110)(),\n\t                    _a\n\t                );\n\t                return this.$mdDialog.show({\n\t                    targetEvent: $event,\n\t                    clickOutsideToClose: false,\n\t                    escapeToClose: false,\n\t                    fullscreen: true,\n\t                    locals: {\n\t                        'item': item || {},\n\t                        'key': actionModel.key,\n\t                        'submit': callback\n\t                    },\n\t                    controller: DialogController,\n\t                    controllerAs: \"dialogCtl\",\n\t                    template: templates[actionModel.type]\n\t                }).then(function () {\n\t                    item = null;\n\t                });\n\t            case action_model_1.ActionType.confirm:\n\t                var confirm_1 = this.$mdDialog.confirm()\n\t                    .title(actionModel.confirm.confirmTitle)\n\t                    .textContent(actionModel.confirm.confirmContent)\n\t                    .ariaLabel(actionModel.confirm.confirmTitle)\n\t                    .targetEvent($event)\n\t                    .ok(actionModel.confirm.confirmOk || \"确定\")\n\t                    .cancel(actionModel.confirm.confirmCancel || \"取消\");\n\t                return this.$mdDialog.show(confirm_1).then(function () {\n\t                    return _this.doAction(actionModel.key, item);\n\t                });\n\t        }\n\t        return null;\n\t        var _a;\n\t    };\n\t    Provider.prototype.doFormCheck = function ($form) {\n\t        if ($form) {\n\t            this.$rootScope.$broadcast(\"schemaFormValidate\");\n\t            if (!$form.$valid) {\n\t                console.log($form.$error);\n\t                this.mdUtils.showErrMsg(\"表单没有填写正确!\");\n\t                return false;\n\t            }\n\t        }\n\t        return true;\n\t    };\n\t    Provider.prototype.doDealResult = function (actionModel, results, clientData) {\n\t        _.forEach(actionModel.interfaces, function (iInterface) {\n\t            var result = results[iInterface.key];\n\t            if (result) {\n\t                _.forEach(iInterface.jpp.set, function (val, key) {\n\t                    pointer.set(clientData, key, pointer.get(result, val));\n\t                });\n\t                _.forEach(iInterface.jpp.del, function (val, key) {\n\t                    pointer.remove(clientData, key);\n\t                });\n\t            }\n\t        });\n\t        return clientData;\n\t    };\n\t    Provider.prototype.doAction = function (key, queryData, $form) {\n\t        var _this = this;\n\t        if (!this.doFormCheck($form)) {\n\t            return;\n\t        }\n\t        return this.getModel(key).then(function (actionModel) {\n\t            var interfacesRest = {};\n\t            _.each(actionModel.interfaces, function (interfaceModel) {\n\t                var promise, restAngular = interfaceModel.isRestful\n\t                    ? _this.restUtils.getCustomRestful(interfaceModel.address, interfaceModel.port, interfaceModel.path)\n\t                    : _this.restUtils.getCustom(interfaceModel.address, interfaceModel.port, interfaceModel.path);\n\t                switch (interfaceModel.method) {\n\t                    case interface_model_1.MethodType.POST:\n\t                        promise = restAngular.post(queryData, null);\n\t                        break;\n\t                    case interface_model_1.MethodType.GET:\n\t                        promise = restAngular.customGET(null, queryData, null);\n\t                        break;\n\t                    case interface_model_1.MethodType.PUT:\n\t                        promise = restAngular.customPUT(queryData, pointer.get(queryData, interfaceModel.idFieldPath));\n\t                        break;\n\t                    case interface_model_1.MethodType.DELETE:\n\t                        promise = restAngular.customDELETE(pointer.get(queryData, interfaceModel.idFieldPath), null);\n\t                }\n\t                interfacesRest[interfaceModel.key] = promise;\n\t            });\n\t            return interfacesRest;\n\t        }).then(function (interfacesRest) {\n\t            return _this.$q.all(interfacesRest);\n\t        });\n\t    };\n\t    Provider.$inject = [\"$rootScope\", \"$injector\", \"restUtils\", \"materialUtils\", \"$q\", \"$mdDialog\"];\n\t    Provider._name = 'fxAction';\n\t    return Provider;\n\t}());\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = function (module) {\n\t    module.provider(Provider._name, [Provider]);\n\t};\n\n\n/***/ },\n\n/***/ 160:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar pointer = __webpack_require__(25);\n\tfunction Provider() {\n\t    var Builder = (function () {\n\t        function Builder(form, fxAction) {\n\t            this.form = form;\n\t            this.fxAction = fxAction;\n\t        }\n\t        Builder.prototype.init = function (modelValue, formData) {\n\t            this.formData = formData;\n\t        };\n\t        Builder.prototype.onChange = function (item) {\n\t            if (!item) {\n\t                return pointer.remove(this.formData, \"/\" + this.form.key.join('/'));\n\t            }\n\t            this.selected = item;\n\t            if (this.form.acOptions.keyField) {\n\t                return pointer.set(this.formData, \"/\" + this.form.key.join('/'), pointer.get(item, this.form.acOptions.keyField));\n\t            }\n\t            pointer.set(this.formData, \"/\" + this.form.key.join('/'), item);\n\t        };\n\t        Builder.prototype.query = function () {\n\t            var _this = this;\n\t            var actionModel, clientData = {};\n\t            var filter = {};\n\t            if (this.form.acOptions.actionKey) {\n\t                pointer.set(filter, this.form.acOptions.search, this.searchText);\n\t                return this.fxAction.getModel(this.form.acOptions.actionKey).then(function (aModel) {\n\t                    actionModel = aModel;\n\t                    return _this.fxAction.doAction(actionModel.key, filter);\n\t                }).then(function (results) {\n\t                    return _this.fxAction.doDealResult(actionModel, results, clientData);\n\t                }).then(function (results) {\n\t                    return results[_this.form.acOptions.dataField];\n\t                });\n\t            }\n\t            return this.form.data || [];\n\t        };\n\t        Builder.$inject = [\"form\", \"fxAction\"];\n\t        return Builder;\n\t    }());\n\t    var config = {\n\t        fxAction: null,\n\t    };\n\t    this.builder = function (args) {\n\t        args.form.acOptions = _.extend({\n\t            textField: \"\",\n\t            keyField: \"\",\n\t            dataField: \"\",\n\t            noCache: false,\n\t            search: \"\",\n\t            actionKey: \"\"\n\t        }, args.form.acOptions || {});\n\t        args.form.boost = new Builder(args.form, config.fxAction);\n\t    };\n\t    this.$get = [\"fxAction\", function (fxAction) {\n\t            config.fxAction = fxAction;\n\t            return {};\n\t        }];\n\t}\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = function (module) {\n\t    module.provider('autoCompleteBuilder', [Provider]);\n\t};\n\n\n/***/ },\n\n/***/ 161:\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tfunction Provider() {\n\t    function Builder(args) {\n\t        var options = {\n\t            modes: ['tree', 'code', 'text'],\n\t            mode: 'code',\n\t            name: args.form.key.join('')\n\t        };\n\t        args.form.preferText = !!args.form.preferText;\n\t        args.form.jsonOptions = _.extend(args.form.jsonOptions || {}, options);\n\t    }\n\t    this.builder = Builder;\n\t    this.$get = [function () {\n\t            return {};\n\t        }];\n\t}\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = function (module) {\n\t    module.provider('jsonEditorBuilder', [Provider]);\n\t};\n\n\n/***/ },\n\n/***/ 162:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar _ = __webpack_require__(3);\n\tvar Service = (function () {\n\t    function Service() {\n\t    }\n\t    Service._builderName = \"actionUtils\";\n\t    Service._toolbarName = \"toolbarActionUtils\";\n\t    Service.builder = [function () {\n\t            var Base = (function () {\n\t                function Base(data) {\n\t                    this.data = data;\n\t                }\n\t                Base.prototype.columnUnitBuilder = function (unit, numeric) {\n\t                    if (numeric === void 0) { numeric = false; }\n\t                    this.data = _.extend({}, this.data, {\n\t                        unit: unit,\n\t                        numeric: numeric\n\t                    });\n\t                    return this;\n\t                };\n\t                Base.prototype.toValue = function () {\n\t                    return this.data;\n\t                };\n\t                return Base;\n\t            }());\n\t            var Service = (function (_super) {\n\t                __extends(Service, _super);\n\t                function Service(data) {\n\t                    _super.call(this, data);\n\t                    this.data = data;\n\t                }\n\t                Service.prototype.columnBuilder = function (content, title, name, sort, unit) {\n\t                    return new Service({\n\t                        content: content,\n\t                        title: title,\n\t                        name: name,\n\t                        sort: sort,\n\t                        unit: unit\n\t                    });\n\t                };\n\t                return Service;\n\t            }(Base));\n\t            return new Service();\n\t        }];\n\t    Service.toolbar = ['fxAction', 'toolbarUtils', function (fxAction, toolbarUtils) {\n\t            var Service = (function () {\n\t                function Service() {\n\t                }\n\t                Service.prototype.initToolbar = function (key) {\n\t                };\n\t                return Service;\n\t            }());\n\t            return new Service();\n\t        }];\n\t    return Service;\n\t}());\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = function (module) {\n\t    module.service(Service._builderName, Service.builder);\n\t    module.service(Service._toolbarName, Service.toolbar);\n\t};\n\n\n/***/ },\n\n/***/ 163:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar tv4 = __webpack_require__(45);\n\tvar validator = __webpack_require__(196);\n\tvar CustomFormat = (function () {\n\t    function CustomFormat() {\n\t        tv4.addFormat(\"email\", function (data, schema) {\n\t            if (validator.isEmail(data)) {\n\t                return true;\n\t            }\n\t            return 10000;\n\t        });\n\t        tv4.addFormat(\"mobile\", function (data, schema) {\n\t            if (validator.isMobilePhone(data, \"zh-CN\")) {\n\t                return null;\n\t            }\n\t            return 10003;\n\t        });\n\t        tv4.addFormat(\"json\", function (data, schema) {\n\t            if (validator.isJSON(data)) {\n\t                return null;\n\t            }\n\t            return 10004;\n\t        });\n\t        tv4.addFormat(\"url-ip\", function (data, schema) {\n\t            if (validator.isURL(data) || validator.isIP(data)) {\n\t                return null;\n\t            }\n\t            return { code: 10005 };\n\t        });\n\t        tv4.setErrorReporter(function (error, data, schema) {\n\t            return \"Error code: \" + error.code;\n\t        });\n\t    }\n\t    return CustomFormat;\n\t}());\n\texports.customFormats = new CustomFormat();\n\n\n/***/ },\n\n/***/ 179:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(__dirname) {\"use strict\";\n\tvar ngMaterial = __webpack_require__(6);\n\t__webpack_require__(70);\n\tvar ngMaterialIcons = __webpack_require__(11);\n\tvar _ = __webpack_require__(3);\n\tvar router_1 = __webpack_require__(180);\n\tvar material_service_1 = __webpack_require__(17);\n\tvar svg_service_1 = __webpack_require__(194);\n\tvar toolbar_1 = __webpack_require__(173);\n\tvar sidemenu_1 = __webpack_require__(168);\n\t__webpack_require__(89);\n\tvar action_model_1 = __webpack_require__(5);\n\tvar module = angular.module(\"homeModule\", [toolbar_1.default, sidemenu_1.default, svg_service_1.default, material_service_1.default, ngMaterial, 'ui.router', ngMaterialIcons]);\n\tmodule.config([\n\t    \"$stateProvider\",\n\t    \"$urlRouterProvider\",\n\t    \"$httpProvider\",\n\t    \"$mdThemingProvider\",\n\t    \"$locationProvider\",\n\t    \"mdSideMenuSectionsProvider\",\n\t    function ($stateProvider, $urlRouterProvider, $httpProvider, $mdThemingProvider, $locationProvider, mdSideMenuSectionsProvider, cfpLoadingBarProvider) {\n\t        router_1.initRouter($urlRouterProvider, $stateProvider);\n\t        mdSideMenuSectionsProvider.initWithTheme($mdThemingProvider);\n\t    }])\n\t    .run([\"$rootScope\", \"$state\", \"$q\", \"svgUtils\", function ($rootScope, $state, $q, svgUtils) {\n\t        var state = {};\n\t        var handleResolve = function () {\n\t            state.$$isFinish = true;\n\t            $state.go(state.toState.name, state.toParams, state.options);\n\t        };\n\t        $rootScope.$on(\"$stateChangeStart\", function (evt, toState, toParams, fromState, fromParams) {\n\t            console.log(\"$stateChangeStart\", evt, toState, toParams, fromState, fromParams);\n\t        });\n\t        $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams, options) {\n\t            if (!state.$$isFinish) {\n\t                _.extend(state, {\n\t                    toState: toState,\n\t                    toParams: toParams,\n\t                    fromState: fromState,\n\t                    fromParams: fromParams,\n\t                    options: options\n\t                });\n\t                event.preventDefault();\n\t                $q.all({\n\t                    mdi: svgUtils.loadSvgUrl(__dirname + 'svgs/mdi.svg'),\n\t                    weibo: svgUtils.loadSvgUrl(__dirname + 'svgs/weibo.svg')\n\t                }).then(handleResolve, handleResolve);\n\t            }\n\t        });\n\t    }]);\n\tmodule.value(\"iconInfoDetailForm\", {\n\t    key: \"iconInfoDetailForm\",\n\t    icon: \"search\",\n\t    type: action_model_1.ActionType.form,\n\t    title: \"ICON详情\",\n\t    form: {\n\t        dataSchema: {\n\t            type: \"object\",\n\t            properties: {\n\t                key: {\n\t                    type: \"string\",\n\t                    title: \"KEY\"\n\t                }\n\t            }\n\t        },\n\t        formSchema: [{\n\t                key: \"key\",\n\t                type: \"string\",\n\t                placeHolder: \"KEY\",\n\t                htmlClass: \"md-block\"\n\t            }]\n\t    }\n\t});\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = module.name;\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, \"/\"))\n\n/***/ }\n\n})\n\n\n/** WEBPACK FOOTER **\n ** 0.04a37586aa2964f4b3ec.hot-update.js\n **/","/**\n * 操作类型\n */\nimport {IInterfaceModel} from \"./interface.model\";\nexport enum ActionType {\n    none = 0,\n    list = 1,\n    form = 2,\n    wizard = 3,\n    confirm = 4\n}\n\nexport interface IConfirm {\n    // confirm操作标题\n    confirmTitle: string;\n    // confirm操作显示内容\n    confirmContent: string;\n    // confirm操作ok按钮文字\n    confirmOk?: string;\n    // confirm操作cancel按钮文字\n    confirmCancel?: string;\n}\n\nexport interface ISchemaForm {\n    // form操作的时候表单schema\n    formSchema?: string | Array<Object>;\n    // form操作的时候字段schema\n    dataSchema?: string | Object;\n    // form标题\n    title?: string;\n    // 状态\n    status?: number;\n    // 数据的JSON路径,默认应该为\"/\"\n    path?: string;\n}\n\nexport interface IWizard {\n    defaultSchema?: ISchemaForm;\n    // schemas?: Array<ISchemaForm>;\n    actions: Array<string|IActionModel>;\n}\n\nexport interface IColumn {\n    content: string;\n    title: string;\n    name?: string;\n    sort?: string;\n    unit?: string;\n}\n\nexport interface IClientData {\n    total?: number;\n    rows?: Array<any>;\n}\n\nexport interface IQueryData {\n    limit?: number;\n    offset?: number;\n    page?: number;\n    where?: any;\n    attributes?: any;\n    order?: string;\n}\n\nexport interface IList {\n    columns: Array<IColumn>;\n    itemToolbars?: Array<Object>;\n    toolbars?: Array<Object>;\n    searchToolbars?: Array<Object>;\n    searchActionKey?: String;\n    showSearchBtn?: boolean;\n    showRefreshBtn?: boolean;\n    showSearchPanel?: boolean;\n}\n\nexport interface IItemActionSet {\n    key: string,\n    condition?: string;\n}\n\n\n/**\n * 操作的模型\n */\nexport interface IActionModel {\n    // 唯一字符串\n    key: string;\n    // 图标\n    icon?: string;\n    // 标题\n    title?: string;\n    // 操作的类型\n    type: ActionType;\n    // confirm 操作\n    confirm?: IConfirm,\n    // form 操作\n    form?: ISchemaForm;\n    // 多表单操作\n    wizard?: IWizard;\n    // 列表操作\n    list?: IList;\n    // 开启条件\n    condition?: string;\n    // 子操作\n    itemActions?: Array<IItemActionSet>;\n    // 子操作\n    actions?: Array<IActionModel|string>;\n    // 接口列表\n    interfaces?: Array<IInterfaceModel>;\n    // 成功后显示的文字\n    successMsg?: string;\n    // 执行成功后是否刷新列表\n    refreshList?: boolean ;\n    // 执行成功后是否需要关闭dialog\n    closeDialog?: boolean;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/directives/action/models/action.model.ts\n **/","/**\n * 操作类型\n */\nexport enum MethodType{\n    GET,\n    POST,\n    DELETE,\n    PUT,\n    HEAD\n}\n\n/**\n * 数据拷贝移动操作\n */\nexport interface IJpp {\n    set?: {[id: string]: string},\n    copy?: {[id: string]: string},\n    move?: {[id: string]: string},\n    del?: {[id: string]: string}\n}\n\n/**\n * 操作的模型\n */\nexport interface IInterfaceModel {\n    // 唯一字符串\n    key: string;\n    // 调用方法\n    method: MethodType;\n    // 接口服务器地址\n    address: string;\n    // 端口\n    port?: number;\n    // 接口地址\n    path: string;\n    // 接口所对应的服务器key\n    serverKey?: string;\n    // 接口所需参数,false 为不需要参数\n    params?: boolean|Object;\n    // 是否是restful接口\n    isRestful: boolean;\n    // 数据拷贝等\n    jpp?: IJpp;\n    // put和delete请求时候带参数\n    idFieldPath?: string;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/directives/action/models/interface.model.ts\n **/","/**\n * Created by NICK on 16/8/9.\n */\n\nimport * as angular from 'angular';\nimport * as ngMaterial from 'angular-material';\nimport 'expose?JSONEditor!jsoneditor';\nimport 'ng-jsoneditor';\n\nimport actProviderRegFunc from './services/action.provider';\nimport actUtilsFunc from './services/utils.service';\nimport restSvrMod from '../../services/rest.service';\nimport loginSchFunc from './schemas/login.value';\nimport moduleSchFunc from './schemas/modules.value';\nimport crawlerSchFunc from './schemas/crawler.value';\nimport commonSchFunc from './schemas/common.value';\nimport formActionFunc from './directives/form.directive';\nimport listActionFunc from './directives/list.directive';\nimport dialogFormFunc from './directives/dialog-form.directive';\nimport searchActionFunc from './directives/search.directive';\nimport wizardActionFunc from './directives/wizard.directive';\nimport wizardDialogActionFunc from './directives/dialog-wizard.directive';\nimport builderActionFunc from './directives/builder.directive';\n\nimport autoCompleteFunc from './services/autocomplete.provider';\nimport jsonEditorFunc from './services/jsoneditor.provider';\n\nimport 'angular-schema-form';\nimport 'angular-schema-form-ng-material';\nimport './services/validator.custom.value';\n\nconst _name = \"fxAction\";\nconst module = angular.module(`${_name}Module`, [ngMaterial, restSvrMod, \"schemaForm\", \"ng.jsoneditor\"]);\n\nactUtilsFunc(module);\nactProviderRegFunc(module);\nformActionFunc(module);\nlistActionFunc(module);\nmoduleSchFunc(module);\nloginSchFunc(module);\ndialogFormFunc(module);\nsearchActionFunc(module);\nwizardActionFunc(module);\nwizardDialogActionFunc(module);\nbuilderActionFunc(module);\ncrawlerSchFunc(module);\ncommonSchFunc(module);\nautoCompleteFunc(module);\njsonEditorFunc(module);\n\n\nfunction sfLayout(args) {\n    var layoutDiv = args.fieldFrag.querySelector('[sf-layout]');\n\n    if (layoutDiv && args.form.grid) {\n        Object.getOwnPropertyNames(args.form.grid).forEach(function (property, idx, array) {\n            layoutDiv.setAttribute(property, args.form.grid[property]);\n        });\n    }\n};\n// 处理默认的错误信息\nmodule\n    .config([\"sfErrorMessageProvider\", (sfErrorMessageProvider)=> {\n        // sfErrorMessageProvider.setDefaultMessage(\"10000\", \"邮箱格式不正确\");\n        // sfErrorMessageProvider.setDefaultMessage(\"10001\", \"两次密码不一致\");\n        // sfErrorMessageProvider.setDefaultMessage(\"10002\", \"用户名中存在非法字符\");\n        // sfErrorMessageProvider.setDefaultMessage(\"10003\", \"手机格式不正确\");\n        // sfErrorMessageProvider.setDefaultMessage(\"10004\", \"JSON格式不正确\");\n        // sfErrorMessageProvider.setDefaultMessage(\"10005\", \"地址格式不正确\");\n        sfErrorMessageProvider.setDefaultMessage(\"302\", \"[{{title}}]是必填项\");\n        sfErrorMessageProvider.setDefaultMessage(\"103\", \"[{{title}}]超过了最大值{{schema.maximum}}\");\n        sfErrorMessageProvider.setDefaultMessage(\"101\", \"[{{title}}]小于最小值{{schema.minimum}}\");\n        sfErrorMessageProvider.setDefaultMessage(\"200\", \"[{{title}}]字符长度小于最小值({{schema.minLength}})\");\n        sfErrorMessageProvider.setDefaultMessage(\"201\", \"[{{title}}]字符长度大于最大值({{schema.maxLength}})\");\n        sfErrorMessageProvider.setDefaultMessage(\"400\", \"数组长度不正确，{{schema.minItems||0}}-{{schema.maxItems||'∞'}}\");\n        sfErrorMessageProvider.setDefaultMessage(\"500\", \"格式不正确\");\n    }])\n    // 添加自定义的表单组件\n    .config([\"sfBuilderProvider\", \"schemaFormDecoratorsProvider\", \"jsonEditorBuilderProvider\", \"autoCompleteBuilderProvider\", (sfBuilderProvider, schemaFormDecoratorsProvider, jsonEditorBuilder, autoCompleteBuilder)=> {\n        // jsoneditor--schema-form组件化\n        schemaFormDecoratorsProvider.defineAddOn(\n            'materialDecorator',\n            'jeditor',\n            \"./decorators/jsoneditor.jade\",\n            sfBuilderProvider.stdBuilders.concat(jsonEditorBuilder.builder)\n        );\n        // card--schema-form组件化\n        schemaFormDecoratorsProvider.defineAddOn(\n            'materialDecorator',\n            'card',\n            \"./decorators/card.jade\",\n            [sfBuilderProvider.builders.sfField, sfBuilderProvider.builders.condition, sfBuilderProvider.builders.transclusion]\n        );\n        // autocomplete--schema-form组件化\n        schemaFormDecoratorsProvider.defineAddOn(\n            'materialDecorator',\n            'autocomplete-1',\n            \"./decorators/autocomplete-1.jade\",\n            [sfBuilderProvider.builders.sfField, sfLayout, sfBuilderProvider.builders.condition, autoCompleteBuilder.builder, sfBuilderProvider.builders.transclusion]\n        );\n        // // section--schema-section组件\n        // schemaFormDecoratorsProvider.defineAddOn(\n        //     'materialDecorator',\n        //     'section-1',\n        //     \"./decorators/section-1.jade\",\n        //     [sfBuilderProvider.builders.sfField, sfBuilderProvider.builders.ngModel, sfBuilderProvider.builders.condition, sfBuilderProvider.builders.simpleTransclusion, sfBuilderProvider.builders.array]\n        // );\n    }])\n    // 打包工具的原因,只能把模板字符串写入cache中\n    .run([\"$templateCache\", \"autoCompleteBuilder\", ($templateCache: ng.ITemplateCacheService)=> {\n        $templateCache.put('./decorators/jsoneditor.jade', require(\"./decorators/jsoneditor.jade\")());\n        $templateCache.put('./decorators/card.jade', require(\"./decorators/card.jade\")());\n        $templateCache.put('./decorators/autocomplete-1.jade', require(\"./decorators/autocomplete-1.jade\")());\n        $templateCache.put('./decorators/section-1.jade', require(\"./decorators/section-1.jade\")());\n    }]);\n\n\nexport default module.name;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/directives/action/index.ts\n **/","import {IActionModel, ActionType} from '../models/action.model';\nimport * as _ from 'lodash';\n\nconst _name = \"fxBuilderAction\";\n\nclass Controller {\n    static $inject = [\"fxAction\", \"toolbarUtils\"];\n\n    key: string;\n    formData: any;\n    actionModel: IActionModel;\n\n    constructor(private fxAction, private toolbarUtils) {\n        this.formData = this.formData || {};\n    }\n}\n\n/**\n * 操作指令,某个表单操作\n * @returns {{restrict: string, template: any, scope: {}, replace: boolean, link: (($scope:IDirectiveScope))}}\n * @constructor\n */\nfunction Directive(): ng.IDirective {\n    return {\n        restrict: 'EA',\n        template: require(\"../tpls/builder.jade\")(),\n        bindToController: {\n            formData: \"=ngModel\",\n            key: \"@\"\n        },\n        require: `^${_name}`,\n        controller: Controller,\n        controllerAs: 'formBuilderCtl',\n        replace: true\n    };\n\n}\n\nDirective.$inject = [];\n\nexport default (module: ng.IModule)=> {\n    module.directive(_name, Directive);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/directives/action/directives/builder.directive.ts\n **/","import {IActionModel} from '../models/action.model';\nimport * as _ from 'lodash';\n\nconst _dirName = 'fxDialogFormAction';\n\nclass Controller {\n    static $inject = [\"$scope\", \"fxAction\", \"materialUtils\", \"toolbarUtils\", \"$mdDialog\"];\n\n    private submitCallBack: Function;\n\n    formData: Object;\n    actionModel: IActionModel;\n    toolbars: Array<any>;\n    key: string;\n    isBusy: boolean;\n\n    constructor(private $scope, private fxAction, private materialUtils: fx.utils.materialStatic, private toolbarUtils, private $mdDialog: ng.material.IDialogService) {\n        this.formData = this.formData || {};\n    }\n\n    doSubmit($form) {\n        let promise = this.fxAction.doAction(this.key, this.formData, $form);\n\n        this.isBusy = true;\n        if (promise) {\n            promise.then((result)=> {\n                this.actionModel.closeDialog === true && this.$mdDialog.hide(result);\n\n                if (_.isFunction(this.submitCallBack)) {\n                    this.submitCallBack();\n                }\n            }).finally(()=> {\n                this.isBusy = false;\n            });\n        }\n\n        return promise;\n    }\n\n    getActionModel() {\n        this.fxAction.getModel(this.key).then((model)=> {\n            this.actionModel = model;\n            this.toolbars = [\n                this.toolbarUtils.noneBuilder(\"icon\").iconBuilder(this.actionModel.icon).toValue(),\n                this.toolbarUtils.labelBuilder(this.actionModel.title).attrBuilder({flex: \"\"}).toValue(),\n                this.toolbarUtils.btnBuilder(\"关闭\", \"md-icon-button\", false).iconBuilder(\"close\").btnClick(($event)=> {\n                    this.$mdDialog.cancel();\n                }).toValue()\n            ];\n        });\n    }\n}\n\n/**\n * 操作指令,某个表单操作\n * @returns {{restrict: string, template: any, scope: {}, replace: boolean, link: (($scope:IDirectiveScope))}}\n * @constructor\n */\nfunction Directive(): ng.IDirective {\n    return {\n        restrict: 'EA',\n        template: require(\"../tpls/form-dialog.jade\")(),\n        scope: true,\n        require: `^${_dirName}`,\n        bindToController: {\n            key: \"@\",\n            formData: '=ngModel',\n            submitCallBack: '=?ngSubmit'\n        },\n        controller: Controller,\n        controllerAs: 'dialogFormCtl',\n        replace: false,\n        compile: ($ele)=> {\n            $ele.replaceWith(angular.element($ele.html()));\n            return ($scope, $ele: ng.IAugmentedJQuery, $attrs, $ctl: Controller) => {\n                $scope.$watch(()=> {\n                    return $ctl.key;\n                }, ()=> {\n                    $ctl.getActionModel();\n                });\n            };\n        }\n    };\n}\n\nexport default (module: ng.IModule)=> {\n    module.directive(_dirName, Directive);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/directives/action/directives/dialog-form.directive.ts\n **/","import {IActionModel} from '../models/action.model';\n\nconst _dirName = 'fxDialogWizardAction';\n\nclass Controller {\n    static $inject = [\"$scope\", \"fxAction\", \"materialUtils\", \"toolbarUtils\", \"$mdDialog\"];\n\n    formData: Object;\n    actionModel: IActionModel;\n    key: string;\n    toolbars: Array<any>;\n    submitCallBack: Function;\n\n    constructor(private $scope, private fxAction, private materialUtils: fx.utils.materialStatic, private toolbarUtils, private $mdDialog: ng.material.IDialogService) {\n        this.formData = this.formData || {};\n    }\n\n    getActionModel() {\n        this.fxAction.getModel(this.key).then((model)=> {\n            this.actionModel = model;\n            this.toolbars = [\n                this.toolbarUtils.noneBuilder(\"icon\").iconBuilder(this.actionModel.icon).toValue(),\n                this.toolbarUtils.labelBuilder(this.actionModel.title).attrBuilder({flex: \"\"}).toValue(),\n                this.toolbarUtils.btnBuilder(\"关闭\", \"md-icon-button\", false).iconBuilder(\"close\").btnClick(($event)=> {\n                    this.$mdDialog.cancel(\"用户关闭\");\n                }).toValue()\n            ];\n        });\n    }\n}\n\n/**\n * 操作指令,某个表单操作\n * @returns {{restrict: string, template: any, scope: {}, replace: boolean, link: (($scope:IDirectiveScope))}}\n * @constructor\n */\nfunction Directive(): ng.IDirective {\n    return {\n        restrict: 'EA',\n        template: require(\"../tpls/wizard-dialog.jade\")(),\n        scope: true,\n        require: `^${_dirName}`,\n        bindToController: {\n            key: \"@\",\n            formData: '=ngModel',\n            submitCallBack: \"=?ngSubmit\",\n        },\n        controller: Controller,\n        controllerAs: 'dialogWizardCtl',\n        replace: false,\n        compile: ($ele)=> {\n            $ele.replaceWith(angular.element($ele.html()));\n            return ($scope, $ele: ng.IAugmentedJQuery, $attr, $ctl: Controller) => {\n                $scope.$watch(()=> {\n                    return $ctl.key;\n                }, ()=> {\n                    $ctl.getActionModel();\n                });\n            };\n        }\n    };\n}\n\nexport default (module: ng.IModule)=> {\n    module.directive(_dirName, Directive);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/directives/action/directives/dialog-wizard.directive.ts\n **/","import {IActionModel} from '../models/action.model';\n\ninterface IDirectiveScope extends ng.IScope {\n\n}\n\ninterface IDirectiveAttr extends ng.IAttributes {\n\n}\n\nclass Controller {\n    static $inject = [\"$scope\", \"fxAction\"];\n\n    actionModel: IActionModel;\n    key: string;\n    formData: Object;\n\n    constructor(private $scope, private fxAction) {\n        this.formData = this.formData || {};\n    }\n\n    getActionModel() {\n        this.fxAction.getModel(this.key).then((model)=> {\n            this.actionModel = model;\n        });\n    }\n}\n\n/**\n * 操作指令,某个表单操作\n * @returns {{restrict: string, template: any, scope: {}, replace: boolean, link: (($scope:IDirectiveScope))}}\n * @constructor\n */\nfunction Directive(): ng.IDirective {\n    return {\n        restrict: 'EA',\n        template: require(\"../tpls/form.jade\")(),\n        scope: true,\n        require: \"^fxFormAction\",\n        bindToController: {\n            formData: \"=ngModel\",\n            actionModel: \"=?\",\n            key: \"@?\"\n        },\n        controller: Controller,\n        controllerAs: 'formCtl',\n        replace: true,\n        transclude: true,\n        link: ($scope: IDirectiveScope, $ele: ng.IAugmentedJQuery, $attrs: IDirectiveAttr, $ctl: Controller) => {\n            $scope.$watch(()=> {\n                return $ctl.key;\n            }, ()=> {\n                $ctl.getActionModel();\n            });\n        }\n    };\n}\n\nexport default (module: ng.IModule)=> {\n    module.directive(\"fxFormAction\", Directive);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/directives/action/directives/form.directive.ts\n **/","import {IActionModel, IClientData, IQueryData, ActionType} from '../models/action.model';\n\nclass Controller {\n    static $inject = [\"$scope\", \"$q\", \"$timeout\", \"fxAction\", \"toolbarUtils\", \"materialUtils\"];\n\n    key: string;\n    mdLimitOptions: Array<number> = [10, 30, 50, 100, 300];\n    actionModel: IActionModel;\n    clientData: IClientData = {};\n    queryData: IQueryData = {offset: 0, limit: 10, page: 1};\n    isBusy: boolean = false;\n    showPage: boolean = false;\n    selected: Array<Object> = [];\n    promise: ng.IPromise<any>;\n\n    onOrderChange: Function;\n    onPageChange: Function;\n    doSearchBind: Function;\n\n    /**\n     * 构造函数\n     * @param $scope\n     * @param $q\n     * @param $timeout\n     * @param fxAction\n     * @param toolbarUtils\n     * @param materialUtils\n     */\n    constructor(private $scope, private $q, private $timeout, private fxAction, private toolbarUtils, private materialUtils: fx.utils.materialStatic) {\n        fxAction.getModel(this.key).then((model) => {\n            this.actionModel = _.cloneDeep(model);\n            this.initToolbar();\n            this.initItemToolbar();\n            this.doSearch();\n        });\n        this.onOrderChange = this.orderChange.bind(this);\n        this.onPageChange = this.pageChange.bind(this);\n        this.doSearchBind = this.doSearch.bind(this);\n    }\n\n    /**\n     * 按钮的点击事件\n     * @param $event\n     * @param actionModel\n     * @param item\n     */\n    doClickActionMenu($event, actionModel, item) {\n        this.fxAction.doActionModel($event, actionModel, item).then((result)=> {\n            this.materialUtils.showMsg(`${actionModel.successMsg || \"操作成功!\"}`);\n            this.$timeout(()=> {\n                if (actionModel.refreshList) {\n                    this.doSearch(this.queryData.where || {});\n                }\n            }, 200);\n        });\n    }\n\n    /**\n     * 初始化顶部toolbar\n     */\n    initToolbar() {\n        // 添加标题label和icon\n        this.actionModel.list.toolbars.push(this.toolbarUtils.noneBuilder(\"icon\").iconBuilder(this.actionModel.icon, {fill: \"black\"}).toValue());\n        this.actionModel.list.toolbars.push(this.toolbarUtils.labelBuilder(`${this.actionModel.title}`).attrBuilder({flex: \"\"}).toValue());\n        // 获取操作按钮\n        this.fxAction.getModels(this.actionModel.actions).then((actionModels)=> {\n            // 添加顶部按钮\n            _.forEach(actionModels, (actionModel: IActionModel)=> {\n                if (actionModel.type !== ActionType.list) {\n                    this.actionModel.list.toolbars.push(this.toolbarUtils.btnBuilder(actionModel.title, \"md-icon-button\", false).tooltipBuilder(\"\").iconBuilder(actionModel.icon, {fill: \"black\"}).btnClick(($event, item: any)=> {\n                        this.doClickActionMenu($event, actionModel, item || {});\n                    }).toValue());\n                }\n            });\n            // 添加刷新按钮\n            if (this.actionModel.list.showRefreshBtn) {\n                this.actionModel.list.toolbars.push(this.toolbarUtils.btnBuilder(\"刷新\", \"md-icon-button\", false).iconBuilder(\"refresh\", {fill: \"black\"}).btnClick(($event)=> {\n                    this.doSearch(this.queryData.where || {});\n                }).toValue());\n            }\n            // 添加显示/隐藏搜索按钮\n            if (this.actionModel.list.showSearchBtn) {\n                this.actionModel.list.toolbars.push(this.toolbarUtils.btnBuilder(\"{{listCtl.actionModel.list.showSearchPanel?'关闭搜索栏':'打开搜索栏'}}\", \"md-icon-button\", false).iconBuilder(\"{{listCtl.actionModel.list.showSearchPanel?'window-open':'window-closed'}}\", {fill: \"black\"}).btnClick(($event)=> {\n                    this.actionModel.list.showSearchPanel = !this.actionModel.list.showSearchPanel;\n                }).toValue());\n            }\n        });\n    }\n\n    /**\n     * 初始化单项的Item的toolbar\n     */\n    initItemToolbar() {\n        const menuTool: any = this.toolbarUtils.menuBuilder(\"\", \"md-icon-button\").tooltipBuilder(\"操作菜单\").iconBuilder(\"expand_more\").menuOptionsBuilder().toValue();\n        const keys = [];\n        let itemActionsObj = _.keyBy(this.actionModel.itemActions, \"key\");\n\n        // 提取所有的keys\n        _.each(this.actionModel.itemActions, (item)=> {\n            keys.push(item.key);\n        });\n        // 处理所有提取的keys\n        keys.length && this.fxAction.getModels(keys).then((actionModels)=> {\n            _.forEach(actionModels, (actionModel: IActionModel, key)=> {\n                let condition = itemActionsObj[key].condition;\n\n                // 添加操作按钮\n                switch (actionModel.type) {\n                    case  ActionType.form:\n                    case  ActionType.wizard:\n                    case  ActionType.confirm:\n                        let menu = this.toolbarUtils.menuItemBuilder(actionModel.title, null, true).tooltipBuilder(\"\").noOptions(true, false).iconBuilder(actionModel.icon).btnClick(($event, item: any)=> {\n                            this.doClickActionMenu($event, actionModel, item);\n                        });\n                        // 处理显示/隐藏逻辑\n                        if (condition) {\n                            menu.conditionBuilder(condition);\n                        }\n                        // 添加到操作\n                        menuTool.items.push(menu.toValue());\n                        break;\n                }\n            });\n            // 单挑数据的操作按钮数据\n            this.actionModel.list.itemToolbars = [menuTool];\n        });\n    }\n\n    /**\n     * 更改排序回调\n     * @param order\n     */\n    orderChange(order: string) {\n        this.queryData.order = order;\n        this.doSearch(this.queryData.where || {});\n    }\n\n    /**\n     * 更改页码或者pageSize回调\n     * @param page\n     * @param limit\n     */\n    pageChange(page: number, limit: number) {\n        if (limit !== this.queryData.limit) {\n            page = 1;\n        }\n        this.queryData.page = page;\n        if (page > 0) {\n            this.queryData.offset = (page - 1) * limit;\n        }\n        this.doSearch(this.queryData.where || {});\n    }\n\n    /**\n     * 搜索数据\n     * @param filterData {Object} 搜索数据\n     */\n    doSearch(filterData?: any) {\n        this.isBusy = true;\n\n        this.queryData.where = filterData || {};\n        this.promise = this.fxAction.doAction(this.key, this.queryData);\n\n        if (!this.promise) {\n            return;\n        }\n        this.promise.then((result)=> {\n            this.fxAction.doDealResult(this.actionModel, result, this.clientData);\n        }).finally(()=> {\n            this.isBusy = false;\n        });\n    }\n}\n\n/**\n * 操作指令,某个表单操作\n * @returns {{restrict: string, template: any, scope: {}, replace: boolean, link: (($scope:IDirectiveScope))}}\n * @constructor\n */\nfunction Directive(): ng.IDirective {\n    return {\n        restrict: 'EA',\n        template: require(\"../tpls/list.jade\")(),\n        scope: true,\n        bindToController: {\n            key: \"@\",\n            selected: '=?'\n        },\n        controller: Controller,\n        controllerAs: 'listCtl',\n        replace: true,\n        transclude: true\n    };\n}\n\nexport default (module: ng.IModule) => {\n    module.directive(\"fxListAction\", Directive);\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/directives/action/directives/list.directive.ts\n **/","import {IActionModel, ActionType} from '../models/action.model';\nimport * as _ from 'lodash';\nimport * as pointer from 'json-pointer';\n\nconst _name = \"fxSearchAction\";\n\ninterface IDirectiveScope extends ng.IScope {\n    ngModel: any;\n    fxAction: string;\n    actionModel: IActionModel;\n    key: string;\n}\n\nclass Controller {\n    static $inject = [\"fxAction\", \"toolbarUtils\"];\n\n    key: string;\n    formData: any;\n    actionModel: IActionModel;\n    disabled: boolean;\n    toolbars: Array<any>;\n    isShow: boolean;\n    doSearch: Function;\n\n    constructor(private fxAction, private toolbarUtils) {\n        this.initSearchToolbar();\n        this.formData = this.formData || {};\n    }\n\n    /**\n     * 删除搜索字段\n     */\n    clearFilterData() {\n        _.forEach(this.formData, (val, key)=> {\n            delete this.formData[key];\n        });\n    }\n\n    /**\n     * 初始化搜索toolbar\n     */\n    initSearchToolbar() {\n        this.toolbars = [\n            this.toolbarUtils.labelBuilder('{{searchCtl.title}}搜索').attrBuilder({flex: \"\"}).toValue(),\n            this.toolbarUtils.btnBuilder(\"清空搜索条件\", \"md-icon-button\", false).iconBuilder(\"clear_all\").btnClick(($event)=> {\n                this.clearFilterData();\n            }).toValue(),\n            this.toolbarUtils.btnBuilder(\"关闭搜索栏\", \"md-icon-button\", false).iconBuilder(\"{{searchCtl.isShow?'window-open':'window-closed'}}\").btnClick(($event)=> {\n                this.isShow = !this.isShow;\n            }).toValue()\n        ];\n    }\n\n    /**\n     * 搜索数据\n     * @param $form\n     */\n    doPreSearch($event, $form: ng.IFormController) {\n        const searchData = {};\n\n        if (this.fxAction.doFormCheck($form) && _.isFunction(this.doSearch)) {\n            _.forEach(this.formData, (data, key: string)=> {\n                if (key.substr(0, 1) === \"/\") {\n                    pointer.set(searchData, key, data);\n                }\n            });\n\n            this.doSearch(searchData);\n        }\n    }\n}\n\n/**\n * 操作指令,某个表单操作\n * @returns {{restrict: string, template: any, scope: {}, replace: boolean, link: (($scope:IDirectiveScope))}}\n * @constructor\n */\nfunction Directive(): ng.IDirective {\n    return {\n        restrict: 'EA',\n        template: require(\"../tpls/search.jade\")(),\n        bindToController: {\n            formData: \"=ngModel\",\n            key: \"@\",\n            disabled: '=',\n            isShow: '=',\n            doSearch: '=?',\n            title: '=?'\n        },\n        require: `^${_name}`,\n        controller: Controller,\n        controllerAs: 'searchCtl',\n        replace: true\n    };\n\n}\n\nexport default (module: ng.IModule)=> {\n    module.directive(_name, Directive);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/directives/action/directives/search.directive.ts\n **/","/**\n * Created by NICK on 16/8/9.\n */\n\nimport {IActionModel, ISchemaForm, ActionType} from '../models/action.model';\n\ninterface IDirectiveScope extends ng.IScope {\n\n}\n\ninterface IDirectiveAttr extends ng.IAttributes {\n\n}\n\nclass Controller {\n    static $inject = [\"$scope\", \"$timeout\", \"fxAction\", \"toolbarUtils\", \"materialUtils\", \"$mdDialog\"];\n\n    isShow: boolean = true;\n    actionModel: IActionModel;\n    key: string;\n    formData: Object;\n    selectedIndex: number = 0;\n    toolbars: Array<any>;\n    $forms: {[id: string]: ng.IFormController};\n    isBusy: boolean;\n    submitCallBack: Function;\n\n    constructor(private $scope, private $timeout, private fxAction, private toolbarUtils, private materialUtils: fx.utils.materialStatic, private $mdDialog) {\n        this.initToolbar();\n\n        this.$scope.$on(\"$destroy\", ()=> {\n            this.formData = null;\n            this.$forms = null;\n            this.toolbars = null;\n            this.actionModel = null;\n        });\n    }\n\n    /**\n     * 初始化form，因为有多个form，所以需要用一个对象来保存所有的表单对象，用于后期验证表单的$valid\n     * @param action\n     * @param $scope\n     */\n    initForm(action: IActionModel, $scope: ng.IScope) {\n        if (!this.$forms) {\n            this.$forms = {};\n        }\n        this.$forms[action.key] = $scope[`${action.key}Form`];\n    }\n\n    /**\n     * 判断是否需要显示form\n     * @param action\n     * @param index\n     * @returns {boolean}\n     */\n    showForm(action: IActionModel, index: number) {\n        return index === 0 || this.$forms.hasOwnProperty(action.key) || index == this.selectedIndex || index == this.selectedIndex + 1;\n    }\n\n    /**\n     * 验证当前表单是否正确\n     * @returns {boolean}\n     */\n    doCheckCurrentForm(index?: number) {\n        let actionModel = this.actionModel.wizard.actions[_.isUndefined(index) ? this.selectedIndex : index];\n\n        // 验证表单是否正确\n        if (this.$forms) {\n            let formController = this.$forms[`${(actionModel as IActionModel).key}`];\n\n            if (!this.fxAction.doFormCheck(formController)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * 检查所有的表单是否正确\n     * @returns {boolean}\n     */\n    doCheckForms() {\n        let res = true;\n\n        _.each(this.actionModel.wizard.actions, (action, index)=> {\n            res = this.doCheckCurrentForm(index);\n\n            if (!res) {\n                this.selectedIndex = index;\n                return false;\n            }\n        });\n\n        return res;\n    }\n\n    /**\n     * 重置表单数据\n     */\n    reset() {\n        this.formData = {};\n        this.$forms = {};\n        this.selectedIndex = 0;\n        this.isShow = false;\n        this.$timeout(()=> {\n            this.isShow = true;\n        }, 0);\n    }\n\n    /**\n     * 添加wizard的按钮组,包括上一步,下一步和完成按钮\n     * 每个按钮都需要验证表单的正确性\n     * 每个按钮如果有接口操作,都需要调用接口,接口返回正常才可用\n     */\n    initToolbar() {\n        this.toolbars = [\n            this.toolbarUtils.btnBuilder(\"上一步\", null, true, \"top\").iconBuilder(\"navigate_before\").conditionBuilder(\"wizardCtl.selectedIndex>0\", false).btnClick(($event)=> {\n                this.selectedIndex && this.selectedIndex--;\n            }).toValue(),\n            this.toolbarUtils.btnBuilder(\"下一步\", null, true, \"top\").iconBuilder(null, null, \"navigate_next\").conditionBuilder(\"wizardCtl.selectedIndex < wizardCtl.actionModel.wizard.actions.length-1\", false).btnClick(($event)=> {\n                if (this.doCheckCurrentForm() && _.isArray(this.actionModel.wizard.actions) && this.actionModel.wizard.actions.length > this.selectedIndex) {\n                    this.selectedIndex++;\n                }\n            }).toValue(),\n            this.toolbarUtils.btnBuilder(\"完成\", \"md-primary\", true, \"top\").iconBuilder(\"done_all\").conditionBuilder(\"!wizardCtl.isBusy && wizardCtl.selectedIndex===wizardCtl.actionModel.wizard.actions.length-1\", false).btnClick(($event)=> {\n                if (this.doCheckForms()) {\n                    this.isBusy = true;\n                    this.fxAction.doAction(this.actionModel.key, this.formData).then((result)=> {\n                        this.actionModel.closeDialog === true && this.$mdDialog.hide(result);\n\n                        if (_.isFunction(this.submitCallBack)) {\n                            this.submitCallBack();\n                        }\n                        // this.materialUtils.showMsg(this.actionModel.successMsg || \"操作成功！\");\n                        // this.reset();\n                    }).finally(()=> {\n                        this.isBusy = false;\n                    });\n                }\n            }).toValue()\n        ];\n    }\n\n    /**\n     * 通过key来获取数据\n     */\n    getActionModel() {\n        let actionModel;\n\n        this.fxAction.getModel(this.key).then((model: IActionModel)=> {\n            actionModel = _.cloneDeep(model);\n\n            return this.fxAction.getModels(model.wizard.actions);\n        }).then((actionModels: Array<IActionModel>)=> {\n            let actions = [];\n\n            _.each(actionModel.wizard.actions, (action)=> {\n                if (_.isString(action)) {\n                    action = actionModels[action];\n                }\n                // 如果是form/wizard的话，判断dataSchema是否存在，不存在则使用wizard的defaultSchema\n                if (action && (action.type === ActionType.form || action.type === ActionType.wizard)) {\n                    if (!action.form.dataSchema && action.type === ActionType.form) {\n                        action.form.dataSchema = actionModel.wizard.defaultSchema.dataSchema;\n                    }\n                    actions.push(action);\n                }\n            });\n            actionModel.wizard.actions = actions;\n            this.actionModel = actionModel;\n        });\n    }\n}\n\n/**\n * 操作指令,某个表单操作\n * @returns {{restrict: string, template: any, scope: {}, replace: boolean, link: (($scope:IDirectiveScope))}}\n * @constructor\n */\nfunction Directive(): ng.IDirective {\n    return {\n        restrict: 'EA',\n        template: require(\"../tpls/wizard.jade\")(),\n        scope: true,\n        require: \"^fxWizardAction\",\n        bindToController: {\n            formData: \"=ngModel\",\n            submitCallBack: \"=?ngSubmit\",\n            key: \"@\"\n        },\n        controller: Controller,\n        controllerAs: 'wizardCtl',\n        replace: true,\n        transclude: true,\n        link: ($scope: IDirectiveScope, $ele: ng.IAugmentedJQuery, $attr: IDirectiveAttr, $ctl: Controller) => {\n            $scope.$watch(()=> {\n                return $ctl.key;\n            }, ()=> {\n                $ctl.getActionModel();\n            });\n        }\n    };\n}\n\nexport default (module: ng.IModule)=> {\n    module.directive(\"fxWizardAction\", Directive);\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/directives/action/directives/wizard.directive.ts\n **/","/**\n * Created by NICK on 16/8/23.\n */\n\nimport {IActionModel, ActionType} from '../models/action.model';\nimport {MethodType} from '../models/interface.model';\n\n/**\n * 模块查询\n */\nclass Result {\n    static $inject = [\"toolbarUtils\", \"actionUtils\"];\n    static key: string = \"resultAction\";\n\n    constructor(toolbarUtils, actionUtils) {\n        let actionModel: IActionModel = {\n            key: Result.key,\n            type: ActionType.form,\n            title: \"结果反馈\",\n            icon: \"view-module\",\n            form: {\n                dataSchema: {\n                    type: \"object\",\n                    properties: {\n                        data: {\n                            type: \"object\",\n                            title: \"返回结果\"\n                        }\n                    }\n                },\n                formSchema: [{\n                    key: \"data\",\n                    type: \"jeditor\"\n                }]\n            }\n        };\n\n        return actionModel;\n    }\n}\n\nexport default (module: ng.IModule) => {\n    const services: Array<any> = [Result];\n\n    _.each(services, (ser)=> {\n        module.service(ser.key, ser);\n    });\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/directives/action/schemas/common.value.ts\n **/","import {IActionModel, ActionType} from '../models/action.model';\nimport {MethodType} from '../models/interface.model';\n\nconst dataSchema = {\n    type: \"object\",\n    required: [\"key\", \"host\", \"interval\"],\n    properties: {\n        key: {\n            type: \"string\",\n            title: \"KEY\"\n        },\n        host: {\n            type: \"string\",\n            title: \"主HOST\"\n        },\n        domainWhiteList: {\n            type: \"array\",\n            title: \"域名白名单\",\n            default: [],\n            // minItems: 2,\n            items: {\n                type: \"string\",\n                format: \"url-ip\",\n                title: \"域名或者IP\"\n            }\n        },\n        whitePathList: {\n            type: \"array\",\n            title: \"路径白名单\",\n            default: [],\n            // minItems: 2,\n            items: {\n                type: \"object\",\n                title: \"路径配置\",\n                required: [\"regexp\", \"scope\"],\n                properties: {\n                    enable: {\n                        type: \"boolean\",\n                        title: \"是否启用\"\n                    },\n                    regexp: {\n                        type: \"string\",\n                        title: \"正则规则\"\n                    },\n                    scope: {\n                        type: \"string\",\n                        title: \"修饰符\"\n                    },\n                    description: {\n                        type: \"string\",\n                        title: \"介绍\"\n                    },\n                }\n            }\n        },\n        interval: {\n            type: \"number\",\n            default: 1000,\n            minimum: 1000,\n            title: \"下载间隔，单位ms\"\n        },\n        downloader: {\n            type: \"string\",\n            default: \"superagent\",\n            title: \"下载策略\"\n        },\n        initDomain: {\n            type: \"string\",\n            title: \"初始化域名\"\n        },\n        proxySettings: {\n            type: \"object\",\n            title: \"基础设置\",\n            properties: {\n                useProxy: {\n                    type: \"boolean\",\n                    title: \"是否启用代理\"\n                },\n                timeout: {\n                    type: \"number\",\n                    title: \"超时时间\"\n                },\n                charset: {\n                    type: \"string\",\n                    title: \"字符编码\"\n                },\n                ua: {\n                    type: \"string\",\n                    title: \"USERAGENT\"\n                },\n                ipInfo: {\n                    type: \"object\",\n                    title: \"代理ip设置\",\n                    properties: {\n                        host: {\n                            type: \"string\",\n                            format: 'url-ip',\n                            title: \"代理ip或域名\"\n                        },\n                        port: {\n                            type: \"number\",\n                            title: \"代理端口\"\n                        }\n                    }\n                }\n            }\n        },\n        pages: {\n            type: \"array\",\n            title: \"分析页面配置\",\n            items: {\n                type: \"object\",\n                required: [\"key\", \"fieldKey\"],\n                title: \"分析页面配置\",\n                properties: {\n                    key: {\n                        type: \"string\",\n                        title: \"页面的KEY\"\n                    },\n                    areas: {\n                        type: \"array\",\n                        title: \"页面区域\",\n                        items: {\n                            type: \"object\",\n                            required: [\"selector\", \"dealStrategy\", \"key\"],\n                            properties: {\n                                key: {\n                                    type: \"string\",\n                                    title: \"区域KEY\"\n                                },\n                                selector: {\n                                    type: \"string\",\n                                    title: \"选择器\"\n                                },\n                                dealStrategy: {\n                                    type: \"string\",\n                                    default: \"jsdom\",\n                                    title: \"分析策略\"\n                                }\n                            }\n                        }\n                    },\n                    rule: {\n                        type: \"array\",\n                        title: \"匹配规则\",\n                        default: [],\n                        items: {\n                            type: \"object\",\n                            title: \"路径配置\",\n                            required: [\"regexp\", \"scope\"],\n                            properties: {\n                                regexp: {\n                                    type: \"string\",\n                                    title: \"正则规则\"\n                                },\n                                scope: {\n                                    type: \"string\",\n                                    title: \"修饰符\"\n                                }\n                            }\n                        }\n                    },\n                    fieldKey: {\n                        type: \"string\",\n                        title: \"主键字段\"\n                    },\n                    strict: {\n                        type: \"boolean\",\n                        title: \"是否启用严格模式\"\n                    },\n                    strictFields: {\n                        type: \"array\",\n                        title: \"严格模式下，验证字段\",\n                        default: [],\n                        items: {\n                            type: \"string\",\n                            title: \"验证字段\"\n                        }\n                    },\n                    fields: {\n                        type: \"object\",\n                        title: \"分析字段配置\"\n                    }\n                }\n            }\n        },\n        description: {\n            type: \"string\",\n            title: \"描述\",\n            maxLength: 500\n        }\n    }\n};\n\n/**\n * 模块查询\n */\nclass List {\n    static $inject = [\"toolbarUtils\", \"actionUtils\"];\n    static key: string = \"crawlerSettingListAction\";\n\n    constructor(toolbarUtils, actionUtils) {\n        let actionModel: IActionModel = {\n            key: List.key,\n            type: ActionType.list,\n            title: \"爬虫配置文件管理\",\n            icon: \"content-save-settings\",\n            list: {\n                columns: [\n                    actionUtils.columnBuilder(\"<span>{{::item.key}}</span>\", \"KEY\").toValue(),\n                    actionUtils.columnBuilder(\"<span>{{ ::item.host }}</span>\", \"域名\").toValue(),\n                    actionUtils.columnBuilder(\"<span>{{ ::item.interval }}</span>\", \"间隔时间\").toValue(),\n                    actionUtils.columnBuilder(`<span>{{ ::item.downloader }}</span>`, \"下载策略\").toValue(),\n                    actionUtils.columnBuilder(`<span>{{ ::item.description }}</span>`, \"详情\").toValue()\n                ],\n                searchActionKey: Search.key,\n                showRefreshBtn: true,\n                showSearchBtn: true,\n                showSearchPanel: false,\n                toolbars: [],\n                itemToolbars: []\n            },\n            itemActions: [{key: Edit.key}, {key: Delete.key}, {key: Copy.key}],\n            actions: [Add.key],\n            interfaces: [{\n                key: \"crawlerSettingList\",\n                method: MethodType.GET,\n                address: \"\",\n                port: null,\n                path: \"crawler_settings\",\n                jpp: {\n                    set: {\n                        \"/total\": \"/count\",\n                        \"/rows\": \"/rows\"\n                    },\n                    copy: {},\n                    move: {},\n                    del: {}\n                },\n                isRestful: true\n            }]\n        };\n\n        return actionModel;\n    }\n}\n\nclass AddFirst {\n    static $inject = [\"toolbarUtils\", \"actionUtils\"];\n    static key: string = \"crawlerSettingAddFirstAction\";\n\n    constructor(toolbarUtils, actionUtils) {\n        let actionModel: IActionModel = {\n            key: AddFirst.key,\n            type: ActionType.form,\n            title: \"基础设置\",\n            icon: \"add\",\n            form: {\n                formSchema: [{\n                    key: \"key\",\n                    type: \"text\",\n                    htmlClass: \"md-block\"\n                }, {\n                    key: \"host\",\n                    type: \"text\",\n                    htmlClass: \"md-block\"\n                }, {\n                    key: \"initDomain\",\n                    type: \"text\",\n                    htmlClass: \"md-block\"\n                }, {\n                    key: \"interval\",\n                    type: \"number\",\n                    htmlClass: \"md-block\"\n                }, {\n                    key: \"downloader\",\n                    type: \"select\",\n                    titleMap: [{\n                        \"name\": \"SUPERAGENT\",\n                        \"value\": \"superagent\"\n                    }, {\n                        \"name\": \"PHANTOM\",\n                        \"value\": \"phantom\"\n                    }],\n                    htmlClass: \"md-block\"\n                }, {\n                    key: \"description\",\n                    type: \"textarea\",\n                    htmlClass: \"md-block\"\n                }]\n            }\n        };\n\n        return actionModel;\n    }\n}\n\nclass AddSecond {\n    static $inject = [\"toolbarUtils\", \"actionUtils\"];\n    static key: string = \"crawlerSettingAddSecondAction\";\n\n    constructor(toolbarUtils, actionUtils) {\n        let actionModel: IActionModel = {\n            key: AddSecond.key,\n            type: ActionType.form,\n            title: \"白名单设置\",\n            icon: \"add\",\n            form: {\n                formSchema: [{\n                    key: \"domainWhiteList\",\n                    type: \"chips\",\n                    startEmpty: true,\n                    description: \"域名白名单，配置可以爬取的域名列表\",\n                    showHints: true,\n                    htmlClass: \"md-block\"\n                }, {\n                    key: \"whitePathList\",\n                    type: \"array\",\n                    fieldHtmlClass: \"layout-row flex\",\n                    startEmpty: true,\n                    description: \"路径白名单，配置可以爬取的路径列表\",\n                    showHints: true,\n                    items: [{\n                        type: \"section\",\n                        htmlClass: \"layout-row flex\",\n                        items: [{\n                            key: \"whitePathList[].enable\",\n                            type: \"select\",\n                            titleMap: [{\n                                name: \"启用\",\n                                value: true\n                            }, {\n                                name: \"不启用\",\n                                value: false\n                            }]\n                        }, {\n                            key: \"whitePathList[].regexp\",\n                            htmlClass: \"md-block flex\",\n                            type: \"text\"\n                        }, {\n                            key: \"whitePathList[].scope\",\n                            type: \"text\"\n                        }, {\n                            key: \"whitePathList[].description\",\n                            type: \"text\"\n                        }]\n                    }]\n                }]\n            }\n        };\n\n        return actionModel;\n    }\n}\n\nclass AddThird {\n    static $inject = [\"toolbarUtils\", \"actionUtils\"];\n    static key: string = \"crawlerSettingAddThirdAction\";\n\n    constructor(toolbarUtils, actionUtils) {\n        let actionModel: IActionModel = {\n            key: AddThird.key,\n            type: ActionType.form,\n            title: \"其他设置\",\n            icon: \"add\",\n            form: {\n                formSchema: [{\n                    key: \"proxySettings\",\n                    type: \"card\",\n                    items: [{\n                        key: \"proxySettings.useProxy\",\n                        type: \"checkbox\"\n                    }, {\n                        key: \"proxySettings.timeout\",\n                        type: \"number\",\n                        htmlClass: \"md-block\"\n                    }, {\n                        key: \"proxySettings.charset\",\n                        type: \"text\",\n                        htmlClass: \"md-block\"\n                    }, {\n                        key: \"proxySettings.ua\",\n                        type: \"textarea\",\n                        maxLength: 300,\n                        htmlClass: \"md-block\"\n                    }, {\n                        key: \"proxySettings.ipInfo\",\n                        type: \"card\",\n                        items: [{\n                            key: \"proxySettings.ipInfo.host\",\n                            type: \"text\",\n                            htmlClass: \"md-block\"\n                        }, {\n                            key: \"proxySettings.ipInfo.port\",\n                            type: \"number\",\n                            htmlClass: \"md-block\"\n                        }]\n                    }],\n                    htmlClass: \"md-block\"\n                }]\n            }\n        };\n\n        return actionModel;\n    }\n}\n\nclass AddForth {\n    static $inject = [\"toolbarUtils\", \"actionUtils\"];\n    static key: string = \"crawlerSettingAddForthAction\";\n\n    constructor(toolbarUtils, actionUtils) {\n        let actionModel: IActionModel = {\n            key: AddFifth.key,\n            type: ActionType.form,\n            title: \"页面配置\",\n            icon: \"add\",\n            form: {\n                formSchema: [{\n                    key: \"pages\",\n                    type: \"tabarray\",\n                    startEmpty: true,\n                    fieldHtmlClass: \"layout-column flex\",\n                    items: [{\n                        type: \"section\",\n                        grid: {flex: \"\"},\n                        items: [{\n                            key: \"pages[].key\",\n                            type: \"text\",\n                            htmlClass: \"md-block\"\n                        }, {\n                            key: \"pages[].fieldKey\",\n                            type: \"text\",\n                            htmlClass: \"md-block\"\n                        }, {\n                            key: \"pages[].strict\",\n                            type: \"switch\",\n                            htmlClass: \"md-block\"\n                        }, {\n                            key: \"pages[].strictFields\",\n                            startEmpty: true,\n                            type: \"chips\",\n                            htmlClass: \"md-block\"\n                        }, {\n                            key: \"pages[].rule\",\n                            type: \"array\",\n                            startEmpty: true,\n                            items: [{\n                                type: \"section\",\n                                htmlClass: \"layout-row flex\",\n                                items: [{\n                                    key: \"pages[].rule[].regexp\",\n                                    htmlClass: \"md-block flex\",\n                                    type: \"text\"\n                                }, {\n                                    key: \"pages[].rule[].scope\",\n                                    type: \"text\"\n                                }]\n                            }]\n                        }]\n                    }]\n                }]\n            }\n        };\n\n        return actionModel;\n    }\n}\n\nclass AddFifth {\n    static $inject = [\"toolbarUtils\", \"actionUtils\"];\n    static key: string = \"crawlerSettingAddFifthAction\";\n\n    constructor(toolbarUtils, actionUtils) {\n        let actionModel: IActionModel = {\n            key: AddFifth.key,\n            type: ActionType.form,\n            title: \"页面配置\",\n            icon: \"add\",\n            form: {\n                formSchema: [{\n                    key: \"pages\",\n                    type: \"tabarray\",\n                    items: [{\n                        type: \"section\",\n                        htmlClass: \"column-row flex\",\n                        items: [{\n                            key: \"pages[].key\",\n                            type: \"text\",\n                            htmlClass: \"md-block\"\n                        }, {\n                            key: \"pages[].areas\",\n                            type: \"array\",\n                            startEmpty: true,\n                            description: \"区域配置，用户优化分析性能，减少dom的查询。\",\n                            showHints: true,\n                            items: [{\n                                type: \"section\",\n                                grid: {flex: \"\", layout: \"row\"},\n                                items: [{\n                                    key: \"pages[].areas[].key\",\n                                    type: \"text\"\n                                }, {\n                                    key: \"pages[].areas[].selector\",\n                                    htmlClass: \"md-block flex\",\n                                    type: \"text\"\n                                }, {\n                                    key: \"pages[].areas[].dealStrategy\",\n                                    type: \"text\"\n                                }]\n                            }]\n                        }, {\n                            key: \"pages[].fields\",\n                            type: \"jeditor\",\n                            htmlClass: \"md-block\"\n                        }]\n                    }]\n                }]\n            }\n        };\n\n        return actionModel;\n    }\n}\n\nclass Add {\n    static key: string = \"crawlerSettingAddAction\";\n\n    constructor() {\n        let actionModel: IActionModel = {\n            key: Add.key,\n            type: ActionType.wizard,\n            title: \"新建爬虫配置文件\",\n            icon: \"add\",\n            refreshList: true,\n            wizard: {\n                defaultSchema: {\n                    dataSchema: dataSchema\n                },\n                actions: [AddFirst.key, AddSecond.key, AddThird.key, AddForth.key, AddFifth.key]\n            },\n            closeDialog: true,\n            interfaces: [{\n                key: \"crawlerSettingAdd\",\n                method: MethodType.POST,\n                address: \"\",\n                port: null,\n                path: \"crawler_settings\",\n                isRestful: true\n            }]\n        };\n\n        return actionModel;\n    }\n}\n\nclass Copy {\n    static key: string = \"crawlerSettingCopyAction\";\n\n    constructor() {\n        let actionModel: IActionModel = {\n            key: Copy.key,\n            type: ActionType.wizard,\n            title: \"复制爬虫配置文件\",\n            icon: \"content_copy\",\n            refreshList: true,\n            wizard: {\n                defaultSchema: {\n                    dataSchema: dataSchema\n                },\n                actions: [AddFirst.key, AddSecond.key, AddThird.key, AddForth.key, AddFifth.key]\n            },\n            closeDialog: true,\n            interfaces: [{\n                key: \"crawlerSettingAdd\",\n                method: MethodType.POST,\n                address: \"\",\n                port: null,\n                path: \"crawler_settings\",\n                isRestful: true\n            }]\n        };\n\n        return actionModel;\n    }\n}\n\nclass Edit {\n    static $inject = [\"toolbarUtils\", \"actionUtils\"];\n    static key: string = \"crawlerSettingEditAction\";\n\n    constructor(toolbarUtils, actionUtils) {\n        let actionModel: IActionModel = {\n            key: Edit.key,\n            type: ActionType.wizard,\n            title: \"修改爬虫配置文件\",\n            icon: \"edit\",\n            refreshList: true,\n            wizard: {\n                defaultSchema: {\n                    dataSchema: dataSchema\n                },\n                actions: [AddFirst.key, AddSecond.key, AddThird.key, AddForth.key, AddFifth.key]\n            },\n            closeDialog: true,\n            interfaces: [{\n                key: \"crawlerSettingEdit\",\n                method: MethodType.PUT,\n                idFieldPath: \"/key\",\n                address: \"\",\n                port: null,\n                path: \"crawler_settings\",\n                isRestful: true\n            }]\n        };\n\n        return actionModel;\n    }\n}\n\nclass Delete {\n    static key: string = \"crawlerSettingDeleteAction\";\n\n    constructor() {\n        let actionModel: IActionModel = {\n            key: Delete.key,\n            type: ActionType.confirm,\n            title: \"删除爬虫配置文件\",\n            icon: \"delete\",\n            refreshList: true,\n            confirm: {\n                confirmTitle: \"\",\n                confirmContent: \"确定要删除爬虫配置文件吗!\"\n            },\n            interfaces: [{\n                key: \"crawlerSettingDelete\",\n                method: MethodType.DELETE,\n                idFieldPath: \"/key\",\n                address: \"\",\n                port: null,\n                path: \"crawler_settings\",\n                isRestful: true\n            }]\n        };\n\n        return actionModel;\n    }\n}\n\nclass Search {\n    static key: string = \"crawlerSettingSearchAction\";\n\n    constructor() {\n        let actionModel: IActionModel = {\n            key: Search.key,\n            type: ActionType.form,\n            title: \"搜索爬虫配置文件\",\n            icon: \"search\",\n            form: {\n                dataSchema: dataSchema,\n                formSchema: [{\n                    key: \"key\",\n                    type: \"text\",\n                    required: false,\n                    copyValueTo: [\"/key/$eq\"],\n                    htmlClass: \"md-block\"\n                }]\n            }\n        };\n\n        return actionModel;\n    }\n}\n\nclass Ack {\n    static key: string = \"crawlerSettingAckAction\";\n\n    constructor() {\n        let actionModel: IActionModel = {\n            key: Ack.key,\n            type: ActionType.form,\n            title: \"爬虫命令\",\n            icon: \"apple-keyboard-command\",\n            form: {\n                dataSchema: {\n                    type: \"object\",\n                    required: [\"key\", \"action\"],\n                    properties: {\n                        key: {\n                            type: \"string\",\n                            title: \"配置文件KEY\"\n                        },\n                        action: {\n                            type: \"string\",\n                            title: \"执行的命令\"\n                        },\n                        options: {\n                            type: \"object\",\n                            title: \"可选项\",\n                            properties: {\n                                url: {\n                                    type: \"string\",\n                                    title: \"测试的地址\"\n                                },\n                                type: {\n                                    type: \"string\",\n                                    default: \"forever\",\n                                    title: \"爬虫启动模式\"\n                                },\n                                startCrawler: {\n                                    type: \"boolean\",\n                                    default: true,\n                                    title: \"开启爬取链接模块\"\n                                },\n                                startDeal: {\n                                    type: \"boolean\",\n                                    default: true,\n                                    title: \"开启html处理模块\"\n                                },\n                                startDownload: {\n                                    type: \"boolean\",\n                                    default: false,\n                                    title: \"开启图片下载模块\"\n                                },\n                                startChip: {\n                                    type: \"boolean\",\n                                    default: false,\n                                    title: \"开启更换ip模块\"\n                                }\n                            }\n                        }\n                    }\n                },\n                formSchema: [{\n                    key: \"action\",\n                    type: \"select\",\n                    titleMap: [\n                        {\"value\": \"crawler:start\", \"name\": \"开始爬虫\", \"group\": \"\"},\n                        {\"value\": \"crawler:stop\", \"name\": \"停止爬虫\", \"group\": \"\"},\n                        {\"value\": \"crawler:create\", \"name\": \"开启一个新爬虫\", \"group\": \"\"},\n                        {\"value\": \"crawler:reset\", \"name\": \"重置一个数据库\", \"group\": \"\"},\n                        {\"value\": \"crawler:test\", \"name\": \"测试地址\", \"group\": \"\"}\n                    ],\n                    htmlClass: \"md-block\"\n                }, {\n                    key: \"key\",\n                    type: \"autocomplete-1\",\n                    condition: \"model.action==='crawler:start' || model.action==='crawler:reset'  || model.action==='crawler:test'\",\n                    acOptions: {\n                        textField: \"key\",\n                        dataField: \"rows\",\n                        noCache: false,\n                        search: \"/where/key/$like\",\n                        actionKey: List.key\n                    },\n                    htmlClass: \"md-block\"\n                }, {\n                    key: \"options\",\n                    type: \"card\",\n                    grid: {\"flex\": \"\"},\n                    condition: \"!!model.action\",\n                    items: [{\n                        key: \"options.type\",\n                        type: \"select\",\n                        htmlClass: \"md-block\",\n                        titleMap: [\n                            {\"value\": \"forever\", \"name\": \"FOREVER启动\"},\n                            {\"value\": \"\", \"name\": \"NODE启动\"}\n                        ]\n                    }, {\n                        key: \"options.url\",\n                        htmlClass: \"md-block\",\n                        type: \"text\"\n                    }, {\n                        key: \"options.startCrawler\",\n                        condition: \"model.action==='crawler:start'\",\n                        htmlClass: \"md-block\",\n                        type: \"checkbox\"\n                    }, {\n                        key: \"options.startDeal\",\n                        condition: \"model.action==='crawler:start'\",\n                        htmlClass: \"md-block\",\n                        type: \"checkbox\"\n                    }, {\n                        key: \"options.startDownload\",\n                        condition: \"model.action==='crawler:start'\",\n                        htmlClass: \"md-block\",\n                        type: \"checkbox\"\n                    }, {\n                        key: \"options.startChip\",\n                        condition: \"model.action==='crawler:start'\",\n                        htmlClass: \"md-block\",\n                        type: \"checkbox\"\n                    }]\n                }]\n            }\n        };\n\n        return actionModel;\n    }\n}\n\nexport default (module: ng.IModule) => {\n    const services: Array<any> = [List, Search, Add, Edit, Delete, Copy, Ack, AddFirst, AddSecond, AddThird, AddForth, AddFifth];\n\n    _.each(services, (ser)=> {\n        module.service(ser.key, ser);\n    });\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/directives/action/schemas/crawler.value.ts\n **/","import {IActionModel, ActionType} from '../models/action.model';\nimport {MethodType} from '../models/interface.model';\n\n/**\n * 返回用户登录界面的schema\n * @returns {IActionModel}\n * @constructor\n */\nfunction LoginSchemaValue() {\n    let actionModel: IActionModel = {\n        key: \"login\",\n        type: ActionType.form,\n        icon: \"\",\n        form: {\n            dataSchema: {\n                type: \"object\",\n                required: [\"username\", \"password\"],\n                properties: {\n                    username: {\n                        type: \"string\",\n                        minLength: 4,\n                        maxLength: 20,\n                        title: \"用户名\"\n                    },\n                    password: {\n                        type: \"string\",\n                        title: \"密码\",\n                        minLength: 4,\n                        maxLength: 20\n                    }\n                }\n            },\n            formSchema: [{\n                key: \"username\",\n                type: \"string\",\n                placeHolder: \"用户名\",\n                icon: {\n                    leftIcon: \"account\"\n                },\n                htmlClass: \"md-icon-left md-block\"\n            }, {\n                key: \"password\",\n                type: \"password\",\n                icon: {\n                    leftIcon: \"lock\"\n                },\n                htmlClass: \"md-icon-left md-block\"\n            }]\n        },\n        interfaces: [{\n            key: \"loginAction\",\n            method: MethodType.POST,\n            address: \"\",\n            port: null,\n            path: \"/passport/login\",\n            isRestful: false\n        }]\n    };\n\n    return actionModel;\n}\n\nfunction LogoutSchemaValue() {\n    let actionModel: IActionModel = {\n        key: \"logout\",\n        type: ActionType.confirm,\n        icon: \"\",\n        confirm: {\n            confirmTitle: '用户中心',\n            confirmContent: '确定要退出么?',\n            confirmOk: \"果断退出\",\n            confirmCancel: '在看看'\n        },\n        interfaces: [{\n            key: \"logoutAction\",\n            method: MethodType.POST,\n            address: \"\",\n            port: null,\n            path: \"/passport/logout\",\n            isRestful: false\n        }]\n    };\n\n    return actionModel;\n}\n\nexport default (module: ng.IModule)=> {\n    const models = [LoginSchemaValue(), LogoutSchemaValue()];\n\n    _.each(models, (model)=> {\n        module.value(model.key, model);\n    });\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/directives/action/schemas/login.value.ts\n **/","\nimport {IActionModel, ActionType} from '../models/action.model';\nimport {MethodType} from '../models/interface.model';\n\nconst dataSchema = {\n    type: \"object\",\n    required: [\"key\", \"title\", \"icon\"],\n    properties: {\n        key: {\n            type: \"string\",\n            title: \"KEY\"\n        },\n        title: {\n            type: \"string\",\n            title: \"模块名称\"\n        },\n        link: {\n            type: \"string\",\n            title: \"路由状态名\"\n        },\n        icon: {\n            type: \"string\",\n            title: \"图标\"\n        },\n        parentKey: {\n            type: \"string\",\n            title: \"父亲节点KEY\"\n        },\n        description: {\n            type: \"string\",\n            title: \"描述\",\n            maxLength: \"500\"\n        },\n        showed: {\n            type: \"boolean\",\n            title: \"是否显示\"\n        }\n    }\n};\n\n/**\n * 模块查询\n */\nclass ModuleList {\n    static $inject = [\"toolbarUtils\", \"actionUtils\"];\n    static key: string = \"module\";\n\n    constructor(toolbarUtils, actionUtils) {\n        let actionModel: IActionModel = {\n            key: ModuleList.key,\n            type: ActionType.list,\n            title: \"模块管理\",\n            icon: \"view-module\",\n            list: {\n                columns: [\n                    actionUtils.columnBuilder(\"<span>{{::item.key}}</span>\", \"KEY\").toValue(),\n                    actionUtils.columnBuilder(\"<span>{{ ::item.title }}</span>\", \"模块名称\").toValue(),\n                    actionUtils.columnBuilder(`<ng-md-icon icon=\"{{ ::item.icon }}\"></ng-md-icon>`, \"图标\").toValue(),\n                    actionUtils.columnBuilder(`<span>{{ ::item.lft }}</span>`, \"lft\", \"lft\").toValue(),\n                    actionUtils.columnBuilder(`<span>{{ ::item.rgt }}</span>`, \"rgt\", \"rgt\").toValue()\n                ],\n                searchActionKey: ModuleSearch.key,\n                showRefreshBtn: true,\n                showSearchBtn: true,\n                showSearchPanel: false,\n                toolbars: [],\n                itemToolbars: []\n            },\n            itemActions: [{key: ModuleEdit.key}, {key: ModuleDelete.key}],\n            actions: [ModuleAdd.key],\n            interfaces: [{\n                key: \"modulesList\",\n                method: MethodType.GET,\n                address: \"\",\n                port: null,\n                path: \"modules\",\n                jpp: {\n                    set: {\n                        \"/total\": \"/count\",\n                        \"/rows\": \"/rows\"\n                    },\n                    copy: {},\n                    move: {},\n                    del: {}\n                },\n                isRestful: true\n            }]\n        };\n\n        return actionModel;\n    }\n}\n/**\n * 模块侧边栏\n */\nclass ModuleMenus {\n    static $inject = [\"toolbarUtils\", \"actionUtils\"];\n    static key: string = \"moduleMenuAction\";\n\n    constructor(toolbarUtils, actionUtils) {\n        let actionModel: IActionModel = {\n            key: ModuleMenus.key,\n            type: ActionType.list,\n            title: \"模块管理\",\n            icon: \"view-module\",\n            interfaces: [{\n                key: \"moduleMenu\",\n                method: MethodType.GET,\n                address: \"\",\n                port: null,\n                path: \"/modules/menu\",\n                isRestful: false\n            }]\n        };\n\n        return actionModel;\n    }\n}\n/**\n * 模块增加\n */\nclass ModuleAdd {\n    static $inject = [\"toolbarUtils\", \"actionUtils\"];\n    static key: string = \"modulesAddAction\";\n\n    constructor(toolbarUtils, actionUtils) {\n        let actionModel: IActionModel = {\n            key: ModuleAdd.key,\n            type: ActionType.form,\n            title: \"新建模块\",\n            icon: \"add\",\n            refreshList: true,\n            form: {\n                dataSchema: dataSchema,\n                formSchema: [{\n                    key: \"parentKey\",\n                    type: \"text\",\n                    htmlClass: \"md-block\"\n                }, {\n                    key: \"key\",\n                    type: \"text\",\n                    htmlClass: \"md-block\"\n                }, {\n                    key: \"title\",\n                    type: \"text\",\n                    htmlClass: \"md-block\"\n                }, {\n                    key: \"link\",\n                    type: \"text\",\n                    htmlClass: \"md-block\"\n                }, {\n                    key: \"icon\",\n                    type: \"text\",\n                    htmlClass: \"md-block\"\n                }, {\n                    key: \"description\",\n                    type: \"textarea\",\n                    htmlClass: \"md-block\"\n                }, {\n                    key: \"showed\",\n                    type: \"checkbox\"\n                }]\n            },\n            closeDialog: true,\n            interfaces: [{\n                key: \"modulesAdd\",\n                method: MethodType.POST,\n                address: \"\",\n                port: null,\n                path: \"modules\",\n                isRestful: true\n            }]\n        };\n\n        return actionModel;\n    }\n}\n/**\n * 模块修改\n */\nclass ModuleEdit {\n    static $inject = [\"toolbarUtils\", \"actionUtils\"];\n    static key: string = \"modulesEditAction\";\n\n    constructor(toolbarUtils, actionUtils) {\n        let actionModel: IActionModel = {\n            key: ModuleEdit.key,\n            type: ActionType.form,\n            title: \"修改模块\",\n            icon: \"edit\",\n            refreshList: true,\n            form: {\n                dataSchema: dataSchema,\n                formSchema: [{\n                    key: \"parentKey\",\n                    type: \"text\",\n                    readonly: true,\n                    htmlClass: \"md-block\"\n                }, {\n                    key: \"key\",\n                    type: \"text\",\n                    htmlClass: \"md-block\"\n                }, {\n                    key: \"title\",\n                    type: \"text\",\n                    htmlClass: \"md-block\"\n                }, {\n                    key: \"link\",\n                    type: \"text\",\n                    htmlClass: \"md-block\"\n                }, {\n                    key: \"icon\",\n                    type: \"text\",\n                    htmlClass: \"md-block\"\n                }, {\n                    key: \"description\",\n                    type: \"textarea\",\n                    htmlClass: \"md-block\"\n                }, {\n                    key: \"showed\",\n                    type: \"checkbox\"\n                }]\n            },\n            closeDialog: true,\n            interfaces: [{\n                key: \"modulesEdit\",\n                method: MethodType.PUT,\n                idFieldPath: \"/key\",\n                address: \"\",\n                port: null,\n                path: \"modules\",\n                isRestful: true\n            }]\n        };\n\n        return actionModel;\n    }\n}\n/**\n * 模块删除\n */\nclass ModuleDelete {\n    static key: string = \"modulesDeleteAction\";\n\n    constructor() {\n        let actionModel: IActionModel = {\n            key: ModuleDelete.key,\n            type: ActionType.confirm,\n            title: \"删除模块\",\n            icon: \"delete\",\n            refreshList: true,\n            confirm: {\n                confirmTitle: \"\",\n                confirmContent: \"确定要删除模块吗!\"\n            },\n            interfaces: [{\n                key: \"modulesDelete\",\n                method: MethodType.DELETE,\n                idFieldPath: \"/key\",\n                address: \"\",\n                port: null,\n                path: \"modules\",\n                isRestful: true\n            }]\n        };\n\n        return actionModel;\n    }\n}\n/**\n * 模块搜索\n */\nclass ModuleSearch {\n    static $inject = [\"toolbarUtils\", \"actionUtils\"];\n    static key: string = \"modulesSearchAction\";\n\n    constructor() {\n        let actionModel: IActionModel = {\n            key: ModuleSearch.key,\n            icon: \"search\",\n            type: ActionType.form,\n            title: \"模块搜索表单\",\n            form: {\n                dataSchema: dataSchema,\n                formSchema: [{\n                    key: \"key\",\n                    type: \"text\",\n                    required: false,\n                    placeHolder: \"KEY\",\n                    description: \"请输入key来进行搜索,不支持模糊查询\",\n                    showHints: true,\n                    copyValueTo: [\"/key/$eq\"],\n                    htmlClass: \"md-block\"\n                }, {\n                    key: \"showed\",\n                    type: \"select\",\n                    copyValueTo: [\"/showed/$eq\"],\n                    titleMap: [{value: null, name: \"全部\"}, {value: true, name: \"显示\"}, {value: false, name: \"不显示\"}],\n                    htmlClass: \"md-block\"\n                }]\n            }\n        };\n\n        return actionModel;\n    }\n}\n\nexport default (module: ng.IModule) => {\n    const services: Array<any> = [ModuleDelete, ModuleMenus, ModuleList, ModuleSearch, ModuleAdd, ModuleEdit];\n\n    _.each(services, (ser)=> {\n        module.service(ser.key, ser);\n    });\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/directives/action/schemas/modules.value.ts\n **/","import * as _ from 'lodash';\nimport {IActionModel, ActionType, IClientData} from \"../models/action.model\";\nimport {IInterfaceModel, MethodType} from \"../models/interface.model\";\nimport * as pointer from 'json-pointer';\n\nclass DialogController {\n    static $inject = [\"$scope\", \"item\", \"key\", \"submit\"];\n\n    constructor(private $scope, private item, private key, private submit) {\n        console.log(arguments);\n    }\n}\n\nclass Provider {\n    static $inject = [\"$rootScope\", \"$injector\", \"restUtils\", \"materialUtils\", \"$q\", \"$mdDialog\"];\n\n    static _name: string = 'fxAction';\n\n    constructor(private $rootScope: ng.IRootScopeService, private $injector: ng.auto.IInjectorService, private restUtils: fx.utils.restStatic, private mdUtils: fx.utils.materialStatic, private $q: ng.IQService, private $mdDialog: ng.material.IDialogService) {\n        return this;\n    }\n\n    $get: Array<string|Function> = [\"$injector\", ($injector)=> {\n        const service = $injector.invoke(Provider, this, null);\n\n        return service;\n    }];\n\n    /**\n     * 查找操作模型,如果本地没有,则去服务器中查找\n     * @param key  {String}  操作的KEY\n     * @returns {IPromise<T>}\n     */\n    getModel(key: string) {\n        const defer = this.$q.defer();\n\n        if (!key) {\n            defer.reject();\n        } else {\n\n            if (this.$injector.has(key)) {\n                defer.resolve(_.cloneDeepWith(this.$injector.get(key)));\n            } else {\n                this.mdUtils.showErrMsg(`没有找到key[${key}]!`);\n                defer.reject(key);\n            }\n        }\n\n        return defer.promise;\n    }\n\n    /**\n     * 查找操作模型数组,如果本地没有,则去服务器中查找\n     * @param keys\n     * @returns {IPromise<T>}\n     */\n    getModels(keys: Array<string|IActionModel>) {\n        const defer = this.$q.defer();\n        const actionModels = {};\n        const notFoundsKeys = [];\n        const promises: {[id: string]: ng.IPromise<any>} = {};\n\n        _.each(keys, (key)=> {\n            if (_.isObject(key)) {\n                actionModels[(key as IActionModel).key] = key;\n            }\n            else {\n                promises[key as string] = this.getModel(key as string).then((actionModel)=> {\n                    actionModels[key as string] = actionModel;\n                }).catch((key)=> {\n                    notFoundsKeys.push(key);\n                });\n            }\n        });\n\n        this.$q.all(promises).then(()=> {\n            defer.resolve(actionModels);\n        }).catch(()=> {\n            defer.resolve(actionModels);\n        });\n\n        return defer.promise;\n    }\n\n    /**\n     * 执行弹窗表单操作\n     * @param $event\n     * @param actionModel\n     * @param item\n     * @return {Promise<any>}\n     */\n    doActionModel($event: MouseEvent, actionModel: IActionModel, item?: any, callback?: Function): ng.IPromise<any> {\n        // 表单和多级表单操作,弹出dialog\n        // 确认框操作,弹出确认窗口\n        switch (actionModel.type) {\n            case ActionType.wizard:\n            case ActionType.form:\n                const templates = {\n                    [ActionType.form]: require(\"../tpls/form-dialog-action.jade\")(),\n                    [ActionType.wizard]: require(\"../tpls/wizard-dialog-action.jade\")()\n                };\n\n                return this.$mdDialog.show({\n                    targetEvent: $event,\n                    clickOutsideToClose: false,\n                    escapeToClose: false,\n                    fullscreen: true,\n                    locals: {\n                        'item': item || {},\n                        'key': actionModel.key,\n                        'submit': callback\n                    },\n                    controller: DialogController,\n                    controllerAs: \"dialogCtl\",\n                    template: templates[actionModel.type]\n                }).then(()=> {\n                    item = null;\n                });\n            case ActionType.confirm:\n                const confirm = this.$mdDialog.confirm()\n                    .title(actionModel.confirm.confirmTitle)\n                    .textContent(actionModel.confirm.confirmContent)\n                    .ariaLabel(actionModel.confirm.confirmTitle)\n                    .targetEvent($event)\n                    .ok(actionModel.confirm.confirmOk || \"确定\")\n                    .cancel(actionModel.confirm.confirmCancel || \"取消\");\n\n                return this.$mdDialog.show(confirm).then(()=> {\n                    return this.doAction(actionModel.key, item);\n                });\n        }\n\n        return null;\n    }\n\n    /**\n     * 检测表单是否合法\n     * @param $form\n     * @returns {boolean}\n     */\n    doFormCheck($form) {\n        if ($form) {\n            this.$rootScope.$broadcast(\"schemaFormValidate\");\n            if (!$form.$valid) {\n                console.log($form.$error);\n                this.mdUtils.showErrMsg(\"表单没有填写正确!\");\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * 处理接口的数据,数据的互相拷贝\n     * @param actionModel\n     * @param results\n     * @param clientData\n     * @return {IClientData}\n     */\n    doDealResult(actionModel: IActionModel, results: Object, clientData: IClientData) {\n        _.forEach(actionModel.interfaces, (iInterface)=> {\n            let result = results[iInterface.key];\n\n            if (result) {\n                // 接口数据拷贝到本地\n                _.forEach(iInterface.jpp.set, (val, key)=> {\n                    pointer.set(clientData, key, pointer.get(result, val));\n                });\n                // 本地数据的删除\n                _.forEach(iInterface.jpp.del, (val, key)=> {\n                    pointer.remove(clientData, key);\n                });\n            }\n        });\n\n        return clientData;\n    }\n\n    /**\n     * 获取接口列表,使用restangular处理接口地址,最后调用接口\n     * @param key\n     * @param queryData\n     * @param $form\n     * @returns {IPromise<TResult>}\n     */\n    doAction(key: string, queryData: Object|restangular.IElement, $form?: ng.IFormController) {\n        if (!this.doFormCheck($form)) {\n            return;\n        }\n\n        return this.getModel(key).then((actionModel: IActionModel)=> {\n            let interfacesRest: { [id: string]: ng.IPromise<any>; } = {};\n\n            // 获取接口列表,使用restangular处理接口地址,最后调用接口,返回promise\n            _.each(actionModel.interfaces, (interfaceModel: IInterfaceModel)=> {\n                // 获取接口的地址\n                let promise: ng.IPromise<any>,\n                    restAngular = interfaceModel.isRestful\n                        ? this.restUtils.getCustomRestful(interfaceModel.address, interfaceModel.port, interfaceModel.path)\n                        : this.restUtils.getCustom(interfaceModel.address, interfaceModel.port, interfaceModel.path);\n                // 判断接口请求类型,做提交操作\n                switch (interfaceModel.method) {\n                    case MethodType.POST:\n                        promise = restAngular.post(queryData, null);\n                        break;\n                    case MethodType.GET:\n                        promise = restAngular.customGET(null, queryData, null);\n                        break;\n                    case MethodType.PUT:\n                        promise = restAngular.customPUT(queryData, pointer.get(queryData, interfaceModel.idFieldPath));\n                        break;\n                    case MethodType.DELETE:\n                        promise = restAngular.customDELETE(pointer.get(queryData, interfaceModel.idFieldPath), null)\n                }\n                interfacesRest[interfaceModel.key] = promise;\n            });\n\n            return interfacesRest;\n        }).then((interfacesRest)=> {\n            // 返回promise\n            return this.$q.all(interfacesRest);\n        });\n    }\n}\n\nexport default (module: ng.IModule)=> {\n    module.provider(Provider._name, [Provider]);\n};\n\n\n/** WEBPACK FOOTER **\n ** ./src/directives/action/services/action.provider.ts\n **/","import * as pointer from 'json-pointer';\n\nfunction Provider() {\n\n    class Builder {\n        static $inject = [\"form\", \"fxAction\"];\n\n        searchText: string;\n        selected: any;\n        formData: any;\n\n        constructor(private form, private fxAction) {\n        }\n\n        init(modelValue, formData) {\n            this.formData = formData;\n        }\n\n        /**\n         * 当数据变化时，触发事件\n         * @param item 更改后的item\n         */\n        onChange(item) {\n\n            if (!item) {\n                return pointer.remove(this.formData, `/${this.form.key.join('/')}`);\n            }\n\n            this.selected = item;\n\n            if (this.form.acOptions.keyField) {\n                return pointer.set(this.formData, `/${this.form.key.join('/')}`, pointer.get(item, this.form.acOptions.keyField));\n            }\n\n            pointer.set(this.formData, `/${this.form.key.join('/')}`, item);\n        }\n\n        /**\n         * 查询数据，如果存在actionKey，则获取actionKey中的interface数据\n         * 查询接口，返回数据\n         * @returns {any}\n         */\n        query() {\n            let actionModel, clientData = {};\n            let filter = {};\n\n            if (this.form.acOptions.actionKey) {\n                // 设置搜索条件\n                pointer.set(filter, this.form.acOptions.search, this.searchText);\n\n                return this.fxAction.getModel(this.form.acOptions.actionKey).then((aModel)=> {\n                    actionModel = aModel;\n                    return this.fxAction.doAction(actionModel.key, filter);\n                }).then((results)=> {\n                    return this.fxAction.doDealResult(actionModel, results, clientData);\n                }).then((results)=> {\n                    return results[this.form.acOptions.dataField];\n                });\n            }\n\n            return this.form.data || [];\n        }\n    }\n\n    let config = {\n        fxAction: null,\n    };\n\n    /**\n     * autocomplete builder函数\n     * 初始化参数\n     * 初始化搜索功能\n     * @param args\n     */\n    this.builder = function (args) {\n        args.form.acOptions = _.extend({\n            textField: \"\",\n            keyField: \"\",\n            dataField: \"\",\n            noCache: false,\n            search: \"\",\n            actionKey: \"\"\n        }, args.form.acOptions || {});\n        args.form.boost = new Builder(args.form, config.fxAction);\n    };\n\n    this.$get = [\"fxAction\", function (fxAction) {\n        config.fxAction = fxAction;\n\n        return {};\n    }];\n}\n\nexport default (module: ng.IModule)=> {\n    module.provider('autoCompleteBuilder', [Provider]);\n};\n\n\n/** WEBPACK FOOTER **\n ** ./src/directives/action/services/autocomplete.provider.ts\n **/","\nfunction Provider() {\n    function Builder(args) {\n        const options = {\n            modes: ['tree', 'code', 'text'],\n            mode: 'code',\n            name: args.form.key.join('')\n        };\n\n        args.form.preferText = !!args.form.preferText;\n        args.form.jsonOptions = _.extend(args.form.jsonOptions || {}, options);\n    }\n\n    this.builder = Builder;\n    this.$get = [function () {\n        return {};\n    }];\n}\n\nexport default (module: ng.IModule)=> {\n    module.provider('jsonEditorBuilder', [Provider]);\n};\n\n\n/** WEBPACK FOOTER **\n ** ./src/directives/action/services/jsoneditor.provider.ts\n **/","import * as _ from \"lodash\";\nimport {IActionModel, IColumn} from \"../models/action.model\";\n\n\nclass Service {\n    public static _builderName: string = \"actionUtils\";\n    public static _toolbarName: string = \"toolbarActionUtils\";\n\n    /**\n     * 构建服务\n     * @type {()=>Service<T>[]}\n     */\n    public static builder: Array<string | Function> = [() => {\n\n        class Base<T> {\n            constructor(protected data?: T) {\n\n            }\n\n            columnUnitBuilder(unit: string, numeric: boolean|string = false) {\n                this.data = _.extend({}, this.data, {\n                    unit: unit,\n                    numeric: numeric\n                });\n\n                return this;\n            }\n\n            toValue(): T {\n                return this.data;\n            }\n        }\n\n        class Service<T> extends Base<T> {\n            constructor(protected data?: T) {\n                super(data);\n            }\n\n            /**\n             * 按钮配置生成方法\n             * @param title        按钮title\n             * @param cls          按钮className\n             * @param showTitle\n             * @returns {Service}\n             */\n            columnBuilder(content: string, title: string, name?: string, sort?: string, unit?: string): Object {\n                return new Service<IColumn>({\n                    content: content,\n                    title: title,\n                    name: name,\n                    sort: sort,\n                    unit: unit\n                });\n            }\n        }\n\n        return new Service();\n    }];\n\n    /**\n     * 工具栏服务\n     * @type {()=>Service[]}\n     */\n    public static toolbar: Array<string|Function> = ['fxAction', 'toolbarUtils', (fxAction, toolbarUtils)=> {\n        class Service {\n            constructor() {\n            }\n\n            initToolbar(key: string) {\n\n            }\n        }\n\n        return new Service();\n    }];\n}\n\nexport default (module: ng.IModule)=> {\n    module.service(Service._builderName, Service.builder);\n    module.service(Service._toolbarName, Service.toolbar);\n};\n\n\n/** WEBPACK FOOTER **\n ** ./src/directives/action/services/utils.service.ts\n **/","import * as tv4 from \"tv4\";\nimport * as validator from 'validator';\n\nclass CustomFormat {\n    constructor() {\n        // 验证email\n        tv4.addFormat(\"email\", (data, schema): any => {\n            if (validator.isEmail(data)) {\n                return true;\n            }\n\n            return 10000;\n        });\n\n        // 验证手机\n        tv4.addFormat(\"mobile\", (data, schema): any => {\n            if (validator.isMobilePhone(data, \"zh-CN\")) {\n                return null;\n            }\n\n            return 10003;\n        });\n\n        // 验证json\n        tv4.addFormat(\"json\", (data, schema): any => {\n            if (validator.isJSON(data)) {\n                return null;\n            }\n\n            return 10004;\n        });\n\n        tv4.addFormat(\"url-ip\", (data, schema): any=> {\n            if (validator.isURL(data) || validator.isIP(data)) {\n                return null;\n            }\n            return {code: 10005};\n        });\n        tv4.setErrorReporter(function (error, data, schema) {\n            return \"Error code: \" + error.code;\n        });\n        // tv4.defineError(\"FORMATURLIP\", 10005, \"ip或域名格式不正确\");\n    }\n}\n\nexport const customFormats = new CustomFormat();\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/directives/action/services/validator.custom.value.ts\n **/","/**\n * Created by NICK on 16/8/9.\n * 首页,用于生成页面框架\n */\n\nimport * as ngMaterial from 'angular-material';\nimport 'angular-ui-router';\nimport * as ngMaterialIcons from 'angular-material-icons';\nimport * as _ from 'lodash';\nimport {initRouter} from './router';\nimport materialService from '../../services/material.service';\nimport svgUtilsMod from '../../services/svg.service';\nimport toolbar from '../../directives/toolbar';\nimport sidemenu from '../../directives/sidemenu';\nimport 'expose?SVGMorpheus!exports?SVGMorpheus!svg-morpheus';\nimport {ActionType} from '../../directives/action/models/action.model';\n\nconst module = angular.module(\"homeModule\", [toolbar, sidemenu, svgUtilsMod, materialService, ngMaterial, 'ui.router', ngMaterialIcons]);\n\nmodule.config([\n    \"$stateProvider\",\n    \"$urlRouterProvider\",\n    \"$httpProvider\",\n    \"$mdThemingProvider\",\n    \"$locationProvider\",\n    \"mdSideMenuSectionsProvider\",\n    ($stateProvider, $urlRouterProvider, $httpProvider, $mdThemingProvider, $locationProvider, mdSideMenuSectionsProvider, cfpLoadingBarProvider: angular.loadingBar.ILoadingBarProvider) => {\n        // 初始化路由\n        initRouter($urlRouterProvider, $stateProvider);\n        // sideMenu初始化\n        mdSideMenuSectionsProvider.initWithTheme($mdThemingProvider);\n\n    }])\n    .run([\"$rootScope\", \"$state\", \"$q\", \"svgUtils\", ($rootScope: ng.IRootScopeService, $state, $q: ng.IQService, svgUtils: fx.utils.svgStatic)=> {\n        let state: {$$isFinish?: boolean,toState?: ng.ui.IState,toParams?: Object,options?: Object} = {};\n        // 处理路回调\n        let handleResolve = ()=> {\n            state.$$isFinish = true;\n            $state.go(state.toState.name, state.toParams, state.options);\n        };\n        // 注册路由更改事件\n        $rootScope.$on(\"$stateChangeStart\", (evt, toState, toParams, fromState, fromParams)=> {\n            console.log(\"$stateChangeStart\", evt, toState, toParams, fromState, fromParams);\n        });\n        // 处理首次加载的时候,加载2个svg文件\n        $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams, options) {\n            if (!state.$$isFinish) {\n                _.extend(state, {\n                    toState: toState,\n                    toParams: toParams,\n                    fromState: fromState,\n                    fromParams: fromParams,\n                    options: options\n                });\n                event.preventDefault();\n                $q.all({\n                    mdi: svgUtils.loadSvgUrl(__dirname + 'svgs/mdi.svg'),\n                    weibo: svgUtils.loadSvgUrl(__dirname + 'svgs/weibo.svg')\n                }).then(handleResolve, handleResolve);\n            }\n        });\n    }]);\n\n// 添加一个操作,显示ICON的KEY值表单\nmodule.value(\"iconInfoDetailForm\", {\n    key: \"iconInfoDetailForm\",\n    icon: \"search\",\n    type: ActionType.form,\n    title: \"ICON详情\",\n    form: {\n        dataSchema: {\n            type: \"object\",\n            properties: {\n                key: {\n                    type: \"string\",\n                    title: \"KEY\"\n                }\n            }\n        },\n        formSchema: [{\n            key: \"key\",\n            type: \"string\",\n            placeHolder: \"KEY\",\n            htmlClass: \"md-block\"\n        }]\n    }\n});\n\nexport default module.name;\n\n\n/** WEBPACK FOOTER **\n ** ./src/pages/home/index.ts\n **/"],"sourceRoot":""}