{"version":3,"sources":["webpack:///./src/pages/page/index.ts?3a77","webpack:///./src/services/rest.service.ts?9091","webpack:///./src/directives/action/module.ts?130b","webpack:///./src/pages/passport/index.ts?7737","webpack:///./src/pages/salt/index.ts?894c"],"names":[],"mappings":"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","file":"0.e2e3312d916c0a274df8.hot-update.js","sourcesContent":["/**\n * Created by NICK on 16/8/16.\n * page页面,用户生成列表页和表单操作\n */\n\nimport * as ngMaterial from 'angular-material';\nimport uiRouter from 'angular-ui-router';\nimport * as ngMaterialIcons from 'angular-material-icons';\nimport * as mdDataTable from 'angular-material-data-table';\n\nimport { initRouter } from './router';\nimport materialServiceMod from '../../services/material.service';\nimport restRegMod from '../../services/rest.service';\nimport actionDir from '../../directives/action';\nimport dyCompileMod from '../../directives/dycompile';\n\nimport 'angular-gridster';\n\nimport 'angular-gridster.css';\nimport './index.scss';\n\nconst module = angular.module(\"pageModule\", [ngMaterialIcons, dyCompileMod, actionDir, mdDataTable, ngMaterial as string, 'ui.router', 'gridster', materialServiceMod, restRegMod]);\n\nmodule.config([\n    \"$stateProvider\",\n    \"$urlRouterProvider\",\n    ($stateProvider, $urlRouterProvider) => {\n        // 初始化路由\n        initRouter($urlRouterProvider, $stateProvider);\n    }])\n    .run([\"$state\", \"restUtils\", \"materialUtils\", ($state, restUtils: fx.utils.restStatic, materialUtils: fx.utils.materialStatic) => {\n        // 添加全局错误拦截器\n        restUtils.setConfig((restAngularConfigure: restangular.IProvider) => {\n            restAngularConfigure.setErrorInterceptor((response: restangular.IResponse) => {\n                if (response.status !== 401) {\n                    response.data && materialUtils.showErrMsg(response.data.msg);\n                }\n            });\n        });\n    }]);\n\nexport default `${module.name}`;\n\n\n/** WEBPACK FOOTER **\n ** ./src/pages/page/index.ts\n **/","/**\n * Created by NICK on 16/8/12.\n */\n\nimport * as _ from \"lodash\";\nimport 'restangular';\n\nclass Service {\n    public static _name: string = \"restUtils\";\n\n    public static provider: Array<string | Function> = [\"$rootScope\", \"Restangular\", ($rootScope, restangular: restangular.IService) => {\n        class Service {\n\n            private rest;\n            private restAngularConfig: restangular.IProvider;\n\n            public params: Object;\n            public headers: Object;\n\n            constructor(baseUrl: string = \"\") {\n                this.params = {};\n                this.headers = {};\n\n                restangular.setBaseUrl(baseUrl);\n                this.rest = restangular.withConfig((restAngularConfig: restangular.IProvider) => {\n                    this.restAngularConfig = restAngularConfig;\n                    // // this.restAngularConfig.setFullResponse(true);\n                    // this.restAngularConfig.addResponseInterceptor((data: any, operation: string, what: string, url: string, response: restangular.IResponse, deferred: angular.IDeferred<any>)=> {\n                    //     console.log(arguments);\n                    //\n                    //     return data;\n                    // });\n                });\n            }\n\n            /**\n             * 获取不是restful风格的接口信息\n             * @param address\n             * @param port\n             * @param path\n             * @param params\n             */\n            getCustom(address: string, port: number = 0, path: string): restangular.ICollection {\n                let baseUrl = \"\";\n                let restangu: restangular.ICollection;\n\n                if (address) {\n                    baseUrl = `${address}`;\n                }\n                if (address && port) {\n                    baseUrl += `:${port}`;\n                }\n                if (!path) {\n                    console.error(`path不能为空!`);\n\n                    return null;\n                }\n                if (baseUrl) {\n                    restangu = this.rest.oneUrl(\"custom\", baseUrl);\n                } else {\n                    restangu = this.rest;\n                }\n\n                _.each(path.split(\"/\"), (p) => {\n                    restangu = restangu.all(p);\n                });\n\n                return restangu;\n            }\n\n            getCustomRestful(address: string, port: number = 0, path: string): restangular.ICollection {\n                let baseUrl = \"\";\n\n                if (address) {\n                    baseUrl = `${address}`;\n                }\n                if (address && port) {\n                    baseUrl += `:${port}`;\n                }\n\n                return this.getRestAngular(path, true, baseUrl);\n            }\n\n            /**\n             * 设置restangular的参数\n             * @param fn  {Function(configurer)}   设置方法\n             * @returns {any}\n             */\n            setConfig(fn: Function) {\n                if (_.isFunction(fn)) {\n                    return fn(this.restAngularConfig);\n                }\n            }\n\n            /**\n             * 获取一个restangular对象\n             * @param router    {String} 路由\n             * @param fullRes   {boolean} 是否是fullres\n             * @param baseUrl\n             * @returns {any}\n             */\n            getRestAngular(router: string, unique: boolean = true, baseUrl: string = \"\"): restangular.IElement {\n                let restAngular;\n                let restAngularP = unique ? this.rest : restangular;\n\n                if (baseUrl) {\n                    restAngular = restAngularP.oneUrl(router, baseUrl);\n                }\n                restAngular = (restAngular || restAngularP).all(router);\n\n                return restAngular;\n            }\n        }\n\n        return new Service(\"\");\n    }];\n}\n\nconst module = angular.module(\"fxRestModule\", [\"restangular\"]);\n\nmodule.service(Service._name, Service.provider);\n\nexport default `${module.name}`;\n\n\n/** WEBPACK FOOTER **\n ** ./src/services/rest.service.ts\n **/","\nimport * as angular from 'angular';\nimport * as ngMaterial from 'angular-material';\nimport restSvrMod from '../../services/rest.service';\n\nimport 'expose?JSONEditor!jsoneditor';\nimport 'ng-jsoneditor';\nimport 'angular-schema-form';\nimport 'angular-schema-form-ng-material';\n\nconst _name = \"fxAction\";\nexport const module = angular.module(`${_name}Module`, [ngMaterial, restSvrMod, \"schemaForm\", \"ng.jsoneditor\"])\n    .config([\"sfErrorMessageProvider\", (sfErrorMessageProvider) => {\n        // 处理默认的错误信息\n        sfErrorMessageProvider.setDefaultMessage(\"302\", \"[{{title}}]是必填项\");\n        sfErrorMessageProvider.setDefaultMessage(\"103\", \"[{{title}}]超过了最大值{{schema.maximum}}\");\n        sfErrorMessageProvider.setDefaultMessage(\"101\", \"[{{title}}]小于最小值{{schema.minimum}}\");\n        sfErrorMessageProvider.setDefaultMessage(\"200\", \"[{{title}}]字符长度小于最小值({{schema.minLength}})\");\n        sfErrorMessageProvider.setDefaultMessage(\"201\", \"[{{title}}]字符长度大于最大值({{schema.maxLength}})\");\n        sfErrorMessageProvider.setDefaultMessage(\"400\", \"数组长度不正确，{{schema.minItems||0}}-{{schema.maxItems||'∞'}}\");\n        sfErrorMessageProvider.setDefaultMessage(\"500\", \"格式不正确\");\n    }])\n    .config([\"sfBuilderProvider\", \"schemaFormDecoratorsProvider\", \"jsonEditorBuilderProvider\", \"autoCompleteBuilderProvider\", \"layoutBuilderProvider\", (sfBuilderProvider, schemaFormDecoratorsProvider, jsonEditorBuilder, autoCompleteBuilder, layoutBuilder) => {\n        // 添加自定义的表单组件\n        // jsoneditor--schema-form组件化\n        schemaFormDecoratorsProvider.defineAddOn(\n            'materialDecorator',\n            'jeditor',\n            \"./decorators/jsoneditor.jade\",\n            sfBuilderProvider.stdBuilders.concat(jsonEditorBuilder.builder)\n        );\n        // card--schema-form组件化\n        schemaFormDecoratorsProvider.defineAddOn(\n            'materialDecorator',\n            'card',\n            \"./decorators/card.jade\",\n            [sfBuilderProvider.builders.sfField, sfBuilderProvider.builders.condition, sfBuilderProvider.builders.transclusion]\n        );\n        // autocomplete--schema-form组件化\n        schemaFormDecoratorsProvider.defineAddOn(\n            'materialDecorator',\n            'autocomplete-1',\n            \"./decorators/autocomplete-1.jade\",\n            [sfBuilderProvider.builders.sfField, sfBuilderProvider.builders.ngModel, layoutBuilder.builder, sfBuilderProvider.builders.condition, sfBuilderProvider.builders.transclusion, autoCompleteBuilder.builder]\n        );\n    }])\n    .run([\"$templateCache\", \"autoCompleteBuilder\", ($templateCache: ng.ITemplateCacheService) => {\n        // 打包工具的原因,只能把模板字符串写入cache中\n        $templateCache.put('./decorators/jsoneditor.jade', require(\"./decorators/jsoneditor.jade\")());\n        $templateCache.put('./decorators/card.jade', require(\"./decorators/card.jade\")());\n        $templateCache.put('./decorators/autocomplete-1.jade', require(\"./decorators/autocomplete-1.jade\")());\n        $templateCache.put('./decorators/section-1.jade', require(\"./decorators/section-1.jade\")());\n    }]);\n\nexport default `${module.name}`;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/directives/action/module.ts\n **/","/**\n * Created by NICK on 16/8/16.\n * page页面,用户生成列表页和表单操作\n */\n\nimport * as ngMaterial from 'angular-material';\nimport uiRouter from 'angular-ui-router';\nimport {initRouter} from './router';\nimport materialServiceMod from '../../services/material.service';\nimport restRegMod from '../../services/rest.service';\nimport actionDir from '../../directives/action';\n\nimport loginValFunc from './services/login.value';\n\nimport \"restangular\";\n\nconst module = angular.module(\"loginModule\", [ngMaterial as string, 'ui.router', materialServiceMod, restRegMod, actionDir, 'restangular']);\n\nmodule.config([\n    \"$stateProvider\",\n    \"$urlRouterProvider\",\n    ($stateProvider, $urlRouterProvider) => {\n        // 初始化路由\n        initRouter($urlRouterProvider, $stateProvider);\n    }])\n    .run([\"$state\", \"restUtils\", ($state, restUtils: fx.utils.restStatic)=> {\n        // 添加全局错误拦截器\n        restUtils.setConfig((restAngularConfigure: restangular.IProvider)=> {\n            restAngularConfigure.setErrorInterceptor((response: restangular.IResponse)=> {\n                if (response.status === 401 && !response.config[\"salt\"]) {\n                    !$state.is(\"passport.login\") && $state.go(\"passport.login\");\n                    return false;\n                }\n                return true;\n            });\n        });\n    }]);\n\nloginValFunc(module);\n\nexport default `${module.name}`;\n\n\n/** WEBPACK FOOTER **\n ** ./src/pages/passport/index.ts\n **/","/**\n * Created by NICK on 16/8/16.\n * page页面,用户生成列表页和表单操作\n */\n\nimport * as ngMaterial from 'angular-material';\nimport uiRouter from 'angular-ui-router';\nimport * as ngMaterialIcons from 'angular-material-icons';\nimport { initRouter } from './router';\nimport materialServiceMod from '../../services/material.service';\nimport restRegMod from '../../services/rest.service';\nimport apiValueFunc from './services/salt.api.value';\n\nlet module: ng.IModule = angular.module(\"saltModule\", [ngMaterialIcons, ngMaterial as string, 'ui.router', materialServiceMod, restRegMod]);\n\nmodule.config([\n    \"$stateProvider\",\n    \"$urlRouterProvider\",\n    \"RestangularProvider\",\n    ($stateProvider, $urlRouterProvider, RestangularProvider) => {\n        // 初始化路由\n        initRouter($urlRouterProvider, $stateProvider);\n        // 添加全局拦截器拦截器\n        RestangularProvider.setDefaultHeaders({\n            'Content-Type': 'application/json'\n        });\n        RestangularProvider.setDefaultHttpFields({\n            'withCredentials': true\n        });\n    }])\n    .run([\"$rootScope\", \"$state\", \"restUtils\", \"materialUtils\", ($rootScope: ng.IRootScopeService, $state, restUtils: fx.utils.restStatic, materialUtils: fx.utils.materialStatic) => {\n        // 添加全局拦截器拦截器\n        restUtils.setConfig((restAngularConfigure: restangular.IProvider) => {\n            restAngularConfigure.addResponseInterceptor((data, operation, what, url, response: restangular.IResponse, deferred) => {\n                // 如果是登陆，则监听ws\n                if (response.status === 200 && response.config[\"salt\"] && what === \"login\") {\n                    $rootScope.$emit(\"saltLoginEvent\", data);\n                }\n\n                return data;\n            });\n            restAngularConfigure.setErrorInterceptor((response: restangular.IResponse) => {\n                if (response.status === 401 && response.config[\"salt\"]) {\n                    materialUtils.showErrMsg(\"SALT未登录\");\n\n                    return false;\n                }\n                return true;\n            });\n        });\n    }]);\n\napiValueFunc(module);\n\nexport default `${module.name}`;\n\n\n/** WEBPACK FOOTER **\n ** ./src/pages/salt/index.ts\n **/"],"sourceRoot":""}