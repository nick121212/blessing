{"version":3,"sources":["webpack:///./src/directives/angular-schema-form-material/material-decorator.js?1a15"],"names":[],"mappings":"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,sBAAqB,sEAAsE;AAC3F,sBAAqB,oDAAoD;AACzE,oBAAmB,sEAAsE;AACzF,wBAAuB,oDAAoD;AAC3E,wBAAuB,uEAAuE;AAC9F,sBAAqB,qEAAqE;AAC1F,qBAAoB,8DAA8D;AAClF,UAAS;;AAET;AACA,qEAAoE,YAAY;AAChF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,+GAA8G;AAC9G;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,kCAAiC,KAAK,KAAK;AAC3C,iCAAgC,IAAI,KAAK;AACzC;;AAEA,4BAA2B,mCAAmC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6GAA4G;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,oDAAmD,6CAA6C;AAChG;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT,4BAA2B,sBAAsB;AACjD;AACA,wCAAuC,0CAA0C;AACjF;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB,cAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;;AAEA;AACA,QAAO;AACP;AACA;AACA,EAAC","file":"0.d4cd0f44a392ab7923b8.hot-update.js","sourcesContent":["angular.module(\"schemaForm\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"decorators/material/actions-trcl.html\",\"<div class=\\\"btn-group schema-form-actions {{form.htmlClass}}\\\" ng-transclude=\\\"\\\"></div>\");\n$templateCache.put(\"decorators/material/actions.html\",\"<section layout=\\\"row\\\" class=\\\"btn-group schema-form-actions {{form.htmlClass}}\\\"></section>\");\n$templateCache.put(\"decorators/material/array.html\",\"<div class=\\\"schema-form-array {{form.htmlClass}}\\\" sf-field-model=\\\"sf-new-array\\\" sf-new-array=\\\"\\\"><md-toolbar class=\\\"md-default\\\"><div class=\\\"md-toolbar-tools\\\"><h2 flex=\\\"\\\">{{ ::form.title }}</h2><md-button ng-hide=\\\"form.readonly || form.add === null\\\" ng-click=\\\"appendToArray()\\\" class=\\\"md-icon-button {{ form.style.add || \\'btn-default\\' }}\\\"><md-tooltip>新增</md-tooltip><md-icon><ng-md-icon icon=\\\"add_circle_outline\\\"></ng-md-icon></md-icon></md-button></div></md-toolbar><md-content ng-model=\\\"modelArray\\\" flex=\\\"\\\" layout-padding=\\\"\\\" class=\\\"md-whiteframe-1dp\\\"><md-list ui-sortable=\\\"form.sortOptions\\\"><md-list-item layout=\\\"row\\\" ng-repeat-start=\\\"item in $$value$$ track by $index\\\" sf-field-model=\\\"ng-repeat-start\\\" form=\\\"copyWithIndex($index)\\\" schema-form-array-items=\\\"\\\"><md-button flex-order=\\\"2\\\" ng-hide=\\\"form.readonly || form.remove === null\\\" ng-click=\\\"deleteFromArray($index)\\\" class=\\\"md-icon-button\\\" aria-label=\\\"Delete\\\"><md-tooltip>删除</md-tooltip><md-icon><ng-md-icon icon=\\\"close-circle-outline\\\"></ng-md-icon></md-icon></md-button></md-list-item><md-divider ng-repeat-end=\\\"\\\"></md-divider></md-list></md-content><md-input-container style=\\\"margin-top:0;\\\" class=\\\"md-block\\\" md-is-error=\\\"ngModel.$error && ngModel.$invalid\\\"><input class=\\\"ng-hide\\\" name=\\\"{{::form.key|sfCamelKey}}\\\" ng-model=\\\"modelArray\\\" sf-changed=\\\"form\\\"><div ng-messages=\\\"ngModel.$error\\\" aria-live=\\\"assertive\\\"><div sf-message=\\\"\\\" ng-message=\\\"\\\" ng-class=\\\"{\\'fx-invalid\\':ngModel.$invalid}\\\"></div></div><div class=\\\"hint md-char-counter\\\" ng-if=\\\"form.showHints\\\" ng-bind=\\\"form.description\\\"></div></md-input-container></div>\");\n$templateCache.put(\"decorators/material/autocomplete.html\",\"<md-input-container class=\\\"form-group no-errors schema-form-autocomplete {{form.htmlClass}}\\\" md-is-error=\\\"ngModel.$error && ngModel.$invalid\\\" sf-layout=\\\"\\\"><md-autocomplete flex=\\\"\\\" style=\\\"height: 48px;\\\" ng-disabled=\\\"form.readonly\\\" ng-model=\\\"$$value$$\\\" sf-autocomplete=\\\"\\\" sf-field-model=\\\"replaceAll\\\" ng-init=\\\"autoData={};form.init($$value$$,autoData,arrayIndex)\\\" md-no-cache=\\\"form.noCache\\\" md-selected-item=\\\"autoData.selected\\\" md-search-text=\\\"autoData.searchText\\\" md-selected-item-change=\\\"form.onChange(item, form, model, modelArray, arrayIndex)\\\" md-items=\\\"item in form.query(autoData.searchText,modelArray,arrayIndex,$parent)\\\" md-item-text=\\\"item[form.textField]\\\" md-floating-label=\\\"{{ form.title }}\\\" placeholder=\\\"{{ form.placeholder }}\\\" md-menu-class=\\\"autocomplete-custom-template\\\"><md-item-template><span md-highlight-text=\\\"searchText\\\">{{item.name}}</span></md-item-template><md-not-found>No matches found</md-not-found></md-autocomplete><input class=\\\"ng-hide\\\" name=\\\"{{::form.key|sfCamelKey}}\\\" sf-changed=\\\"form\\\" sf-field-model=\\\"\\\" schema-validate=\\\"form\\\"><div ng-messages=\\\"ngModel.$error\\\" aria-live=\\\"assertive\\\"><div sf-message=\\\"\\\" ng-message=\\\"\\\"></div></div><div class=\\\"hint md-char-counter\\\" ng-if=\\\"form.showHints\\\" ng-bind=\\\"form.description\\\"></div></md-input-container>\");\n$templateCache.put(\"decorators/material/card-content.html\",\"<md-card-content class=\\\"schema-form-card-content {{form.htmlClass}}\\\"></md-card-content>\");\n$templateCache.put(\"decorators/material/card.html\",\"<md-card class=\\\"schema-form-card {{form.htmlClass}}\\\"></md-card>\");\n$templateCache.put(\"decorators/material/checkbox.html\",\"<md-input-container class=\\\"checkbox schema-form-checkbox {{::form.htmlClass}}\\\" md-is-error=\\\"!$root.isEmptyObject(ngModel.$error)\\\"><md-checkbox sf-field-model=\\\"\\\" ng-model=\\\"$$value$$\\\" ng-disabled=\\\"form.readonly\\\" schema-validate=\\\"form\\\" sf-changed=\\\"form\\\" ng-model-options=\\\"form.ngModelOptions\\\" ng-true-value=\\\"{{form.trueValue || true}}\\\" ng-false-value=\\\"{{form.falseValue || false}}\\\" ng-class=\\\"form.fieldHtmlClass\\\" name=\\\"{{::form.key|sfCamelKey}}\\\" aria-label=\\\"{{::form.title}}\\\"><span>{{::form.title}}</span></md-checkbox><div ng-messages=\\\"ngModel.$error\\\" class=\\\"md-input-messages-animation\\\"><div sf-message=\\\"\\\" ng-message=\\\"\\\"></div></div><div class=\\\"md-char-counter\\\">{{ form.description }}</div></md-input-container>\");\n$templateCache.put(\"decorators/material/checkboxes.html\",\"<div sf-array=\\\"form\\\" sf-field-model=\\\"\\\" class=\\\"form-group schema-form-checkboxes {{::form.htmlClass}}\\\" ng-class=\\\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\\\" sf-messages=\\\"\\\"><label class=\\\"control-label\\\" ng-show=\\\"showTitle()\\\">{{::form.title}}</label><div class=\\\"checkbox\\\" ng-repeat=\\\"val in titleMapValues track by $index\\\"><md-checkbox ng-model=\\\"titleMapValues[$index]\\\" sf-changed=\\\"form\\\" ng-disabled=\\\"::form.readonly\\\" name=\\\"{{::form.key|sfCamelKey}}\\\" ng-true-value=\\\"true\\\" ng-false-value=\\\"false\\\" aria-label=\\\"{{::form.title}}\\\">{{::form.titleMap[$index].name}}</md-checkbox></div></div>\");\n$templateCache.put(\"decorators/material/chips.html\",\"<md-input-container class=\\\"form-group schema-form-chips {{form.htmlClass}}\\\" schema-form-array-items=\\\"\\\" md-no-float=\\\"true\\\" md-is-error=\\\"ngModel.$error && ngModel.$invalid\\\"><md-chips sf-field-model=\\\"\\\" readonly=\\\"form.readonly\\\" md-add-on-blur=\\\"form.addOnBlur\\\" class=\\\"no-errors\\\" name=\\\"{{::form.key|sfCamelKey}}\\\" placeholder=\\\"{{::form.title}}\\\"><md-chip-template><strong ng-if=\\\"!form.template\\\">{{$chip}}</strong></md-chip-template></md-chips><div class=\\\"errors\\\" ng-model=\\\"modelArray\\\" schema-validate=\\\"form\\\" ng-messages=\\\"ngModel.$error\\\" aria-live=\\\"assertive\\\"><div sf-message=\\\"\\\" ng-message=\\\"\\\"></div></div><div class=\\\"hint md-char-counter\\\" ng-if=\\\"form.showHints\\\" ng-bind=\\\"form.description\\\"></div></md-input-container>\");\n$templateCache.put(\"decorators/material/date.html\",\"<div class=\\\"schema-form-date {{::form.htmlClass}}\\\"><label ng-show=\\\"showTitle()\\\" for=\\\"{{::form.key|sfCamelKey}}\\\">{{::form.title}}</label><md-datepicker sf-field-model=\\\"\\\" sf-changed=\\\"form\\\" schema-validate=\\\"form\\\" sf-type-parser=\\\"form.schema\\\" id=\\\"{{::form.key|sfCamelKey}}\\\" ng-show=\\\"::form.key\\\" ng-class=\\\"::form.fieldHtmlClass\\\" ng-disabled=\\\"::form.readonly\\\" md-placeholder=\\\"Enter date\\\" sf-messages=\\\"\\\"></md-datepicker></div>\");\n$templateCache.put(\"decorators/material/default.html\",\"<md-input-container class=\\\"schema-form-{{::form.type}} {{::form.htmlClass}}\\\" md-is-error=\\\"ngModel.$error && ngModel.$invalid && ngModel.$dirty\\\" sf-layout=\\\"\\\" sf-material-class=\\\"md-input-has-value\\\"><label ng-show=\\\"showTitle()\\\" for=\\\"{{::form.key|sfCamelKey}}\\\">{{::form.title}}</label><md-icon ng-if=\\\"form.icon\\\"><ng-md-icon icon=\\\"{{ form.icon.leftIcon }}\\\" ng-style=\\\"form.icon.style\\\"></ng-md-icon></md-icon><input sf-field-model=\\\"replaceAll\\\" type=\\\"{{::form.type}}\\\" step=\\\"any\\\" compare-to=\\\"{{form.compare.to}}\\\" compare-opt=\\\"{{form.compare.opt}}\\\" compare-type=\\\"{{form.compare.type}}\\\" compare-model=\\\"model\\\" compare-form=\\\"copyWithIndex($scope.$index)||form\\\" ng-model=\\\"$$value$$\\\" sf-changed=\\\"form\\\" placeholder=\\\"{{form.placeholder}}\\\" id=\\\"{{::form.key|sfCamelKey}}\\\" ng-class=\\\"::form.fieldHtmlClass\\\" ng-disabled=\\\"::form.readonly\\\" schema-validate=\\\"form\\\" name=\\\"{{::form.key|sfCamelKey}}\\\" aria-describedby=\\\"{{::form.key|sfCamelKey}}Status\\\"><div ng-messages=\\\"ngModel.$error\\\" aria-live=\\\"assertive\\\"><div sf-message=\\\"\\\" ng-message=\\\"\\\"></div></div><div class=\\\"hint md-char-counter\\\" ng-if=\\\"form.showHints\\\" ng-bind=\\\"form.description\\\"></div></md-input-container>\");\n$templateCache.put(\"decorators/material/fieldset-trcl.html\",\"<fieldset ng-disabled=\\\"form.readonly\\\" class=\\\"standard {{form.htmlClass}}\\\" flex=\\\"\\\"><legend ng-show=\\\"form.title\\\">{{ form.title }}</legend><div ng-transclude=\\\"\\\"></div></fieldset>\");\n$templateCache.put(\"decorators/material/fieldset.html\",\"<fieldset ng-disabled=\\\"form.readonly\\\" class=\\\"standard {{form.htmlClass}}\\\" flex=\\\"\\\"><legend ng-show=\\\"form.title\\\">{{ form.title }}</legend></fieldset>\");\n$templateCache.put(\"decorators/material/help.html\",\"<div class=\\\"helpvalue schema-form-helpvalue {{form.htmlClass}}\\\" ng-bind-html=\\\"form.helpvalue\\\"></div>\");\n$templateCache.put(\"decorators/material/radio-buttons.html\",\"<div class=\\\"form-group schema-form-radiobuttons {{form.htmlClass}}\\\" ng-class=\\\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\\\" sf-layout=\\\"\\\" sf-messages=\\\"\\\"><div><label class=\\\"control-label\\\" ng-show=\\\"showTitle()\\\">{{form.title}}</label></div><section layout=\\\"row\\\" layout-sm=\\\"column\\\" layout-align=\\\"center center\\\"><md-input-container ng-repeat=\\\"item in form.titleMap\\\"><md-button type=\\\"button\\\" class=\\\"group md-raised\\\" sf-field-model=\\\"replaceAll\\\" ng-model=\\\"$$value$$\\\" sf-changed=\\\"form\\\" ng-class=\\\"{\\'md-primary\\': ($$value$$ == item.value)}\\\" ng-disabled=\\\"form.readonly\\\" ng-model-options=\\\"form.ngModelOptions\\\" schema-validate=\\\"form\\\" ng-value=\\\"item.value\\\" ng-click=\\\"$$value$$ = item.value\\\" name=\\\"{{form.key.join(\\'.\\')}}\\\"><span ng-bind-html=\\\"item.name\\\"></span></md-button></md-input-container></section></div>\");\n$templateCache.put(\"decorators/material/radios-inline.html\",\"<div class=\\\"form-group schema-form-radios-inline {{form.htmlClass}}\\\" ng-class=\\\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\\\" sf-layout=\\\"\\\" sf-messages=\\\"\\\"><label class=\\\"control-label\\\" ng-show=\\\"showTitle()\\\">{{form.title}}</label><md-radio-group layout=\\\"row\\\" sf-field-model=\\\"replaceAll\\\" ng-model=\\\"$$value$$\\\" class=\\\"{{form.fieldHtmlClass}}\\\" ng-class=\\\"{ active: item.value === $$value$$ }\\\" sf-changed=\\\"form\\\" schema-validate=\\\"form\\\" ng-disabled=\\\"form.readonly\\\" name=\\\"{{form.key.join(\\'.\\')}}\\\"><md-radio-button ng-repeat=\\\"item in form.titleMap\\\" ng-value=\\\"item.value\\\"><span ng-bind-html=\\\"item.name\\\"></span></md-radio-button></md-radio-group></div>\");\n$templateCache.put(\"decorators/material/radios.html\",\"<div class=\\\"form-group schema-form-radios {{form.htmlClass}}\\\" ng-class=\\\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\\\"><label class=\\\"control-label\\\" ng-show=\\\"showTitle()\\\" aria-label=\\\"{{form.title}}\\\" layout=\\\"row\\\">{{form.title}}</label><div><md-radio-group sf-field-model=\\\"\\\" sf-changed=\\\"form\\\" ng-disabled=\\\"form.readonly\\\" name=\\\"{{form.key.join(\\'.\\')}}\\\" sf-layout=\\\"\\\" sf-messages=\\\"\\\"><md-radio-button ng-repeat=\\\"item in form.titleMap\\\" ng-value=\\\"item.value\\\" class=\\\"{{form.fieldHtmlClass}}\\\" sf-field-model=\\\"ng-class\\\" ng-class=\\\"{ active: item.value === $$value$$ }\\\"><span ng-bind-html=\\\"item.name\\\"></span></md-radio-button></md-radio-group></div></div>\");\n$templateCache.put(\"decorators/material/section.html\",\"<md-content class=\\\"schema-form-section {{::form.htmlClass}}\\\" sf-layout=\\\"\\\"></md-content>\");\n$templateCache.put(\"decorators/material/select.html\",\"<md-input-container class=\\\"form-group {{::form.htmlClass}} schema-form-select\\\" md-is-error=\\\"ngModel.$error && ngModel.$invalid\\\" sf-layout=\\\"\\\" sf-material-class=\\\"md-input-has-value\\\"><label ng-show=\\\"::showTitle()\\\">{{::form.title}}</label><md-select sf-field-model=\\\"\\\" schema-validate=\\\"form\\\"><md-optgroup ng-repeat-start=\\\"(key, opt) in form.getOptions(form, evalExpr) | orderBy:\\'group\\' as optGroups\\\" ng-if=\\\"opt.group && opt.group != optGroups[key-1].group\\\" label=\\\"{{::opt.group}}\\\" aria-label=\\\"{{::opt.group}}\\\"><md-option ng-repeat=\\\"(key, filtered) in form.getOptions(form, evalExpr) | filter: {group: opt.group} | orderBy:\\'name\\' as opts\\\" ng-value=\\\"::filtered.value\\\" aria-label=\\\"{{::filtered.name}}\\\">{{::filtered.name}}</md-option></md-optgroup><md-option ng-if=\\\"!opt.group\\\" ng-value=\\\"::opt.value\\\" ng-repeat-end=\\\"\\\">{{::opt.name}}</md-option></md-select><div class=\\\"md-errors-spacer\\\"></div><div ng-messages=\\\"ngModel.$error\\\" aria-live=\\\"assertive\\\"><div sf-message=\\\"\\\" ng-message=\\\"\\\"></div></div><div class=\\\"hint md-char-counter\\\" ng-if=\\\"form.showHints\\\" ng-bind=\\\"form.description\\\"></div></md-input-container>\");\n$templateCache.put(\"decorators/material/slider.html\",\"<md-input-container class=\\\"schema-form-slider {{form.htmlClass}}\\\"><label ng-show=\\\"showTitle()\\\" for=\\\"{{::form.key|sfCamelKey}}\\\">{{::form.title}}</label><md-slider sf-field-model=\\\"\\\" flex=\\\"\\\" id=\\\"{{::form.key|sfCamelKey}}\\\" min=\\\"0\\\" max=\\\"255\\\" aria-label=\\\"blue\\\"></md-slider></md-input-container>\");\n$templateCache.put(\"decorators/material/submit.html\",\"<section class=\\\"schema-form-submit {{form.htmlClass}}\\\" sf-messages=\\\"\\\"><md-button class=\\\"md-raised {{ form.style || \\'md-primary\\' }} {{form.fieldHtmlClass}}\\\" type=\\\"{{::form.type}}\\\" ng-disabled=\\\"form.readonly\\\" aria-label=\\\"{{::form.title}}\\\"><md-tooltip ng-if=\\\"::form.tip\\\">{{::form.tip}}</md-tooltip>{{::form.title}}</md-button></section>\");\n$templateCache.put(\"decorators/material/switch.html\",\"<md-input-container class=\\\"schema-form-switch {{::form.htmlClass}}\\\"><md-switch sf-field-model=\\\"\\\" sf-changed=\\\"form\\\" sf-type-parser=\\\"form.schema\\\" sf-messages=\\\"\\\" schema-validate=\\\"form\\\" id=\\\"{{::form.key|sfCamelKey}}\\\" aria-label=\\\"{{form.title}}\\\" ng-show=\\\"::form.key\\\" ng-class=\\\"form.fieldHtmlClass\\\" ng-disabled=\\\"::form.readonly\\\"><span ng-show=\\\"showTitle()\\\" for=\\\"{{::form.key|sfCamelKey}}\\\">{{::form.title}}</span></md-switch></md-input-container>\");\n$templateCache.put(\"decorators/material/tabarray.html\",\"<div class=\\\"schema-form-array {{form.htmlClass}}\\\" name=\\\"{{::form.key|sfCamelKey}}\\\" sf-field-model=\\\"sf-new-array\\\" sf-new-array=\\\"\\\"><md-toolbar class=\\\"md-warn\\\"><div class=\\\"md-toolbar-tools\\\"><h2 flex=\\\"\\\">{{ ::form.title }}</h2><md-button ng-hide=\\\"form.readonly || form.add === null\\\" ng-click=\\\"appendToArray()\\\" class=\\\"md-icon-button {{ form.style.add || \\'btn-default\\' }}\\\"><md-tooltip>新增</md-tooltip><md-icon><ng-md-icon icon=\\\"add_circle_outline\\\"></ng-md-icon></md-icon></md-button><md-button ng-hide=\\\"form.readonly || form.del === null\\\" ng-click=\\\"deleteFromArray(form.selectedIndex)\\\" class=\\\"md-icon-button {{ form.style.del || \\'btn-default\\' }}\\\"><md-tooltip>删除</md-tooltip><md-icon><ng-md-icon icon=\\\"close-circle-outline\\\"></ng-md-icon></md-icon></md-button></div></md-toolbar><md-tabs md-selected=\\\"form.selectedIndex\\\" md-dynamic-height=\\\"\\\" md-border-bottom=\\\"\\\" md-autoselect=\\\"\\\"><md-tab ng-repeat=\\\"item in modelArray track by $index\\\" ng-disabled=\\\"item.disabled\\\" label=\\\"{{ (form.titleField && item[form.titleField]) || (form.title + ($index+1)) || item.title}}\\\"><div class=\\\"tab{{$index%4}} md-padding\\\" layout-padding=\\\"\\\" schema-form-array-items=\\\"\\\"></div></md-tab></md-tabs><md-input-container style=\\\"margin-top:0;\\\" class=\\\"md-block\\\" md-is-error=\\\"ngModel.$error && ngModel.$invalid\\\"><div ng-messages=\\\"ngModel.$error\\\" aria-live=\\\"assertive\\\"><div sf-message=\\\"\\\" ng-message=\\\"\\\" ng-class=\\\"{\\'fx-invalid\\':ngModel.$invalid}\\\"></div></div><div class=\\\"hint md-char-counter\\\" ng-if=\\\"form.showHints\\\" ng-bind=\\\"form.description\\\"></div></md-input-container></div>\");\n$templateCache.put(\"decorators/material/tabs.html\",\"<div sf-field-model=\\\"\\\" class=\\\"schema-form-tabs {{::form.htmlClass}}\\\"><md-tabs md-dynamic-height=\\\"\\\" md-selected=\\\"selected\\\" md-autoselect=\\\"\\\" ng-init=\\\"selected = 0\\\"></md-tabs></div>\");\n$templateCache.put(\"decorators/material/textarea.html\",\"<md-input-container class=\\\"{{::form.htmlClass}} schema-form-textarea\\\" sf-layout=\\\"\\\" md-is-error=\\\"ngModel.$error && ngModel.$invalid\\\"><label ng-show=\\\"showTitle()\\\" for=\\\"{{::form.key|sfCamelKey}}\\\">{{::form.title}}</label> <textarea ng-class=\\\"::form.fieldHtmlClass\\\" id=\\\"{{::form.key|sfCamelKey}}\\\" sf-changed=\\\"form\\\" ng-disabled=\\\"::form.readonly\\\" sf-field-model=\\\"\\\" schema-validate=\\\"form\\\" name=\\\"{{::form.key|sfCamelKey}}\\\"></textarea><div ng-messages=\\\"ngModel.$error\\\" aria-live=\\\"assertive\\\"><div sf-message=\\\"\\\" ng-message=\\\"\\\"></div></div><div class=\\\"hint md-char-counter\\\" ng-if=\\\"form.showHints\\\" ng-bind=\\\"form.description\\\"></div></md-input-container>\");}]);\nangular.module('schemaForm').directive('sfMaterialClass', [\"$compile\", \"$timeout\", function ($compile, $timeout) {\n    return {\n        restrict: 'A',\n        scope: false,\n        link: function (scope, element, attrs, ngModel) {\n            function reduceHelper(obj, i) {\n                return obj[i]\n            }\n\n            var modelValue;\n\n            try {\n                if (scope.item) {\n                    modelValue = scope.form.key.slice(scope.form.key.length - 1).reduce(reduceHelper, scope.item || scope.model);\n                } else {\n                    modelValue = scope.form.key.reduce(reduceHelper, scope.model);\n\n                    if (!modelValue) {\n                        modelValue = scope.form.schema.default;\n                    }\n                }\n            } catch (e) {\n                modelValue = undefined;\n            }\n\n            // Element class is not set in DOM if executed immediately.\n            // I don't understand exactly why but it's probably related to other directive job.\n            $timeout(function () {\n                if (modelValue !== null && typeof modelValue !== 'undefined' && modelValue !== false) {\n                    element.addClass(attrs.sfMaterialClass);\n                }\n            }, 0);\n        }\n    };\n}]);\n(function(angular, undefined) {\n    'use strict';\n    angular\n        .module('schemaForm')\n        .config(materialDecoratorConfig)\n        .directive('sfmExternalOptions', sfmExternalOptionsDirective)\n        .filter('sfCamelKey', sfCamelKeyFilter);\n\n    materialDecoratorConfig.$inject = [\n        'schemaFormProvider', 'schemaFormDecoratorsProvider', 'sfBuilderProvider', 'sfPathProvider', '$injector'\n    ];\n\n    function sfLayout(args) {\n        var layoutDiv = args.fieldFrag.querySelector('[sf-layout]');\n\n        if (layoutDiv && args.form.grid) {\n            Object.getOwnPropertyNames(args.form.grid).forEach(function(property, idx, array) {\n                layoutDiv.setAttribute(property, args.form.grid[property]);\n            });\n        }\n    };\n\n    function materialDecoratorConfig(schemaFormProvider, decoratorsProvider, sfBuilderProvider, sfPathProvider, $injector) {\n        var base = 'decorators/material/';\n\n        var simpleTransclusion = sfBuilderProvider.builders.simpleTransclusion;\n        var ngModelOptions = sfBuilderProvider.builders.ngModelOptions;\n        var ngModel = sfBuilderProvider.builders.ngModel;\n        var sfField = sfBuilderProvider.builders.sfField;\n        var condition = sfBuilderProvider.builders.condition;\n        var array = sfBuilderProvider.builders.array;\n\n        var sflayout = sfLayout;\n        var sfMessagesNode = sfMessagesNodeHandler();\n        var sfMessages = sfMessagesBuilder;\n        var sfOptions = sfOptionsBuilder;\n        var mdAutocomplete = mdAutocompleteBuilder;\n        var mdSwitch = mdSwitchBuilder;\n        var mdDatepicker = mdDatepickerBuilder;\n        var mdTabs = mdTabsBuilder;\n        var textarea = textareaBuilder;\n\n        var core = [sfField, ngModel, ngModelOptions, condition, sflayout];\n        var defaults = core.concat(sfMessages);\n        var arrays = core.concat(array);\n        // var arrays = core;\n\n        schemaFormProvider.defaults.string.unshift(dateDefault);\n\n        decoratorsProvider.defineDecorator('materialDecorator', {\n            actions: { template: base + 'actions.html', builder: [sfField, simpleTransclusion, condition] },\n            array: { template: base + 'array.html', builder: arrays },\n            autocomplete: { template: base + 'autocomplete.html', builder: defaults.concat(mdAutocomplete) },\n            boolean: { template: base + 'checkbox.html', builder: defaults },\n            button: { template: base + 'submit.html', builder: defaults },\n            checkbox: { template: base + 'checkbox.html', builder: defaults },\n            checkboxes: { template: base + 'checkboxes.html', builder: arrays },\n            date: { template: base + 'date.html', builder: defaults.concat(mdDatepicker) },\n            'default': { template: base + 'default.html', builder: defaults },\n            fieldset: { template: base + 'fieldset.html', builder: [sfField, simpleTransclusion, condition] },\n            help: { template: base + 'help.html', builder: defaults },\n            number: { template: base + 'default.html', builder: defaults },\n            password: { template: base + 'default.html', builder: defaults },\n            radios: { template: base + 'radios.html', builder: defaults },\n            'radios-inline': { template: base + 'radios-inline.html', builder: defaults },\n            radiobuttons: { template: base + 'radio-buttons.html', builder: defaults },\n            section: {\n                template: base + 'section.html',\n                builder: [sfField, simpleTransclusion, condition, sfLayout, ngModel]\n            },\n            select: { template: base + 'select.html', builder: defaults.concat(sfOptions) },\n            submit: { template: base + 'submit.html', builder: defaults },\n            tabs: { template: base + 'tabs.html', builder: [sfField, mdTabs, condition] },\n            tabarray: { template: base + 'tabarray.html', builder: arrays },\n            textarea: { template: base + 'textarea.html', builder: defaults.concat(textarea) },\n            switch: { template: base + 'switch.html', builder: defaults.concat(mdSwitch) },\n            chips: { template: base + 'chips.html', builder: defaults.concat([]) },\n        });\n\n        function sfMessagesNodeHandler() {\n            var html = '<div ng-if=\"ngModel.$invalid\" ng-messages=\"{dummy: true}\" class=\"ng-active\">' +\n                '<div ng-message=\"dummy\" class=\"md-input-message-animation\" sf-message=\"form.description\"></div></div>';\n            var div = document.createElement('div');\n            div.innerHTML = html;\n            return div.firstChild;\n        };\n\n        function sfMessagesBuilder(args) {\n            var messagesDiv = args.fieldFrag.querySelector('[sf-messages]');\n            if (messagesDiv && sfMessagesNode) {\n                var child = sfMessagesNode.cloneNode(true);\n                messagesDiv.appendChild(child);\n            }\n        };\n\n        function textareaBuilder(args) {\n            var textareaFrag = args.fieldFrag.querySelector('textarea');\n            var maxLength = args.form.maxlength || false;\n            if (textareaFrag && maxLength) {\n                textareaFrag.setAttribute('md-maxlength', maxLength);\n            }\n        };\n\n        function mdAutocompleteBuilder(args) {\n            var mdAutocompleteFrag = args.fieldFrag.querySelector('md-autocomplete');\n            var minLength = args.form.minLength || 1;\n            var maxLength = args.form.maxLength || false;\n            var title = args.form.title || args.form.placeholder || args.form.key.slice(-1)[0];\n\n            if (mdAutocompleteFrag) {\n                if (args.form.onChange) {\n                    mdAutocompleteFrag.setAttribute('md-selected-item-change', 'args.form.onChange()');\n                    mdAutocompleteFrag.setAttribute('md-search-text-change', 'args.form.onChange(searchText)');\n                }\n\n                // mdAutocompleteFrag.setAttribute('md-items', 'item in $filter(''autocomplete'')(searchText);');\n                mdAutocompleteFrag.setAttribute('md-min-length', minLength);\n                if (maxLength) {\n                    mdAutocompleteFrag.setAttribute('md-max-length', maxLength);\n                }\n\n                if (title) {\n                    mdAutocompleteFrag.setAttribute('md-floating-label', title);\n                }\n            }\n        };\n\n        function mdSwitchBuilder(args) {\n            var mdSwitchFrag = args.fieldFrag.querySelector('md-switch');\n            if (args.form.schema.titleMap) {\n                mdSwitchFrag.setAttribute('ng-true-value', args.form.schema.titleMap.true);\n                mdSwitchFrag.setAttribute('ng-false-value', args.form.schema.titleMap.false);\n            }\n        };\n\n        function sfOptionsBuilder(args) {\n            var mdSelectFrag = args.fieldFrag.querySelector('md-select');\n            var enumTitleMap = [];\n            var i;\n            var mdSelectFrag;\n\n            args.form.selectOptions = [];\n            args.form.getOptions = getOptionsHandler;\n\n            if (args.form.schema.links && (typeof args.form.schema.links) === 'object') {\n                var link;\n                var related = /({)([^}]*)(})/gm;\n                var source = /{{([^}]*)}}/gm;\n                var matched;\n\n                for (i = 0; i < args.form.schema.links.length; i++) {\n                    link = args.form.schema.links[i];\n                    if (link.rel === 'options') {\n                        // TODO enable filter to allow processing results\n                        // args.form.optionSource = link.href.replace(related, '$1$1 model.$2 | _externalOptionUri $3$3');\n                        args.form.optionSource = link.href.replace(related, '$1$1 model.$2 $3$3');\n                    }\n                }\n\n                mdSelectFrag.setAttribute('sfm-external-options', args.form.optionSource);\n            } else {\n                args.form.selectOptions = sfOptionsProcessor(args.form);\n            }\n        };\n\n        function mdDatepickerBuilder(args) {\n            var mdDatepickerFrag = args.fieldFrag.querySelector('md-datepicker');\n            if (mdDatepickerFrag) {\n                if (args.form.onChange) {\n                    mdDatepickerFrag.setAttribute('ng-change', 'args.form.onChange(searchText)');\n                }\n                // mdDatepickerFrag.setAttribute('md-items', 'item in $filter(''autocomplete'')(searchText);');\n                var minDate = args.form.minimum || false;\n                var maxDate = args.form.maximum || false;\n                if (minDate) {\n                    mdDatepickerFrag.setAttribute('md-min-date', minDate);\n                }\n                if (maxDate) {\n                    mdDatepickerFrag.setAttribute('md-max-date', maxDate);\n                }\n            }\n        };\n\n        function mdTabsBuilder(args) {\n            if (args.form.tabs && args.form.tabs.length > 0) {\n                var mdTabsFrag = args.fieldFrag.querySelector('md-tabs');\n\n                args.form.tabs.forEach(function(tab, index) {\n                    var mdTab = document.createElement('md-tab');\n                    mdTab.setAttribute('label', '{{' + args.path + '.tabs[' + index + '].title}}');\n                    var mdTabBody = document.createElement('md-tab-body');\n                    var childFrag = args.build(tab.items, args.path + '.tabs[' + index + '].items', args.state);\n                    mdTabBody.appendChild(childFrag);\n                    mdTab.appendChild(mdTabBody);\n                    mdTabsFrag.appendChild(mdTab);\n                });\n            }\n        };\n\n        /**\n         * Material Datepicker\n         */\n        function dateDefault(name, schema, options) {\n            if (schema.type === 'string' && (schema.format === 'date' || schema.format === 'date-time')) {\n                var f = schemaFormProvider.stdFormObj(name, schema, options);\n                f.key = options.path;\n                f.type = 'date';\n                options.lookup[sfPathProvider.stringify(options.path)] = f;\n                return f;\n            }\n        };\n    };\n\n    function getOptionsHandler(form, evalExpr) {\n        if (form.optionData) {\n            return evalExpr(form.optionData);\n        }\n\n        if (form.selectOptions) {\n            return form.selectOptions;\n        }\n\n        return [];\n    }\n\n    function sfOptionsProcessor(data) {\n        var enumTitleMap = [];\n\n        if (data.titleMap) {\n            return data.titleMap;\n        } else if (data.enum && data.enum.length) {\n            for (var i = 0; i < data.enum.length; i++) {\n                if (data.enum[i] && data.enum[i].length) {\n                    enumTitleMap.push({ name: data.enum[i], value: data.enum[i] });\n                }\n            }\n        }\n\n        return enumTitleMap;\n    }\n\n    sfmExternalOptionsDirective.$inject = ['$http'];\n\n    function sfmExternalOptionsDirective($http) {\n        var directive = {\n            link: link,\n            restrict: 'A'\n        };\n\n        return directive;\n\n        function link(scope, element, attrs) {\n            attrs.$observe('sfmExternalOptions', function(dataURI) {\n                $http.get(dataURI)\n                    .then(function(response) {\n                        scope.form.selectOptions = sfOptionsProcessor(response.data);\n                    });\n            });\n        }\n    }\n\n    /**\n     * sfCamelKey Filter\n     */\n    function sfCamelKeyFilter() {\n        return function(formKey) {\n            if (!formKey) {\n                return '';\n            }\n            var part, i, key;\n            key = formKey.slice();\n            for (i = 0; i < key.length; i++) {\n                part = key[i].toString().toLowerCase().split('');\n                if (i && part.length) {\n                    part[0] = part[0].toUpperCase();\n                }\n                key[i] = part.join('');\n            }\n\n            return key.join('');\n        };\n    };\n\n})(angular, undefined);\n/*\n TODO add default filter for autocomplete which allows form.optionFilter or 'autocompleteFilter' to override\n Something along the following lines...\n if ($injector.has('autocompleteFilter')) {\n result = $filter('autocomplete')(input);\n }\n else\n if ($injector.has(args.form.optionFilter + 'Filter')) {\n result = $filter(args.form.optionFilter)(input);\n }\n else {\n if (args.form.optionFilter) {\n mdAutocomplete.setAttribute('md-items',\n 'item in evalExpr(\"this[\\\"\"+form.optionFilter+\"\\\"](\\\"\"+searchText+\"\\\")\")');\n }\n }\n\n .filter('autocompleteMovieTest', function() {\n function autocompleteMovieTestFilter(array, input){\n var current = input;\n // You could also call multiple filters here using:\n // current = $filter('filterName')(input)\n if(typeof current === 'string') {\n current = current.replace(' ','-').toLowerCase();\n }\n current = (!current) ? '_undefined' : current;\n return current;\n }\n\n return externalOptionUriFilter;\n })\n */\n/**\n * It might be a bug, but currently input[type=number] does not add\n * a parser, so the model gets populated with a string. It does however stop non numbers so it\n * must have some preproccessing. Anyway, this adds parser before schema-validate hooks into it.\n * FIXME: this is still not a complete solution. Inputting a string in an input[type=number] results\n * in parsers never firing and ngModel value removed. So no validation from schema-validate either.\n */\nangular.module('schemaForm').directive('sfTypeParser', function() {\n  return {\n    restrict: 'A',\n    scope: false,\n    require: 'ngModel',\n    link: function(scope, element, attrs, ngModel) {\n      var once = scope.$watch(attrs.sfTypeParser, function(schema) {\n        if (!schema) {\n          return;\n        }\n\n        var isNumber  = schema.type.indexOf('number') !== -1;\n        var isInteger = schema.type.indexOf('integer') !== -1;\n        var numberRE  = /^[0-9]*$/;\n        // Use index of since type can be either an array with two values or a string.\n        if (isNumber || isInteger) {\n          // The timing here seems to work. i.e. we get in before schema-validate\n          ngModel.$parsers.push(function(viewValue) {\n            var value;\n            if (isNumber) {\n              value = parseFloat(viewValue);\n            } else if (numberRE.test(viewValue)) {\n              // We test the value to check that it's a valid integer, otherwise we can easily\n              // get float -> integer parsing behind the scenes.\n              value = parseInt(viewValue, 10);\n            }\n            console.log('parser', numberRE.test(viewValue), viewValue, value)\n            if (value === undefined || isNaN(value)) {\n              //Let the validation fail. @FIXME: it fails with \"required\" for some reason.\n              return viewValue;\n            }\n            return value;\n          });\n        }\n\n        once();\n      });\n    }\n  };\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/directives/angular-schema-form-material/material-decorator.js\n ** module id = 49\n ** module chunks = 0\n **/"],"sourceRoot":""}