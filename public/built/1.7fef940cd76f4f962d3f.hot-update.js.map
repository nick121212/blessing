{"version":3,"sources":["webpack:///1.7fef940cd76f4f962d3f.hot-update.js","webpack:///./src/directives/execute/execute.cmd.directive.ts?8d80","webpack:///./src/directives/execute/index.ts?5816"],"names":["webpackHotUpdate","186","module","exports","__webpack_require__","Directive","restrict","scope","bindToController","realTime","_filter","template","controller","PageExecuteCmdResultController","controllerAs","_","module_1","$scope","fxAction","sockets","$q","$timeout","toolbarUtils","materialUtils","_this","this","cmdClientData","cmdResClientData","deviceSelected","cmdResMap","listKey","process","fail","success","total","$on","event","msg","console","log","_source","jid","_id","isArray","rows","devices_1","filter","item","length","push","each","dev","key","extend","complete","cmdId","len","getCommandResult","data","resetProcess","hasOwnProperty","setProcess","aggregations","toolbars","noneBuilder","iconBuilder","toValue","labelBuilder","attrBuilder","flex","prototype","buffer","count_success","buckets","bucket","key_as_string","doc_count","resFilter","query","and","match","isBusy","isOpen","all","doAction","where","then","results","doDealResult","actionModel","command","devLen","$inject","directive","$sce","text","trustAsHtml","$rootScope","link","element","attrs","t","namespace","angularTerminal","terminal","input","$emit","greetings","enabled","e","echo","187","Object","defineProperty","value"],"mappings":"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","file":"1.7fef940cd76f4f962d3f.hot-update.js","sourcesContent":["webpackHotUpdate(1,{\n\n/***/ 186:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar _ = __webpack_require__(3);\n\tvar module_1 = __webpack_require__(31);\n\tvar PageExecuteCmdResultController = (function () {\n\t    function PageExecuteCmdResultController($scope, fxAction, sockets, $q, $timeout, toolbarUtils, materialUtils) {\n\t        var _this = this;\n\t        this.$scope = $scope;\n\t        this.fxAction = fxAction;\n\t        this.sockets = sockets;\n\t        this.$q = $q;\n\t        this.$timeout = $timeout;\n\t        this.toolbarUtils = toolbarUtils;\n\t        this.materialUtils = materialUtils;\n\t        this.cmdClientData = {};\n\t        this.cmdResClientData = {};\n\t        this.deviceSelected = [];\n\t        this.cmdResMap = {};\n\t        this.listKey = 'executeCmdResList';\n\t        this.process = { fail: 0, success: 0, total: 0 };\n\t        if (this.realTime) {\n\t            this.$scope.$on(\"socket:connect\", function () { });\n\t            this.$scope.$on(\"socket:events\", function (event, msg) {\n\t                console.log(\"socket\", msg._source.jid, _this.jid);\n\t                if (msg._source.jid !== _this.jid) {\n\t                    return;\n\t                }\n\t                _this.cmdResMap[msg._id] = msg;\n\t                if (_.isArray(_this.cmdResClientData.rows)) {\n\t                    var devices_1 = _.filter(_this.cmdResClientData.rows, function (item) {\n\t                        return item._id == msg._id;\n\t                    });\n\t                    if (devices_1.length == 0) {\n\t                        _this.cmdResClientData.rows.push(msg);\n\t                    }\n\t                    else {\n\t                        _.each(devices_1, function (dev, key) {\n\t                            _.extend(devices_1[key], msg);\n\t                        });\n\t                    }\n\t                }\n\t                if (msg._source.success) {\n\t                    _this.process.success++;\n\t                }\n\t                else {\n\t                    _this.process.fail++;\n\t                }\n\t                _this.process.complete = (_this.process.success + _this.process.fail) / _this.process.total * 100;\n\t            });\n\t        }\n\t        this.$scope.$on(\"showExecuteCmdResult\", function (event, cmdId) {\n\t            _this.cmdClientData = {};\n\t            _this.cmdResClientData = {};\n\t            _this.deviceSelected = [];\n\t            _this.cmdResMap = { len: 0 };\n\t            _this.jid = \"\";\n\t            _this.getCommandResult(cmdId);\n\t        });\n\t        this.$scope.$on(this.listKey + \":searchComplete\", function (event, data) {\n\t            _this.resetProcess();\n\t            _.each(data.rows, function (item, key) {\n\t                if (_this.cmdResMap.hasOwnProperty(item._id)) {\n\t                    _.extend(data.rows[key], _this.cmdResMap[item._id]);\n\t                }\n\t            });\n\t            _this.setProcess(data['aggregations']);\n\t        });\n\t        this.cmdResClientData = {};\n\t        this.toolbars = [\n\t            this.toolbarUtils.noneBuilder(\"icon\").iconBuilder('apple-keyboard-command', {}).toValue(),\n\t            this.toolbarUtils.labelBuilder('执行命令').attrBuilder({ flex: \"\" }).toValue()\n\t        ];\n\t    }\n\t    PageExecuteCmdResultController.prototype.resetProcess = function () {\n\t        this.process.fail = 0;\n\t        this.process.success = 0;\n\t        this.process.complete = 0;\n\t        this.process.buffer = 0;\n\t    };\n\t    PageExecuteCmdResultController.prototype.setProcess = function (aggregations) {\n\t        var _this = this;\n\t        _.each(aggregations.count_success.buckets, function (bucket) {\n\t            switch (bucket.key_as_string) {\n\t                case \"true\":\n\t                    _this.process.success = bucket.doc_count;\n\t                    break;\n\t                case \"false\":\n\t                    _this.process.fail = bucket.doc_count;\n\t                    break;\n\t                default:\n\t            }\n\t        });\n\t        this.process.complete = (this.process.success + this.process.fail) / this.process.total * 100;\n\t        this.process.buffer = 100;\n\t    };\n\t    PageExecuteCmdResultController.prototype.getCommandResult = function (cmdId) {\n\t        var _this = this;\n\t        this.resFilter = { \"query\": { \"and\": [{ \"match\": { \"jid\": cmdId } }] } };\n\t        this.cmdResMap = {};\n\t        this.jid = cmdId;\n\t        this.realTime = true;\n\t        this.isBusy = true;\n\t        this.isOpen = true;\n\t        this.$q.all([\n\t            this.fxAction.doAction(\"executeCmdList\", { where: { \"query\": { \"and\": [{ \"match\": { \"_id\": cmdId } }] } } })\n\t        ]).then(function (results) {\n\t            _this.fxAction.doDealResult(results[0].actionModel, results[0], _this.cmdClientData);\n\t        }).then(function () {\n\t            if (_this.cmdClientData.rows.length) {\n\t                _this.command = _this.cmdClientData.rows[0]._source.command;\n\t                _this.process.total = _this.cmdClientData.rows[0]._source.devLen;\n\t            }\n\t            else {\n\t                return _this.getCommandResult(cmdId);\n\t            }\n\t        }).finally(function () {\n\t            _this.isBusy = false;\n\t        });\n\t    };\n\t    PageExecuteCmdResultController.$inject = [\"$scope\", \"fxAction\", \"sockets\", \"$q\", \"$timeout\", \"toolbarUtils\", \"materialUtils\"];\n\t    return PageExecuteCmdResultController;\n\t}());\n\texports.PageExecuteCmdResultController = PageExecuteCmdResultController;\n\tfunction Directive() {\n\t    return {\n\t        restrict: 'EA',\n\t        scope: {},\n\t        bindToController: {\n\t            \"realTime\": '@?',\n\t            \"_filter\": '=?'\n\t        },\n\t        template: __webpack_require__(125),\n\t        controller: PageExecuteCmdResultController,\n\t        controllerAs: \"executeCmdCtl\"\n\t    };\n\t}\n\tmodule_1.module.directive(\"executeCmd\", [Directive]);\n\tmodule_1.module.filter('to_trusted', ['$sce', function ($sce) {\n\t        return function (text) {\n\t            return $sce.trustAsHtml(text);\n\t        };\n\t    }]);\n\tmodule_1.module.directive('angularTerminal', ['$rootScope', function ($rootScope) {\n\t        return {\n\t            restrict: 'A',\n\t            link: function (scope, element, attrs) {\n\t                var namespace = 'terminal.' + (attrs.angularTerminal || 'default'), t;\n\t                t = element.terminal(function (input, terminal) {\n\t                    $rootScope.$emit(namespace, input, terminal);\n\t                }, {\n\t                    greetings: attrs.greetings || '',\n\t                    enabled: false\n\t                });\n\t                $rootScope.$on(namespace + '.echo', function (e, msg) {\n\t                    t.echo(msg);\n\t                });\n\t            }\n\t        };\n\t    }]);\n\n\n/***/ },\n\n/***/ 187:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar module_1 = __webpack_require__(31);\n\t__webpack_require__(186);\n\t__webpack_require__(188);\n\t__webpack_require__(161);\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = module_1.default;\n\n\n/***/ }\n\n})\n\n\n/** WEBPACK FOOTER **\n ** 1.7fef940cd76f4f962d3f.hot-update.js\n **/","import { IActionModel, ActionType, IClientData } from '../../directives/action/models/action.model';\nimport * as _ from 'lodash';\nimport { module } from './module';\n\ninterface ICmdClientData extends IClientData {\n    cmdResMap?: any;\n}\n\ninterface IExecuteProcess {\n    total: number;\n    success: number;\n    fail: number;\n    buffer?: number;\n    complete?: number;\n}\n\nexport class PageExecuteCmdResultController {\n    static $inject = [\"$scope\", \"fxAction\", \"sockets\", \"$q\", \"$timeout\", \"toolbarUtils\", \"materialUtils\"];\n\n    jid: string;\n    toolbars: Array<any>;\n    cmdClientData: IClientData = {};\n    cmdResClientData: ICmdClientData = {};\n    deviceSelected: Array<any> = [];\n    command: any;\n    cmdResMap: any = {};\n    isBusy: boolean;\n    isOpen: boolean;\n    realTime: boolean;\n    resFilter: any;\n    listKey: string = 'executeCmdResList';\n    process: IExecuteProcess = { fail: 0, success: 0, total: 0 };\n\n    constructor(private $scope, private fxAction, private sockets, private $q: angular.IQService, private $timeout, private toolbarUtils, private materialUtils: fx.utils.materialStatic) {\n        if (this.realTime) {\n            this.$scope.$on(\"socket:connect\", () => { });\n            this.$scope.$on(\"socket:events\", (event, msg) => {\n                console.log(\"socket\", msg._source.jid, this.jid);\n                if (msg._source.jid !== this.jid) {\n                    return;\n                }\n                this.cmdResMap[msg._id] = msg;\n\n                // this.setProcess(msg['aggregations']);\n                if (_.isArray(this.cmdResClientData.rows)) {\n                    let devices = _.filter(this.cmdResClientData.rows, (item: any) => {\n                        return item._id == msg._id;\n                    });\n                    if (devices.length == 0) {\n                        this.cmdResClientData.rows.push(msg);\n                    } else {\n                        _.each(devices, (dev, key) => {\n                            _.extend(devices[key], msg);\n                        });\n                    }\n                }\n\n                if (msg._source.success) {\n                    this.process.success++;\n                } else {\n                    this.process.fail++;\n                }\n                this.process.complete = (this.process.success + this.process.fail) / this.process.total * 100;\n\n                // this.$scope.$emit(`${this.listKey}:refresh`);\n            });\n        }\n        this.$scope.$on(\"showExecuteCmdResult\", (event, cmdId: string) => {\n            this.cmdClientData = {};\n            this.cmdResClientData = {};\n            this.deviceSelected = [];\n            this.cmdResMap = { len: 0 };\n            this.jid = \"\";\n            this.getCommandResult(cmdId);\n        });\n\n        this.$scope.$on(`${this.listKey}:searchComplete`, (event, data) => {\n            this.resetProcess();\n            _.each(data.rows, (item, key) => {\n                if (this.cmdResMap.hasOwnProperty(item._id)) {\n                    _.extend(data.rows[key], this.cmdResMap[item._id]);\n                }\n            });\n            this.setProcess(data['aggregations']);\n        });\n\n        this.cmdResClientData = {};\n        this.toolbars = [\n            this.toolbarUtils.noneBuilder(\"icon\").iconBuilder('apple-keyboard-command', {}).toValue(),\n            this.toolbarUtils.labelBuilder('执行命令').attrBuilder({ flex: \"\" }).toValue()\n        ];\n    }\n\n    resetProcess() {\n        this.process.fail = 0;\n        this.process.success = 0;\n        // this.process.total = 0;\n        this.process.complete = 0;\n        this.process.buffer = 0;\n    }\n\n    setProcess(aggregations) {\n        _.each(aggregations.count_success.buckets, (bucket) => {\n            switch (bucket.key_as_string) {\n                case \"true\":\n                    this.process.success = bucket.doc_count;\n                    break;\n                case \"false\":\n                    this.process.fail = bucket.doc_count;\n                    break;\n                default:\n            }\n        });\n\n        this.process.complete = (this.process.success + this.process.fail) / this.process.total * 100;\n        this.process.buffer = 100;\n    }\n\n    getCommandResult(cmdId: string) {\n        this.resFilter = { \"query\": { \"and\": [{ \"match\": { \"jid\": cmdId } }] } };\n        this.cmdResMap = {};\n        this.jid = cmdId;\n        this.realTime = true;\n        this.isBusy = true;\n        this.isOpen = true;\n        this.$q.all([\n            this.fxAction.doAction(\"executeCmdList\", { where: { \"query\": { \"and\": [{ \"match\": { \"_id\": cmdId } }] } } })\n        ]).then((results: any) => {\n            this.fxAction.doDealResult(results[0].actionModel, results[0], this.cmdClientData);\n        }).then(() => {\n            if (this.cmdClientData.rows.length) {\n                this.command = this.cmdClientData.rows[0]._source.command;\n                this.process.total = this.cmdClientData.rows[0]._source.devLen;\n            } else {\n                return this.getCommandResult(cmdId);\n            }\n        }).finally(() => {\n            this.isBusy = false;\n        });\n    }\n}\n\nfunction Directive(): ng.IDirective {\n    return {\n        restrict: 'EA',\n        scope: {},\n        bindToController: {\n            \"realTime\": '@?',\n            \"_filter\": '=?'\n        },\n        // replace: true,\n        template: require('./tpls/execute.cmd.tmp.jade'),\n        controller: PageExecuteCmdResultController,\n        controllerAs: \"executeCmdCtl\"\n    }\n}\n\nmodule.directive(\"executeCmd\", [Directive]);\n\nmodule.filter('to_trusted', ['$sce', function ($sce) {\n    return function (text) {\n        return $sce.trustAsHtml(text);\n    }\n}]);\n\nmodule.directive('angularTerminal', ['$rootScope', function ($rootScope) {\n    return {\n        restrict: 'A',\n        link: function (scope, element, attrs: any) {\n            var namespace = 'terminal.' + (attrs.angularTerminal || 'default'),\n                t;\n\n            t = element.terminal((input, terminal) => {\n                $rootScope.$emit(namespace, input, terminal);\n            }, {\n                    greetings: attrs.greetings || '',\n                    enabled: false\n                });\n\n            $rootScope.$on(namespace + '.echo', function (e, msg) {\n                t.echo(msg);\n            });\n        }\n    };\n}]);\n\n\n/** WEBPACK FOOTER **\n ** ./src/directives/execute/execute.cmd.directive.ts\n **/","import mdl from './module';\n\nimport './execute.cmd.directive';\nimport './socket.factory';\nimport './index.scss';\n\nexport default mdl;\n\n\n/** WEBPACK FOOTER **\n ** ./src/directives/execute/index.ts\n **/"],"sourceRoot":""}