{"version":3,"sources":["webpack:///0.f61435394748804b47bc.hot-update.js","webpack:///./src/directives/action/index.ts?1f08","webpack:///./src/directives/action/services/action.provider.ts?f27c"],"names":["webpackHotUpdate","44","module","exports","__webpack_require__","sfLayout","args","layoutDiv","fieldFrag","querySelector","form","grid","Object","getOwnPropertyNames","forEach","property","idx","array","setAttribute","angular","ngMaterial","action_provider_1","utils_service_1","rest_service_1","login_value_1","modules_value_1","crawler_value_1","common_value_1","form_directive_1","list_directive_1","dialog_form_directive_1","search_directive_1","wizard_directive_1","dialog_wizard_directive_1","builder_directive_1","autocomplete_provider_1","jsoneditor_provider_1","_name","config","sfErrorMessageProvider","setDefaultMessage","sfBuilderProvider","schemaFormDecoratorsProvider","jsonEditorBuilder","autoCompleteBuilder","defineAddOn","stdBuilders","concat","builder","builders","sfField","condition","transclusion","run","$templateCache","put","defineProperty","value","name","159","_","action_model_1","interface_model_1","pointer","DialogController","$scope","item","key","submit","this","console","log","arguments","$inject","Provider","$rootScope","$injector","restUtils","mdUtils","$q","$mdDialog","_this","$get","service","invoke","prototype","getModel","defer","has","resolve","cloneDeepWith","get","showErrMsg","reject","promise","getModels","keys","actionModels","notFoundsKeys","promises","each","isObject","then","actionModel","push","all","doActionModel","$event","callback","type","ActionType","wizard","templates","_a","show","targetEvent","clickOutsideToClose","escapeToClose","fullscreen","controller","controllerAs","template","confirm","confirm_1","title","confirmTitle","textContent","confirmContent","ariaLabel","ok","confirmOk","cancel","confirmCancel","doAction","doFormCheck","$form","$broadcast","$valid","$error","doDealResult","results","clientData","interfaces","iInterface","result","jpp","set","val","del","remove","queryData","interfacesRest","interfaceModel","restAngular","isRestful","getCustomRestful","address","port","path","getCustom","method","MethodType","POST","post","GET","customGET","PUT","customPUT","idFieldPath","DELETE","customDELETE","provider"],"mappings":"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","file":"0.f61435394748804b47bc.hot-update.js","sourcesContent":["webpackHotUpdate(0,{\n\n/***/ 44:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar angular = __webpack_require__(7);\n\tvar ngMaterial = __webpack_require__(6);\n\t__webpack_require__(88);\n\t__webpack_require__(135);\n\tvar action_provider_1 = __webpack_require__(159);\n\tvar utils_service_1 = __webpack_require__(162);\n\tvar rest_service_1 = __webpack_require__(18);\n\tvar login_value_1 = __webpack_require__(157);\n\tvar modules_value_1 = __webpack_require__(158);\n\tvar crawler_value_1 = __webpack_require__(156);\n\tvar common_value_1 = __webpack_require__(155);\n\tvar form_directive_1 = __webpack_require__(151);\n\tvar list_directive_1 = __webpack_require__(152);\n\tvar dialog_form_directive_1 = __webpack_require__(149);\n\tvar search_directive_1 = __webpack_require__(153);\n\tvar wizard_directive_1 = __webpack_require__(154);\n\tvar dialog_wizard_directive_1 = __webpack_require__(150);\n\tvar builder_directive_1 = __webpack_require__(148);\n\tvar autocomplete_provider_1 = __webpack_require__(160);\n\tvar jsoneditor_provider_1 = __webpack_require__(161);\n\t__webpack_require__(69);\n\t__webpack_require__(244);\n\t__webpack_require__(163);\n\tvar _name = \"fxAction\";\n\tvar module = angular.module(_name + \"Module\", [ngMaterial, rest_service_1.default, \"schemaForm\", \"ng.jsoneditor\"]);\n\tutils_service_1.default(module);\n\taction_provider_1.default(module);\n\tform_directive_1.default(module);\n\tlist_directive_1.default(module);\n\tmodules_value_1.default(module);\n\tlogin_value_1.default(module);\n\tdialog_form_directive_1.default(module);\n\tsearch_directive_1.default(module);\n\twizard_directive_1.default(module);\n\tdialog_wizard_directive_1.default(module);\n\tbuilder_directive_1.default(module);\n\tcrawler_value_1.default(module);\n\tcommon_value_1.default(module);\n\tautocomplete_provider_1.default(module);\n\tjsoneditor_provider_1.default(module);\n\tfunction sfLayout(args) {\n\t    var layoutDiv = args.fieldFrag.querySelector('[sf-layout]');\n\t    if (layoutDiv && args.form.grid) {\n\t        Object.getOwnPropertyNames(args.form.grid).forEach(function (property, idx, array) {\n\t            layoutDiv.setAttribute(property, args.form.grid[property]);\n\t        });\n\t    }\n\t}\n\t;\n\tmodule\n\t    .config([\"sfErrorMessageProvider\", function (sfErrorMessageProvider) {\n\t        sfErrorMessageProvider.setDefaultMessage(\"302\", \"[{{title}}]是必填项\");\n\t        sfErrorMessageProvider.setDefaultMessage(\"103\", \"[{{title}}]超过了最大值{{schema.maximum}}\");\n\t        sfErrorMessageProvider.setDefaultMessage(\"101\", \"[{{title}}]小于最小值{{schema.minimum}}\");\n\t        sfErrorMessageProvider.setDefaultMessage(\"200\", \"[{{title}}]字符长度小于最小值({{schema.minLength}})\");\n\t        sfErrorMessageProvider.setDefaultMessage(\"201\", \"[{{title}}]字符长度大于最大值({{schema.maxLength}})\");\n\t        sfErrorMessageProvider.setDefaultMessage(\"400\", \"数组长度不正确，{{schema.minItems||0}}-{{schema.maxItems||'∞'}}\");\n\t        sfErrorMessageProvider.setDefaultMessage(\"500\", \"格式不正确\");\n\t    }])\n\t    .config([\"sfBuilderProvider\", \"schemaFormDecoratorsProvider\", \"jsonEditorBuilderProvider\", \"autoCompleteBuilderProvider\", function (sfBuilderProvider, schemaFormDecoratorsProvider, jsonEditorBuilder, autoCompleteBuilder) {\n\t        schemaFormDecoratorsProvider.defineAddOn('materialDecorator', 'jeditor', \"./decorators/jsoneditor.jade\", sfBuilderProvider.stdBuilders.concat(jsonEditorBuilder.builder));\n\t        schemaFormDecoratorsProvider.defineAddOn('materialDecorator', 'card', \"./decorators/card.jade\", [sfBuilderProvider.builders.sfField, sfBuilderProvider.builders.condition, sfBuilderProvider.builders.transclusion]);\n\t        schemaFormDecoratorsProvider.defineAddOn('materialDecorator', 'autocomplete-1', \"./decorators/autocomplete-1.jade\", [sfBuilderProvider.builders.sfField, sfLayout, sfBuilderProvider.builders.condition, autoCompleteBuilder.builder, sfBuilderProvider.builders.transclusion]);\n\t    }])\n\t    .run([\"$templateCache\", \"autoCompleteBuilder\", function ($templateCache) {\n\t        $templateCache.put('./decorators/jsoneditor.jade', __webpack_require__(102)());\n\t        $templateCache.put('./decorators/card.jade', __webpack_require__(101)());\n\t        $templateCache.put('./decorators/autocomplete-1.jade', __webpack_require__(100)());\n\t        $templateCache.put('./decorators/section-1.jade', __webpack_require__(103)());\n\t    }]);\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = module.name;\n\n\n/***/ },\n\n/***/ 159:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar _ = __webpack_require__(3);\n\tvar action_model_1 = __webpack_require__(5);\n\tvar interface_model_1 = __webpack_require__(16);\n\tvar pointer = __webpack_require__(25);\n\tvar DialogController = (function () {\n\t    function DialogController($scope, item, key, submit) {\n\t        this.$scope = $scope;\n\t        this.item = item;\n\t        this.key = key;\n\t        this.submit = submit;\n\t        console.log(arguments);\n\t    }\n\t    DialogController.$inject = [\"$scope\", \"item\", \"key\", \"submit\"];\n\t    return DialogController;\n\t}());\n\tvar Provider = (function () {\n\t    function Provider($rootScope, $injector, restUtils, mdUtils, $q, $mdDialog) {\n\t        var _this = this;\n\t        this.$rootScope = $rootScope;\n\t        this.$injector = $injector;\n\t        this.restUtils = restUtils;\n\t        this.mdUtils = mdUtils;\n\t        this.$q = $q;\n\t        this.$mdDialog = $mdDialog;\n\t        this.$get = [\"$injector\", function ($injector) {\n\t                var service = $injector.invoke(Provider, _this, null);\n\t                return service;\n\t            }];\n\t        return this;\n\t    }\n\t    Provider.prototype.getModel = function (key) {\n\t        var defer = this.$q.defer();\n\t        if (!key) {\n\t            defer.reject();\n\t        }\n\t        else {\n\t            if (this.$injector.has(key)) {\n\t                defer.resolve(_.cloneDeepWith(this.$injector.get(key)));\n\t            }\n\t            else {\n\t                this.mdUtils.showErrMsg(\"\\u6CA1\\u6709\\u627E\\u5230key[\" + key + \"]!\");\n\t                defer.reject(key);\n\t            }\n\t        }\n\t        return defer.promise;\n\t    };\n\t    Provider.prototype.getModels = function (keys) {\n\t        var _this = this;\n\t        var defer = this.$q.defer();\n\t        var actionModels = {};\n\t        var notFoundsKeys = [];\n\t        var promises = {};\n\t        _.each(keys, function (key) {\n\t            if (_.isObject(key)) {\n\t                actionModels[key.key] = key;\n\t            }\n\t            else {\n\t                promises[key] = _this.getModel(key).then(function (actionModel) {\n\t                    actionModels[key] = actionModel;\n\t                }).catch(function (key) {\n\t                    notFoundsKeys.push(key);\n\t                });\n\t            }\n\t        });\n\t        this.$q.all(promises).then(function () {\n\t            defer.resolve(actionModels);\n\t        }).catch(function () {\n\t            defer.resolve(actionModels);\n\t        });\n\t        return defer.promise;\n\t    };\n\t    Provider.prototype.doActionModel = function ($event, actionModel, item, callback) {\n\t        var _this = this;\n\t        switch (actionModel.type) {\n\t            case action_model_1.ActionType.wizard:\n\t            case action_model_1.ActionType.form:\n\t                var templates = (_a = {},\n\t                    _a[action_model_1.ActionType.form] = __webpack_require__(105)(),\n\t                    _a[action_model_1.ActionType.wizard] = __webpack_require__(110)(),\n\t                    _a\n\t                );\n\t                return this.$mdDialog.show({\n\t                    targetEvent: $event,\n\t                    clickOutsideToClose: false,\n\t                    escapeToClose: false,\n\t                    fullscreen: true,\n\t                    resolve: {\n\t                        'item': item || {},\n\t                        'key': actionModel.key,\n\t                        'submit': callback\n\t                    },\n\t                    controller: DialogController,\n\t                    controllerAs: \"dialogCtl\",\n\t                    template: templates[actionModel.type]\n\t                }).then(function () {\n\t                    item = null;\n\t                });\n\t            case action_model_1.ActionType.confirm:\n\t                var confirm_1 = this.$mdDialog.confirm()\n\t                    .title(actionModel.confirm.confirmTitle)\n\t                    .textContent(actionModel.confirm.confirmContent)\n\t                    .ariaLabel(actionModel.confirm.confirmTitle)\n\t                    .targetEvent($event)\n\t                    .ok(actionModel.confirm.confirmOk || \"确定\")\n\t                    .cancel(actionModel.confirm.confirmCancel || \"取消\");\n\t                return this.$mdDialog.show(confirm_1).then(function () {\n\t                    return _this.doAction(actionModel.key, item);\n\t                });\n\t        }\n\t        return null;\n\t        var _a;\n\t    };\n\t    Provider.prototype.doFormCheck = function ($form) {\n\t        if ($form) {\n\t            this.$rootScope.$broadcast(\"schemaFormValidate\");\n\t            if (!$form.$valid) {\n\t                console.log($form.$error);\n\t                this.mdUtils.showErrMsg(\"表单没有填写正确!\");\n\t                return false;\n\t            }\n\t        }\n\t        return true;\n\t    };\n\t    Provider.prototype.doDealResult = function (actionModel, results, clientData) {\n\t        _.forEach(actionModel.interfaces, function (iInterface) {\n\t            var result = results[iInterface.key];\n\t            if (result) {\n\t                _.forEach(iInterface.jpp.set, function (val, key) {\n\t                    pointer.set(clientData, key, pointer.get(result, val));\n\t                });\n\t                _.forEach(iInterface.jpp.del, function (val, key) {\n\t                    pointer.remove(clientData, key);\n\t                });\n\t            }\n\t        });\n\t        return clientData;\n\t    };\n\t    Provider.prototype.doAction = function (key, queryData, $form) {\n\t        var _this = this;\n\t        if (!this.doFormCheck($form)) {\n\t            return;\n\t        }\n\t        return this.getModel(key).then(function (actionModel) {\n\t            var interfacesRest = {};\n\t            _.each(actionModel.interfaces, function (interfaceModel) {\n\t                var promise, restAngular = interfaceModel.isRestful\n\t                    ? _this.restUtils.getCustomRestful(interfaceModel.address, interfaceModel.port, interfaceModel.path)\n\t                    : _this.restUtils.getCustom(interfaceModel.address, interfaceModel.port, interfaceModel.path);\n\t                switch (interfaceModel.method) {\n\t                    case interface_model_1.MethodType.POST:\n\t                        promise = restAngular.post(queryData, null);\n\t                        break;\n\t                    case interface_model_1.MethodType.GET:\n\t                        promise = restAngular.customGET(null, queryData, null);\n\t                        break;\n\t                    case interface_model_1.MethodType.PUT:\n\t                        promise = restAngular.customPUT(queryData, pointer.get(queryData, interfaceModel.idFieldPath));\n\t                        break;\n\t                    case interface_model_1.MethodType.DELETE:\n\t                        promise = restAngular.customDELETE(pointer.get(queryData, interfaceModel.idFieldPath), null);\n\t                }\n\t                interfacesRest[interfaceModel.key] = promise;\n\t            });\n\t            return interfacesRest;\n\t        }).then(function (interfacesRest) {\n\t            return _this.$q.all(interfacesRest);\n\t        });\n\t    };\n\t    Provider.$inject = [\"$rootScope\", \"$injector\", \"restUtils\", \"materialUtils\", \"$q\", \"$mdDialog\"];\n\t    Provider._name = 'fxAction';\n\t    return Provider;\n\t}());\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = function (module) {\n\t    module.provider(Provider._name, [Provider]);\n\t};\n\n\n/***/ }\n\n})\n\n\n/** WEBPACK FOOTER **\n ** 0.f61435394748804b47bc.hot-update.js\n **/","/**\n * Created by NICK on 16/8/9.\n */\n\nimport * as angular from 'angular';\nimport * as ngMaterial from 'angular-material';\nimport 'expose?JSONEditor!jsoneditor';\nimport 'ng-jsoneditor';\n\nimport actProviderRegFunc from './services/action.provider';\nimport actUtilsFunc from './services/utils.service';\nimport restSvrMod from '../../services/rest.service';\nimport loginSchFunc from './schemas/login.value';\nimport moduleSchFunc from './schemas/modules.value';\nimport crawlerSchFunc from './schemas/crawler.value';\nimport commonSchFunc from './schemas/common.value';\nimport formActionFunc from './directives/form.directive';\nimport listActionFunc from './directives/list.directive';\nimport dialogFormFunc from './directives/dialog-form.directive';\nimport searchActionFunc from './directives/search.directive';\nimport wizardActionFunc from './directives/wizard.directive';\nimport wizardDialogActionFunc from './directives/dialog-wizard.directive';\nimport builderActionFunc from './directives/builder.directive';\n\nimport autoCompleteFunc from './services/autocomplete.provider';\nimport jsonEditorFunc from './services/jsoneditor.provider';\n\nimport 'angular-schema-form';\nimport 'angular-schema-form-ng-material';\nimport './services/validator.custom.value';\n\nconst _name = \"fxAction\";\nconst module = angular.module(`${_name}Module`, [ngMaterial, restSvrMod, \"schemaForm\", \"ng.jsoneditor\"]);\n\nactUtilsFunc(module);\nactProviderRegFunc(module);\nformActionFunc(module);\nlistActionFunc(module);\nmoduleSchFunc(module);\nloginSchFunc(module);\ndialogFormFunc(module);\nsearchActionFunc(module);\nwizardActionFunc(module);\nwizardDialogActionFunc(module);\nbuilderActionFunc(module);\ncrawlerSchFunc(module);\ncommonSchFunc(module);\nautoCompleteFunc(module);\njsonEditorFunc(module);\n\n\nfunction sfLayout(args) {\n    var layoutDiv = args.fieldFrag.querySelector('[sf-layout]');\n\n    if (layoutDiv && args.form.grid) {\n        Object.getOwnPropertyNames(args.form.grid).forEach(function (property, idx, array) {\n            layoutDiv.setAttribute(property, args.form.grid[property]);\n        });\n    }\n};\n// 处理默认的错误信息\nmodule\n    .config([\"sfErrorMessageProvider\", (sfErrorMessageProvider)=> {\n        // sfErrorMessageProvider.setDefaultMessage(\"10000\", \"邮箱格式不正确\");\n        // sfErrorMessageProvider.setDefaultMessage(\"10001\", \"两次密码不一致\");\n        // sfErrorMessageProvider.setDefaultMessage(\"10002\", \"用户名中存在非法字符\");\n        // sfErrorMessageProvider.setDefaultMessage(\"10003\", \"手机格式不正确\");\n        // sfErrorMessageProvider.setDefaultMessage(\"10004\", \"JSON格式不正确\");\n        // sfErrorMessageProvider.setDefaultMessage(\"10005\", \"地址格式不正确\");\n        sfErrorMessageProvider.setDefaultMessage(\"302\", \"[{{title}}]是必填项\");\n        sfErrorMessageProvider.setDefaultMessage(\"103\", \"[{{title}}]超过了最大值{{schema.maximum}}\");\n        sfErrorMessageProvider.setDefaultMessage(\"101\", \"[{{title}}]小于最小值{{schema.minimum}}\");\n        sfErrorMessageProvider.setDefaultMessage(\"200\", \"[{{title}}]字符长度小于最小值({{schema.minLength}})\");\n        sfErrorMessageProvider.setDefaultMessage(\"201\", \"[{{title}}]字符长度大于最大值({{schema.maxLength}})\");\n        sfErrorMessageProvider.setDefaultMessage(\"400\", \"数组长度不正确，{{schema.minItems||0}}-{{schema.maxItems||'∞'}}\");\n        sfErrorMessageProvider.setDefaultMessage(\"500\", \"格式不正确\");\n    }])\n    // 添加自定义的表单组件\n    .config([\"sfBuilderProvider\", \"schemaFormDecoratorsProvider\", \"jsonEditorBuilderProvider\", \"autoCompleteBuilderProvider\", (sfBuilderProvider, schemaFormDecoratorsProvider, jsonEditorBuilder, autoCompleteBuilder)=> {\n        // jsoneditor--schema-form组件化\n        schemaFormDecoratorsProvider.defineAddOn(\n            'materialDecorator',\n            'jeditor',\n            \"./decorators/jsoneditor.jade\",\n            sfBuilderProvider.stdBuilders.concat(jsonEditorBuilder.builder)\n        );\n        // card--schema-form组件化\n        schemaFormDecoratorsProvider.defineAddOn(\n            'materialDecorator',\n            'card',\n            \"./decorators/card.jade\",\n            [sfBuilderProvider.builders.sfField, sfBuilderProvider.builders.condition, sfBuilderProvider.builders.transclusion]\n        );\n        // autocomplete--schema-form组件化\n        schemaFormDecoratorsProvider.defineAddOn(\n            'materialDecorator',\n            'autocomplete-1',\n            \"./decorators/autocomplete-1.jade\",\n            [sfBuilderProvider.builders.sfField, sfLayout, sfBuilderProvider.builders.condition, autoCompleteBuilder.builder, sfBuilderProvider.builders.transclusion]\n        );\n        // // section--schema-section组件\n        // schemaFormDecoratorsProvider.defineAddOn(\n        //     'materialDecorator',\n        //     'section-1',\n        //     \"./decorators/section-1.jade\",\n        //     [sfBuilderProvider.builders.sfField, sfBuilderProvider.builders.ngModel, sfBuilderProvider.builders.condition, sfBuilderProvider.builders.simpleTransclusion, sfBuilderProvider.builders.array]\n        // );\n    }])\n    // 打包工具的原因,只能把模板字符串写入cache中\n    .run([\"$templateCache\", \"autoCompleteBuilder\", ($templateCache: ng.ITemplateCacheService)=> {\n        $templateCache.put('./decorators/jsoneditor.jade', require(\"./decorators/jsoneditor.jade\")());\n        $templateCache.put('./decorators/card.jade', require(\"./decorators/card.jade\")());\n        $templateCache.put('./decorators/autocomplete-1.jade', require(\"./decorators/autocomplete-1.jade\")());\n        $templateCache.put('./decorators/section-1.jade', require(\"./decorators/section-1.jade\")());\n    }]);\n\n\nexport default module.name;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/directives/action/index.ts\n **/","/**\n * Created by NICK on 16/8/16.\n */\n\nimport * as _ from 'lodash';\nimport {IActionModel, ActionType, IClientData} from \"../models/action.model\";\nimport {IInterfaceModel, MethodType} from \"../models/interface.model\";\nimport * as pointer from 'json-pointer';\n\nclass DialogController {\n    static $inject = [\"$scope\", \"item\", \"key\", \"submit\"];\n\n    constructor(private $scope, private item, private key, private submit) {\n        console.log(arguments);\n    }\n}\n\nclass Provider {\n    static $inject = [\"$rootScope\", \"$injector\", \"restUtils\", \"materialUtils\", \"$q\", \"$mdDialog\"];\n\n    static _name: string = 'fxAction';\n\n    constructor(private $rootScope: ng.IRootScopeService, private $injector: ng.auto.IInjectorService, private restUtils: fx.utils.restStatic, private mdUtils: fx.utils.materialStatic, private $q: ng.IQService, private $mdDialog: ng.material.IDialogService) {\n        return this;\n    }\n\n    $get: Array<string|Function> = [\"$injector\", ($injector)=> {\n        const service = $injector.invoke(Provider, this, null);\n\n        return service;\n    }];\n\n    /**\n     * 查找操作模型,如果本地没有,则去服务器中查找\n     * @param key  {String}  操作的KEY\n     * @returns {IPromise<T>}\n     */\n    getModel(key: string) {\n        const defer = this.$q.defer();\n\n        if (!key) {\n            defer.reject();\n        } else {\n\n            if (this.$injector.has(key)) {\n                defer.resolve(_.cloneDeepWith(this.$injector.get(key)));\n            } else {\n                this.mdUtils.showErrMsg(`没有找到key[${key}]!`);\n                defer.reject(key);\n            }\n        }\n\n        return defer.promise;\n    }\n\n    /**\n     * 查找操作模型数组,如果本地没有,则去服务器中查找\n     * @param keys\n     * @returns {IPromise<T>}\n     */\n    getModels(keys: Array<string|IActionModel>) {\n        const defer = this.$q.defer();\n        const actionModels = {};\n        const notFoundsKeys = [];\n        const promises: {[id: string]: ng.IPromise<any>} = {};\n\n        _.each(keys, (key)=> {\n            if (_.isObject(key)) {\n                actionModels[(key as IActionModel).key] = key;\n            }\n            else {\n                promises[key as string] = this.getModel(key as string).then((actionModel)=> {\n                    actionModels[key as string] = actionModel;\n                }).catch((key)=> {\n                    notFoundsKeys.push(key);\n                });\n            }\n        });\n\n        this.$q.all(promises).then(()=> {\n            defer.resolve(actionModels);\n        }).catch(()=> {\n            defer.resolve(actionModels);\n        });\n\n        return defer.promise;\n    }\n\n    /**\n     * 执行弹窗表单操作\n     * @param $event\n     * @param actionModel\n     * @param item\n     * @return {Promise<any>}\n     */\n    doActionModel($event: MouseEvent, actionModel: IActionModel, item?: any, callback?: Function): ng.IPromise<any> {\n        // 表单和多级表单操作,弹出dialog\n        // 确认框操作,弹出确认窗口\n        switch (actionModel.type) {\n            case ActionType.wizard:\n            case ActionType.form:\n                const templates = {\n                    [ActionType.form]: require(\"../tpls/form-dialog-action.jade\")(),\n                    [ActionType.wizard]: require(\"../tpls/wizard-dialog-action.jade\")()\n                };\n\n                return this.$mdDialog.show({\n                    targetEvent: $event,\n                    clickOutsideToClose: false,\n                    escapeToClose: false,\n                    fullscreen: true,\n                    resolve: {\n                        'item': item || {},\n                        'key': actionModel.key,\n                        'submit': callback\n                    },\n                    controller: DialogController,\n                    controllerAs: \"dialogCtl\",\n                    template: templates[actionModel.type]\n                }).then(()=> {\n                    item = null;\n                });\n            case ActionType.confirm:\n                const confirm = this.$mdDialog.confirm()\n                    .title(actionModel.confirm.confirmTitle)\n                    .textContent(actionModel.confirm.confirmContent)\n                    .ariaLabel(actionModel.confirm.confirmTitle)\n                    .targetEvent($event)\n                    .ok(actionModel.confirm.confirmOk || \"确定\")\n                    .cancel(actionModel.confirm.confirmCancel || \"取消\");\n\n                return this.$mdDialog.show(confirm).then(()=> {\n                    return this.doAction(actionModel.key, item);\n                });\n        }\n\n        return null;\n    }\n\n    /**\n     * 检测表单是否合法\n     * @param $form\n     * @returns {boolean}\n     */\n    doFormCheck($form) {\n        if ($form) {\n            this.$rootScope.$broadcast(\"schemaFormValidate\");\n            if (!$form.$valid) {\n                console.log($form.$error);\n                this.mdUtils.showErrMsg(\"表单没有填写正确!\");\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * 处理接口的数据,数据的互相拷贝\n     * @param actionModel\n     * @param results\n     * @param clientData\n     * @return {IClientData}\n     */\n    doDealResult(actionModel: IActionModel, results: Object, clientData: IClientData) {\n        _.forEach(actionModel.interfaces, (iInterface)=> {\n            let result = results[iInterface.key];\n\n            if (result) {\n                // 接口数据拷贝到本地\n                _.forEach(iInterface.jpp.set, (val, key)=> {\n                    pointer.set(clientData, key, pointer.get(result, val));\n                });\n                // 本地数据的删除\n                _.forEach(iInterface.jpp.del, (val, key)=> {\n                    pointer.remove(clientData, key);\n                });\n            }\n        });\n\n        return clientData;\n    }\n\n    /**\n     * 获取接口列表,使用restangular处理接口地址,最后调用接口\n     * @param key\n     * @param queryData\n     * @param $form\n     * @returns {IPromise<TResult>}\n     */\n    doAction(key: string, queryData: Object|restangular.IElement, $form?: ng.IFormController) {\n        if (!this.doFormCheck($form)) {\n            return;\n        }\n\n        return this.getModel(key).then((actionModel: IActionModel)=> {\n            let interfacesRest: { [id: string]: ng.IPromise<any>; } = {};\n\n            // 获取接口列表,使用restangular处理接口地址,最后调用接口,返回promise\n            _.each(actionModel.interfaces, (interfaceModel: IInterfaceModel)=> {\n                // 获取接口的地址\n                let promise: ng.IPromise<any>,\n                    restAngular = interfaceModel.isRestful\n                        ? this.restUtils.getCustomRestful(interfaceModel.address, interfaceModel.port, interfaceModel.path)\n                        : this.restUtils.getCustom(interfaceModel.address, interfaceModel.port, interfaceModel.path);\n                // 判断接口请求类型,做提交操作\n                switch (interfaceModel.method) {\n                    case MethodType.POST:\n                        promise = restAngular.post(queryData, null);\n                        break;\n                    case MethodType.GET:\n                        promise = restAngular.customGET(null, queryData, null);\n                        break;\n                    case MethodType.PUT:\n                        promise = restAngular.customPUT(queryData, pointer.get(queryData, interfaceModel.idFieldPath));\n                        break;\n                    case MethodType.DELETE:\n                        promise = restAngular.customDELETE(pointer.get(queryData, interfaceModel.idFieldPath), null)\n                }\n                interfacesRest[interfaceModel.key] = promise;\n            });\n\n            return interfacesRest;\n        }).then((interfacesRest)=> {\n            // 返回promise\n            return this.$q.all(interfacesRest);\n        });\n    }\n}\n\nexport default (module: ng.IModule)=> {\n    module.provider(Provider._name, [Provider]);\n};\n\n\n/** WEBPACK FOOTER **\n ** ./src/directives/action/services/action.provider.ts\n **/"],"sourceRoot":""}