{"version":3,"sources":["webpack:///0.08be02998b28f967016b.hot-update.js","webpack:///./src/directives/angular-schema-form-material/material-decorator.js?1a15"],"names":["webpackHotUpdate","71","module","exports","angular","run","$templateCache","put","directive","$compile","$timeout","restrict","scope","link","element","attrs","ngModel","reduceHelper","obj","i","modelValue","item","form","key","slice","length","reduce","model","e","undefined","addClass","sfMaterialClass","materialDecoratorConfig","schemaFormProvider","decoratorsProvider","sfBuilderProvider","sfPathProvider","$injector","sfLayout","args","layoutDiv","fieldFrag","querySelector","grid","Object","getOwnPropertyNames","forEach","property","idx","array","setAttribute","sfMessagesNodeHandler","html","div","document","createElement","innerHTML","firstChild","sfMessagesBuilder","messagesDiv","sfMessagesNode","child","cloneNode","appendChild","textareaBuilder","textareaFrag","maxLength","maxlength","mdAutocompleteBuilder","mdAutocompleteFrag","minLength","title","placeholder","onChange","mdSwitchBuilder","mdSwitchFrag","schema","titleMap","sfOptionsBuilder","mdSelectFrag","selectOptions","getOptions","getOptionsHandler","links","related","rel","optionSource","href","replace","sfOptionsProcessor","mdDatepickerBuilder","mdDatepickerFrag","minDate","minimum","maxDate","maximum","mdTabsBuilder","tabs","mdTabsFrag","tab","index","mdTab","path","mdTabBody","childFrag","build","items","state","dateDefault","name","options","type","format","f","stdFormObj","lookup","stringify","base","simpleTransclusion","builders","ngModelOptions","sfField","condition","sfMessages","sfOptions","mdAutocomplete","mdSwitch","mdDatepicker","mdTabs","textarea","core","defaults","concat","arrays","string","unshift","defineDecorator","actions","template","builder","autocomplete","boolean","button","checkbox","checkboxes","date","default","fieldset","help","number","password","radios","radios-inline","radiobuttons","section","select","submit","tabarray","switch","chips","evalExpr","optionData","data","enumTitleMap","push","value","sfmExternalOptionsDirective","$http","$observe","dataURI","get","then","response","sfCamelKeyFilter","formKey","part","toString","toLowerCase","split","toUpperCase","join","config","filter","$inject","require","once","$watch","sfTypeParser","isNumber","indexOf","isInteger","numberRE","$parsers","viewValue","parseFloat","test","parseInt","console","log","isNaN"],"mappings":"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","file":"0.08be02998b28f967016b.hot-update.js","sourcesContent":["webpackHotUpdate(0,{\n\n/***/ 71:\n/***/ function(module, exports) {\n\n\tangular.module(\"schemaForm\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"decorators/material/actions-trcl.html\",\"<div class=\\\"btn-group schema-form-actions {{form.htmlClass}}\\\" ng-transclude=\\\"\\\"></div>\");\n\t$templateCache.put(\"decorators/material/actions.html\",\"<section layout=\\\"row\\\" class=\\\"btn-group schema-form-actions {{form.htmlClass}}\\\"></section>\");\n\t$templateCache.put(\"decorators/material/array.html\",\"<div class=\\\"schema-form-array {{form.htmlClass}}\\\" sf-field-model=\\\"sf-new-array\\\" sf-new-array=\\\"\\\"><md-toolbar class=\\\"md-default\\\"><div class=\\\"md-toolbar-tools\\\"><h2 flex=\\\"\\\">{{ ::form.title }}</h2><md-button ng-hide=\\\"form.readonly || form.add === null\\\" ng-click=\\\"appendToArray()\\\" class=\\\"md-icon-button {{ form.style.add || \\'btn-default\\' }}\\\"><md-tooltip>新增</md-tooltip><md-icon><ng-md-icon icon=\\\"add_circle_outline\\\"></ng-md-icon></md-icon></md-button></div></md-toolbar><md-content ng-model=\\\"modelArray\\\" flex=\\\"\\\" layout-padding=\\\"\\\" class=\\\"md-whiteframe-1dp\\\"><md-list ui-sortable=\\\"form.sortOptions\\\"><md-list-item layout=\\\"row\\\" ng-init=\\\"fieldClass = form.fieldHtmlClass;copyWithIndex($index)\\\" ng-repeat-start=\\\"item in modelArray track by $index\\\" schema-form-array-items=\\\"\\\"><md-button flex-order=\\\"2\\\" ng-hide=\\\"form.readonly || form.remove === null\\\" ng-click=\\\"deleteFromArray($index)\\\" class=\\\"md-icon-button\\\" aria-label=\\\"Delete\\\"><md-tooltip>删除</md-tooltip><md-icon><ng-md-icon icon=\\\"close-circle-outline\\\"></ng-md-icon></md-icon></md-button></md-list-item><md-divider ng-repeat-end=\\\"\\\"></md-divider></md-list></md-content><md-input-container style=\\\"margin-top:0;\\\" class=\\\"md-block\\\" md-is-error=\\\"ngModel.$error && ngModel.$invalid\\\"><div ng-messages=\\\"ngModel.$error\\\" aria-live=\\\"assertive\\\"><div sf-message=\\\"\\\" ng-message=\\\"\\\"></div></div><div class=\\\"hint md-char-counter\\\" ng-if=\\\"form.showHints\\\" ng-bind=\\\"form.description\\\"></div></md-input-container></div>\");\n\t$templateCache.put(\"decorators/material/autocomplete.html\",\"<md-input-container class=\\\"form-group no-errors schema-form-autocomplete {{form.htmlClass}}\\\" md-is-error=\\\"ngModel.$error && ngModel.$invalid\\\" sf-layout=\\\"\\\"><md-autocomplete flex=\\\"\\\" style=\\\"height: 48px;\\\" ng-disabled=\\\"form.readonly\\\" ng-model=\\\"$$value$$\\\" sf-autocomplete=\\\"\\\" sf-field-model=\\\"replaceAll\\\" ng-init=\\\"autoData={};form.init($$value$$,autoData,arrayIndex)\\\" md-no-cache=\\\"form.noCache\\\" md-selected-item=\\\"autoData.selected\\\" md-search-text=\\\"autoData.searchText\\\" md-selected-item-change=\\\"form.onChange(item, form, model, modelArray, arrayIndex)\\\" md-items=\\\"item in form.query(autoData.searchText,modelArray,arrayIndex,$parent)\\\" md-item-text=\\\"item[form.textField]\\\" md-floating-label=\\\"{{ form.title }}\\\" placeholder=\\\"{{ form.placeholder }}\\\" md-menu-class=\\\"autocomplete-custom-template\\\"><md-item-template><span md-highlight-text=\\\"searchText\\\">{{item.name}}</span></md-item-template><md-not-found>No matches found</md-not-found></md-autocomplete><input class=\\\"ng-hide\\\" name=\\\"{{::form.key|sfCamelKey}}\\\" sf-changed=\\\"form\\\" sf-field-model=\\\"\\\" schema-validate=\\\"form\\\"><div ng-messages=\\\"ngModel.$error\\\" aria-live=\\\"assertive\\\"><div sf-message=\\\"\\\" ng-message=\\\"\\\"></div></div><div class=\\\"hint md-char-counter\\\" ng-if=\\\"form.showHints\\\" ng-bind=\\\"form.description\\\"></div></md-input-container>\");\n\t$templateCache.put(\"decorators/material/card-content.html\",\"<md-card-content class=\\\"schema-form-card-content {{form.htmlClass}}\\\"></md-card-content>\");\n\t$templateCache.put(\"decorators/material/card.html\",\"<md-card class=\\\"schema-form-card {{form.htmlClass}}\\\"></md-card>\");\n\t$templateCache.put(\"decorators/material/checkbox.html\",\"<md-input-container class=\\\"checkbox schema-form-checkbox {{::form.htmlClass}}\\\" md-is-error=\\\"!$root.isEmptyObject(ngModel.$error)\\\"><md-checkbox sf-field-model=\\\"\\\" ng-model=\\\"$$value$$\\\" ng-disabled=\\\"form.readonly\\\" schema-validate=\\\"form\\\" sf-changed=\\\"form\\\" ng-model-options=\\\"form.ngModelOptions\\\" ng-true-value=\\\"{{form.trueValue || true}}\\\" ng-false-value=\\\"{{form.falseValue || false}}\\\" ng-class=\\\"form.fieldHtmlClass\\\" name=\\\"{{::form.key|sfCamelKey}}\\\" aria-label=\\\"{{::form.title}}\\\"><span>{{::form.title}}</span></md-checkbox><div ng-messages=\\\"ngModel.$error\\\" class=\\\"md-input-messages-animation\\\"><div sf-message=\\\"\\\" ng-message=\\\"\\\"></div></div><div class=\\\"md-char-counter\\\">{{ form.description }}</div></md-input-container>\");\n\t$templateCache.put(\"decorators/material/checkboxes.html\",\"<div sf-array=\\\"form\\\" sf-field-model=\\\"\\\" class=\\\"form-group schema-form-checkboxes {{::form.htmlClass}}\\\" ng-class=\\\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\\\" sf-messages=\\\"\\\"><label class=\\\"control-label\\\" ng-show=\\\"showTitle()\\\">{{::form.title}}</label><div class=\\\"checkbox\\\" ng-repeat=\\\"val in titleMapValues track by $index\\\"><md-checkbox ng-model=\\\"titleMapValues[$index]\\\" sf-changed=\\\"form\\\" ng-disabled=\\\"::form.readonly\\\" name=\\\"{{::form.key|sfCamelKey}}\\\" ng-true-value=\\\"true\\\" ng-false-value=\\\"false\\\" aria-label=\\\"{{::form.title}}\\\">{{::form.titleMap[$index].name}}</md-checkbox></div></div>\");\n\t$templateCache.put(\"decorators/material/chips.html\",\"<md-input-container class=\\\"form-group schema-form-chips {{form.htmlClass}}\\\" sf-field-model=\\\"sf-new-array\\\" sf-new-array=\\\"\\\" md-no-float=\\\"true\\\" md-is-error=\\\"ngModel.$error && ngModel.$invalid\\\"><md-chips sf-field-model=\\\"\\\" schema-form-array-items=\\\"\\\" readonly=\\\"form.readonly\\\" class=\\\"no-errors\\\" name=\\\"{{::form.key|sfCamelKey}}\\\" placeholder=\\\"{{::form.title}}\\\"><md-chip-template><strong ng-if=\\\"!form.template\\\">{{$chip}}</strong></md-chip-template></md-chips><div class=\\\"errors\\\" ng-model=\\\"modelArray\\\" schema-validate=\\\"form\\\" ng-messages=\\\"ngModel.$error\\\" aria-live=\\\"assertive\\\"><div sf-message=\\\"\\\" ng-message=\\\"\\\"></div></div><div class=\\\"hint md-char-counter\\\" ng-if=\\\"form.showHints\\\" ng-bind=\\\"form.description\\\"></div></md-input-container>\");\n\t$templateCache.put(\"decorators/material/date.html\",\"<div class=\\\"schema-form-date {{::form.htmlClass}}\\\"><label ng-show=\\\"showTitle()\\\" for=\\\"{{::form.key|sfCamelKey}}\\\">{{::form.title}}</label><md-datepicker sf-field-model=\\\"\\\" sf-changed=\\\"form\\\" schema-validate=\\\"form\\\" sf-type-parser=\\\"form.schema\\\" id=\\\"{{::form.key|sfCamelKey}}\\\" ng-show=\\\"::form.key\\\" ng-class=\\\"::form.fieldHtmlClass\\\" ng-disabled=\\\"::form.readonly\\\" md-placeholder=\\\"Enter date\\\" sf-messages=\\\"\\\"></md-datepicker></div>\");\n\t$templateCache.put(\"decorators/material/default.html\",\"<md-input-container class=\\\"schema-form-{{::form.type}} {{::form.htmlClass}}\\\" md-is-error=\\\"hasError()\\\" sf-layout=\\\"\\\" sf-material-class=\\\"md-input-has-value\\\"><label ng-show=\\\"showTitle()\\\" for=\\\"{{::form.key|sfCamelKey}}\\\">{{::form.title}}</label><md-icon ng-if=\\\"form.icon\\\"><ng-md-icon icon=\\\"{{ form.icon.leftIcon }}\\\" ng-style=\\\"form.icon.style\\\"></ng-md-icon></md-icon><input sf-field-model=\\\"\\\" type=\\\"{{::form.type}}\\\" step=\\\"any\\\" ng-model=\\\"$$value$$\\\" sf-changed=\\\"form\\\" placeholder=\\\"{{form.placeholder}}\\\" id=\\\"{{::form.key|sfCamelKey}}\\\" ng-class=\\\"::form.fieldHtmlClass\\\" ng-disabled=\\\"::form.readonly\\\" schema-validate=\\\"form\\\" name=\\\"{{::form.key|sfCamelKey}}\\\" aria-describedby=\\\"{{::form.key|sfCamelKey}}Status\\\"><div ng-messages=\\\"ngModel.$error\\\" aria-live=\\\"assertive\\\"><div sf-message=\\\"\\\" ng-message=\\\"\\\"></div></div><div class=\\\"hint md-char-counter\\\" ng-if=\\\"form.showHints\\\" ng-bind=\\\"form.description\\\"></div></md-input-container>\");\n\t$templateCache.put(\"decorators/material/fieldset-trcl.html\",\"<fieldset ng-disabled=\\\"form.readonly\\\" class=\\\"standard {{form.htmlClass}}\\\" flex=\\\"\\\"><legend ng-show=\\\"form.title\\\">{{ form.title }}</legend><div ng-transclude=\\\"\\\"></div></fieldset>\");\n\t$templateCache.put(\"decorators/material/fieldset.html\",\"<fieldset ng-disabled=\\\"form.readonly\\\" class=\\\"standard {{form.htmlClass}}\\\" flex=\\\"\\\"><legend ng-show=\\\"form.title\\\">{{ form.title }}</legend></fieldset>\");\n\t$templateCache.put(\"decorators/material/help.html\",\"<div class=\\\"helpvalue schema-form-helpvalue {{form.htmlClass}}\\\" ng-bind-html=\\\"form.helpvalue\\\"></div>\");\n\t$templateCache.put(\"decorators/material/radio-buttons.html\",\"<div class=\\\"form-group schema-form-radiobuttons {{form.htmlClass}}\\\" ng-class=\\\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\\\" sf-layout=\\\"\\\" sf-messages=\\\"\\\"><div><label class=\\\"control-label\\\" ng-show=\\\"showTitle()\\\">{{form.title}}</label></div><section layout=\\\"row\\\" layout-sm=\\\"column\\\" layout-align=\\\"center center\\\"><md-input-container ng-repeat=\\\"item in form.titleMap\\\"><md-button type=\\\"button\\\" class=\\\"group md-raised\\\" sf-field-model=\\\"replaceAll\\\" ng-model=\\\"$$value$$\\\" sf-changed=\\\"form\\\" ng-class=\\\"{\\'md-primary\\': ($$value$$ == item.value)}\\\" ng-disabled=\\\"form.readonly\\\" ng-model-options=\\\"form.ngModelOptions\\\" schema-validate=\\\"form\\\" ng-value=\\\"item.value\\\" ng-click=\\\"$$value$$ = item.value\\\" name=\\\"{{form.key.join(\\'.\\')}}\\\"><span ng-bind-html=\\\"item.name\\\"></span></md-button></md-input-container></section></div>\");\n\t$templateCache.put(\"decorators/material/radios-inline.html\",\"<div class=\\\"form-group schema-form-radios-inline {{form.htmlClass}}\\\" ng-class=\\\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\\\" sf-layout=\\\"\\\" sf-messages=\\\"\\\"><label class=\\\"control-label\\\" ng-show=\\\"showTitle()\\\">{{form.title}}</label><md-radio-group layout=\\\"row\\\" sf-field-model=\\\"replaceAll\\\" ng-model=\\\"$$value$$\\\" class=\\\"{{form.fieldHtmlClass}}\\\" ng-class=\\\"{ active: item.value === $$value$$ }\\\" sf-changed=\\\"form\\\" schema-validate=\\\"form\\\" ng-disabled=\\\"form.readonly\\\" name=\\\"{{form.key.join(\\'.\\')}}\\\"><md-radio-button ng-repeat=\\\"item in form.titleMap\\\" ng-value=\\\"item.value\\\"><span ng-bind-html=\\\"item.name\\\"></span></md-radio-button></md-radio-group></div>\");\n\t$templateCache.put(\"decorators/material/radios.html\",\"<div class=\\\"form-group schema-form-radios {{form.htmlClass}}\\\" ng-class=\\\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\\\"><label class=\\\"control-label\\\" ng-show=\\\"showTitle()\\\" aria-label=\\\"{{form.title}}\\\" layout=\\\"row\\\">{{form.title}} {{form.titleMap | json}}</label><div><md-radio-group sf-field-model=\\\"\\\" sf-changed=\\\"form\\\" ng-disabled=\\\"form.readonly\\\" name=\\\"{{form.key.join(\\'.\\')}}\\\" sf-layout=\\\"\\\" sf-messages=\\\"\\\"><md-radio-button ng-repeat=\\\"item in form.titleMap\\\" ng-value=\\\"item.value\\\" class=\\\"{{form.fieldHtmlClass}}\\\" sf-field-model=\\\"ng-class\\\" ng-class=\\\"{ active: item.value === $$value$$ }\\\"><span ng-bind-html=\\\"item.name\\\"></span></md-radio-button></md-radio-group></div></div>\");\n\t$templateCache.put(\"decorators/material/section.html\",\"<md-content class=\\\"schema-form-section {{::form.htmlClass}}\\\" sf-layout=\\\"\\\"></md-content>\");\n\t$templateCache.put(\"decorators/material/select.html\",\"<md-input-container class=\\\"form-group {{::form.htmlClass}} schema-form-select\\\" md-is-error=\\\"ngModel.$error && ngModel.$invalid\\\" sf-layout=\\\"\\\" sf-material-class=\\\"md-input-has-value\\\"><label ng-show=\\\"::showTitle()\\\">{{::form.title}}</label><md-select sf-field-model=\\\"\\\" schema-validate=\\\"form\\\"><md-optgroup ng-repeat-start=\\\"(key, opt) in form.getOptions(form, evalExpr) | orderBy:\\'group\\' as optGroups\\\" ng-if=\\\"opt.group && opt.group != optGroups[key-1].group\\\" label=\\\"{{::opt.group}}\\\" aria-label=\\\"{{::opt.group}}\\\"><md-option ng-repeat=\\\"(key, filtered) in form.getOptions(form, evalExpr) | filter: {group: opt.group} | orderBy:\\'name\\' as opts\\\" ng-value=\\\"::filtered.value\\\" aria-label=\\\"{{::filtered.name}}\\\">{{::filtered.name}}</md-option></md-optgroup><md-option ng-if=\\\"!opt.group\\\" ng-value=\\\"::opt.value\\\" ng-repeat-end=\\\"\\\">{{::opt.name}}</md-option></md-select><div ng-messages=\\\"ngModel.$error\\\" aria-live=\\\"assertive\\\"><div sf-message=\\\"\\\" ng-message=\\\"\\\"></div></div><div class=\\\"hint md-char-counter\\\" ng-if=\\\"form.showHints\\\" ng-bind=\\\"form.description\\\"></div></md-input-container>\");\n\t$templateCache.put(\"decorators/material/slider.html\",\"<md-input-container class=\\\"schema-form-slider {{form.htmlClass}}\\\"><label ng-show=\\\"showTitle()\\\" for=\\\"{{::form.key|sfCamelKey}}\\\">{{::form.title}}</label><md-slider sf-field-model=\\\"\\\" flex=\\\"\\\" id=\\\"{{::form.key|sfCamelKey}}\\\" min=\\\"0\\\" max=\\\"255\\\" aria-label=\\\"blue\\\"></md-slider></md-input-container>\");\n\t$templateCache.put(\"decorators/material/submit.html\",\"<section class=\\\"schema-form-submit {{form.htmlClass}}\\\" sf-messages=\\\"\\\"><md-button class=\\\"md-raised {{ form.style || \\'md-primary\\' }} {{form.fieldHtmlClass}}\\\" type=\\\"{{::form.type}}\\\" ng-disabled=\\\"form.readonly\\\" aria-label=\\\"{{::form.title}}\\\"><md-tooltip ng-if=\\\"::form.tip\\\">{{::form.tip}}</md-tooltip>{{::form.title}}</md-button></section>\");\n\t$templateCache.put(\"decorators/material/switch.html\",\"<md-input-container class=\\\"schema-form-switch {{::form.htmlClass}}\\\"><md-switch sf-field-model=\\\"\\\" sf-changed=\\\"form\\\" sf-type-parser=\\\"form.schema\\\" sf-messages=\\\"\\\" schema-validate=\\\"form\\\" id=\\\"{{::form.key|sfCamelKey}}\\\" aria-label=\\\"{{form.title}}\\\" ng-show=\\\"::form.key\\\" ng-class=\\\"form.fieldHtmlClass\\\" ng-disabled=\\\"::form.readonly\\\"><span ng-show=\\\"showTitle()\\\" for=\\\"{{::form.key|sfCamelKey}}\\\">{{::form.title}}</span></md-switch></md-input-container>\");\n\t$templateCache.put(\"decorators/material/tabarray.html\",\"<div class=\\\"schema-form-array {{form.htmlClass}}\\\" sf-field-model=\\\"sf-new-array\\\" sf-new-array=\\\"\\\"><md-toolbar class=\\\"md-warn\\\"><div class=\\\"md-toolbar-tools\\\"><h2 flex=\\\"\\\">{{ ::form.title }}</h2><md-button ng-hide=\\\"form.readonly || form.add === null\\\" ng-click=\\\"appendToArray()\\\" class=\\\"md-icon-button {{ form.style.add || \\'btn-default\\' }}\\\"><md-tooltip>新增</md-tooltip><md-icon><ng-md-icon icon=\\\"add_circle_outline\\\"></ng-md-icon></md-icon></md-button><md-button ng-hide=\\\"form.readonly || form.del === null\\\" ng-click=\\\"deleteFromArray(form.selectedIndex)\\\" class=\\\"md-icon-button {{ form.style.del || \\'btn-default\\' }}\\\"><md-tooltip>删除</md-tooltip><md-icon><ng-md-icon icon=\\\"close-circle-outline\\\"></ng-md-icon></md-icon></md-button></div></md-toolbar><md-tabs md-selected=\\\"form.selectedIndex\\\" md-dynamic-height=\\\"\\\" md-border-bottom=\\\"\\\" md-autoselect=\\\"\\\"><md-tab ng-repeat=\\\"item in modelArray track by $index\\\" ng-disabled=\\\"item.disabled\\\" label=\\\"{{ (form.title + ($index+1)) || item.title}}\\\"><div class=\\\"tab{{$index%4}}\\\" layout-padding=\\\"\\\" schema-form-array-items=\\\"\\\" ng-init=\\\"copyWithIndex($index)\\\"></div></md-tab></md-tabs></div>\");\n\t$templateCache.put(\"decorators/material/tabs.html\",\"<div sf-field-model=\\\"\\\" class=\\\"schema-form-tabs {{::form.htmlClass}}\\\"><md-tabs md-dynamic-height=\\\"\\\" md-selected=\\\"selected\\\" md-autoselect=\\\"\\\" ng-init=\\\"selected = 0\\\"></md-tabs></div>\");\n\t$templateCache.put(\"decorators/material/textarea.html\",\"<md-input-container class=\\\"{{::form.htmlClass}} schema-form-textarea\\\" sf-layout=\\\"\\\" md-is-error=\\\"ngModel.$error && ngModel.$invalid\\\"><label ng-show=\\\"showTitle()\\\" for=\\\"{{::form.key|sfCamelKey}}\\\">{{::form.title}}</label> <textarea ng-class=\\\"::form.fieldHtmlClass\\\" id=\\\"{{::form.key|sfCamelKey}}\\\" sf-changed=\\\"form\\\" ng-disabled=\\\"::form.readonly\\\" sf-field-model=\\\"\\\" schema-validate=\\\"form\\\" name=\\\"{{::form.key|sfCamelKey}}\\\"></textarea><div ng-messages=\\\"ngModel.$error\\\" aria-live=\\\"assertive\\\"><div sf-message=\\\"\\\" ng-message=\\\"\\\"></div></div><div class=\\\"hint md-char-counter\\\" ng-if=\\\"form.showHints\\\" ng-bind=\\\"form.description\\\"></div></md-input-container>\");}]);\n\tangular.module('schemaForm').directive('sfMaterialClass', [\"$compile\", \"$timeout\", function ($compile, $timeout) {\n\t    return {\n\t        restrict: 'A',\n\t        scope: false,\n\t        link: function (scope, element, attrs, ngModel) {\n\t            function reduceHelper(obj, i) {\n\t                return obj[i]\n\t            }\n\t\n\t            var modelValue;\n\t\n\t            try {\n\t                if (scope.item) {\n\t                    modelValue = scope.form.key.slice(scope.form.key.length - 1).reduce(reduceHelper, scope.item || scope.model);\n\t                } else {\n\t                    modelValue = scope.form.key.reduce(reduceHelper, scope.model);\n\t                }\n\t            } catch (e) {\n\t                modelValue = undefined;\n\t            }\n\t\n\t            // Element class is not set in DOM if executed immediately.\n\t            // I don't understand exactly why but it's probably related to other directive job.\n\t            $timeout(function () {\n\t                if (modelValue !== null && typeof modelValue !== 'undefined' && modelValue !== false) {\n\t                    element.addClass(attrs.sfMaterialClass);\n\t                }\n\t            }, 0);\n\t        }\n\t    };\n\t}]);\n\t(function (angular, undefined) {\n\t    'use strict';\n\t    angular\n\t        .module('schemaForm')\n\t        .config(materialDecoratorConfig)\n\t        .directive('sfmExternalOptions', sfmExternalOptionsDirective)\n\t        .filter('sfCamelKey', sfCamelKeyFilter);\n\t\n\t    materialDecoratorConfig.$inject = [\n\t        'schemaFormProvider', 'schemaFormDecoratorsProvider', 'sfBuilderProvider', 'sfPathProvider', '$injector'\n\t    ];\n\t\n\t    function materialDecoratorConfig(schemaFormProvider, decoratorsProvider, sfBuilderProvider, sfPathProvider, $injector) {\n\t        var base = 'decorators/material/';\n\t\n\t        var simpleTransclusion = sfBuilderProvider.builders.simpleTransclusion;\n\t        var ngModelOptions = sfBuilderProvider.builders.ngModelOptions;\n\t        var ngModel = sfBuilderProvider.builders.ngModel;\n\t        var sfField = sfBuilderProvider.builders.sfField;\n\t        var condition = sfBuilderProvider.builders.condition;\n\t        var array = sfBuilderProvider.builders.array;\n\t\n\t        var sfLayout = sfLayout;\n\t        var sfMessagesNode = sfMessagesNodeHandler();\n\t        var sfMessages = sfMessagesBuilder;\n\t        var sfOptions = sfOptionsBuilder;\n\t        var mdAutocomplete = mdAutocompleteBuilder;\n\t        var mdSwitch = mdSwitchBuilder;\n\t        var mdDatepicker = mdDatepickerBuilder;\n\t        var mdTabs = mdTabsBuilder;\n\t        var textarea = textareaBuilder;\n\t\n\t        var core = [sfField, ngModel, ngModelOptions, condition, sfLayout];\n\t        var defaults = core.concat(sfMessages);\n\t        var arrays = core.concat(array);\n\t        // var arrays = core;\n\t\n\t        schemaFormProvider.defaults.string.unshift(dateDefault);\n\t\n\t        decoratorsProvider.defineDecorator('materialDecorator', {\n\t            actions: {template: base + 'actions.html', builder: [sfField, simpleTransclusion, condition]},\n\t            array: {template: base + 'array.html', builder: arrays},\n\t            autocomplete: {template: base + 'autocomplete.html', builder: defaults.concat(mdAutocomplete)},\n\t            boolean: {template: base + 'checkbox.html', builder: defaults},\n\t            button: {template: base + 'submit.html', builder: defaults},\n\t            checkbox: {template: base + 'checkbox.html', builder: defaults},\n\t            checkboxes: {template: base + 'checkboxes.html', builder: arrays},\n\t            date: {template: base + 'date.html', builder: defaults.concat(mdDatepicker)},\n\t            'default': {template: base + 'default.html', builder: defaults},\n\t            fieldset: {template: base + 'fieldset.html', builder: [sfField, simpleTransclusion, condition]},\n\t            help: {template: base + 'help.html', builder: defaults},\n\t            number: {template: base + 'default.html', builder: defaults},\n\t            password: {template: base + 'default.html', builder: defaults},\n\t            radios: {template: base + 'radios.html', builder: defaults},\n\t            'radios-inline': {template: base + 'radios-inline.html', builder: defaults},\n\t            radiobuttons: {template: base + 'radio-buttons.html', builder: defaults},\n\t            section: {\n\t                template: base + 'section.html',\n\t                builder: [sfField, simpleTransclusion, condition, sfLayout, ngModel]\n\t            },\n\t            select: {template: base + 'select.html', builder: defaults.concat(sfOptions)},\n\t            submit: {template: base + 'submit.html', builder: defaults},\n\t            tabs: {template: base + 'tabs.html', builder: [sfField, mdTabs, condition]},\n\t            tabarray: {template: base + 'tabarray.html', builder: arrays},\n\t            textarea: {template: base + 'textarea.html', builder: defaults.concat(textarea)},\n\t            switch: {template: base + 'switch.html', builder: defaults.concat(mdSwitch)},\n\t            chips: {template: base + 'chips.html', builder: defaults.concat([])},\n\t        });\n\t\n\t        function sfLayout(args) {\n\t            var layoutDiv = args.fieldFrag.querySelector('[sf-layout]');\n\t\n\t            if (layoutDiv && args.form.grid) {\n\t                Object.getOwnPropertyNames(args.form.grid).forEach(function (property, idx, array) {\n\t                    layoutDiv.setAttribute(property, args.form.grid[property]);\n\t                });\n\t            }\n\t        };\n\t\n\t        function sfMessagesNodeHandler() {\n\t            var html = '<div ng-if=\"ngModel.$invalid\" ng-messages=\"{dummy: true}\" class=\"ng-active\">' +\n\t                '<div ng-message=\"dummy\" class=\"md-input-message-animation\" sf-message=\"form.description\"></div></div>';\n\t            var div = document.createElement('div');\n\t            div.innerHTML = html;\n\t            return div.firstChild;\n\t        };\n\t\n\t        function sfMessagesBuilder(args) {\n\t            var messagesDiv = args.fieldFrag.querySelector('[sf-messages]');\n\t            if (messagesDiv && sfMessagesNode) {\n\t                var child = sfMessagesNode.cloneNode(true);\n\t                messagesDiv.appendChild(child);\n\t            }\n\t        };\n\t\n\t        function textareaBuilder(args) {\n\t            var textareaFrag = args.fieldFrag.querySelector('textarea');\n\t            var maxLength = args.form.maxlength || false;\n\t            if (textareaFrag && maxLength) {\n\t                textareaFrag.setAttribute('md-maxlength', maxLength);\n\t            }\n\t        };\n\t\n\t        function mdAutocompleteBuilder(args) {\n\t            var mdAutocompleteFrag = args.fieldFrag.querySelector('md-autocomplete');\n\t            var minLength = args.form.minLength || 1;\n\t            var maxLength = args.form.maxLength || false;\n\t            var title = args.form.title || args.form.placeholder || args.form.key.slice(-1)[0];\n\t\n\t            if (mdAutocompleteFrag) {\n\t                if (args.form.onChange) {\n\t                    mdAutocompleteFrag.setAttribute('md-selected-item-change', 'args.form.onChange()');\n\t                    mdAutocompleteFrag.setAttribute('md-search-text-change', 'args.form.onChange(searchText)');\n\t                }\n\t\n\t                // mdAutocompleteFrag.setAttribute('md-items', 'item in $filter(''autocomplete'')(searchText);');\n\t                mdAutocompleteFrag.setAttribute('md-min-length', minLength);\n\t                if (maxLength) {\n\t                    mdAutocompleteFrag.setAttribute('md-max-length', maxLength);\n\t                }\n\t\n\t                if (title) {\n\t                    mdAutocompleteFrag.setAttribute('md-floating-label', title);\n\t                }\n\t            }\n\t        };\n\t\n\t        function mdSwitchBuilder(args) {\n\t            var mdSwitchFrag = args.fieldFrag.querySelector('md-switch');\n\t            if (args.form.schema.titleMap) {\n\t                mdSwitchFrag.setAttribute('ng-true-value', args.form.schema.titleMap.true);\n\t                mdSwitchFrag.setAttribute('ng-false-value', args.form.schema.titleMap.false);\n\t            }\n\t        };\n\t\n\t        function sfOptionsBuilder(args) {\n\t            var mdSelectFrag = args.fieldFrag.querySelector('md-select');\n\t            var enumTitleMap = [];\n\t            var i;\n\t            var mdSelectFrag;\n\t\n\t            args.form.selectOptions = [];\n\t            args.form.getOptions = getOptionsHandler;\n\t\n\t            if (args.form.schema.links && (typeof args.form.schema.links) === 'object') {\n\t                var link;\n\t                var related = /({)([^}]*)(})/gm;\n\t                var source = /{{([^}]*)}}/gm;\n\t                var matched;\n\t\n\t                for (i = 0; i < args.form.schema.links.length; i++) {\n\t                    link = args.form.schema.links[i];\n\t                    if (link.rel === 'options') {\n\t                        // TODO enable filter to allow processing results\n\t                        // args.form.optionSource = link.href.replace(related, '$1$1 model.$2 | _externalOptionUri $3$3');\n\t                        args.form.optionSource = link.href.replace(related, '$1$1 model.$2 $3$3');\n\t                    }\n\t                }\n\t\n\t                mdSelectFrag.setAttribute('sfm-external-options', args.form.optionSource);\n\t            }\n\t            else {\n\t                args.form.selectOptions = sfOptionsProcessor(args.form);\n\t            }\n\t        };\n\t\n\t        function mdDatepickerBuilder(args) {\n\t            var mdDatepickerFrag = args.fieldFrag.querySelector('md-datepicker');\n\t            if (mdDatepickerFrag) {\n\t                if (args.form.onChange) {\n\t                    mdDatepickerFrag.setAttribute('ng-change', 'args.form.onChange(searchText)');\n\t                }\n\t                // mdDatepickerFrag.setAttribute('md-items', 'item in $filter(''autocomplete'')(searchText);');\n\t                var minDate = args.form.minimum || false;\n\t                var maxDate = args.form.maximum || false;\n\t                if (minDate) {\n\t                    mdDatepickerFrag.setAttribute('md-min-date', minDate);\n\t                }\n\t                if (maxDate) {\n\t                    mdDatepickerFrag.setAttribute('md-max-date', maxDate);\n\t                }\n\t            }\n\t        };\n\t\n\t        function mdTabsBuilder(args) {\n\t            if (args.form.tabs && args.form.tabs.length > 0) {\n\t                var mdTabsFrag = args.fieldFrag.querySelector('md-tabs');\n\t\n\t                args.form.tabs.forEach(function (tab, index) {\n\t                    var mdTab = document.createElement('md-tab');\n\t                    mdTab.setAttribute('label', '{{' + args.path + '.tabs[' + index + '].title}}');\n\t                    var mdTabBody = document.createElement('md-tab-body');\n\t                    var childFrag = args.build(tab.items, args.path + '.tabs[' + index + '].items', args.state);\n\t                    mdTabBody.appendChild(childFrag);\n\t                    mdTab.appendChild(mdTabBody);\n\t                    mdTabsFrag.appendChild(mdTab);\n\t                });\n\t            }\n\t        };\n\t\n\t        /**\n\t         * Material Datepicker\n\t         */\n\t        function dateDefault(name, schema, options) {\n\t            if (schema.type === 'string' && (schema.format === 'date' || schema.format === 'date-time')) {\n\t                var f = schemaFormProvider.stdFormObj(name, schema, options);\n\t                f.key = options.path;\n\t                f.type = 'date';\n\t                options.lookup[sfPathProvider.stringify(options.path)] = f;\n\t                return f;\n\t            }\n\t        };\n\t    };\n\t\n\t    function getOptionsHandler(form, evalExpr) {\n\t        if (form.optionData) {\n\t            return evalExpr(form.optionData);\n\t        }\n\t\n\t        if (form.selectOptions) {\n\t            return form.selectOptions;\n\t        }\n\t\n\t        return [];\n\t    }\n\t\n\t    function sfOptionsProcessor(data) {\n\t        var enumTitleMap = [];\n\t\n\t        if (data.titleMap) {\n\t            return data.titleMap;\n\t        }\n\t        else if (data.enum && data.enum.length) {\n\t            for (var i = 0; i < data.enum.length; i++) {\n\t                if (data.enum[i] && data.enum[i].length) {\n\t                    enumTitleMap.push({name: data.enum[i], value: data.enum[i]});\n\t                }\n\t            }\n\t        }\n\t\n\t        return enumTitleMap;\n\t    }\n\t\n\t    sfmExternalOptionsDirective.$inject = ['$http'];\n\t\n\t    function sfmExternalOptionsDirective($http) {\n\t        var directive = {\n\t            link: link,\n\t            restrict: 'A'\n\t        };\n\t\n\t        return directive;\n\t\n\t        function link(scope, element, attrs) {\n\t            attrs.$observe('sfmExternalOptions', function (dataURI) {\n\t                $http.get(dataURI)\n\t                    .then(function (response) {\n\t                        scope.form.selectOptions = sfOptionsProcessor(response.data);\n\t                    });\n\t            });\n\t        }\n\t    }\n\t\n\t    /**\n\t     * sfCamelKey Filter\n\t     */\n\t    function sfCamelKeyFilter() {\n\t        return function (formKey) {\n\t            if (!formKey) {\n\t                return '';\n\t            }\n\t            var part, i, key;\n\t            key = formKey.slice();\n\t            for (i = 0; i < key.length; i++) {\n\t                part = key[i].toString().toLowerCase().split('');\n\t                if (i && part.length) {\n\t                    part[0] = part[0].toUpperCase();\n\t                }\n\t                key[i] = part.join('');\n\t            }\n\t\n\t            return key.join('');\n\t        };\n\t    };\n\t\n\t})(angular, undefined);\n\t/*\n\t TODO add default filter for autocomplete which allows form.optionFilter or 'autocompleteFilter' to override\n\t Something along the following lines...\n\t if ($injector.has('autocompleteFilter')) {\n\t result = $filter('autocomplete')(input);\n\t }\n\t else\n\t if ($injector.has(args.form.optionFilter + 'Filter')) {\n\t result = $filter(args.form.optionFilter)(input);\n\t }\n\t else {\n\t if (args.form.optionFilter) {\n\t mdAutocomplete.setAttribute('md-items',\n\t 'item in evalExpr(\"this[\\\"\"+form.optionFilter+\"\\\"](\\\"\"+searchText+\"\\\")\")');\n\t }\n\t }\n\t\n\t .filter('autocompleteMovieTest', function() {\n\t function autocompleteMovieTestFilter(array, input){\n\t var current = input;\n\t // You could also call multiple filters here using:\n\t // current = $filter('filterName')(input)\n\t if(typeof current === 'string') {\n\t current = current.replace(' ','-').toLowerCase();\n\t }\n\t current = (!current) ? '_undefined' : current;\n\t return current;\n\t }\n\t\n\t return externalOptionUriFilter;\n\t })\n\t */\n\t\n\t/**\n\t * It might be a bug, but currently input[type=number] does not add\n\t * a parser, so the model gets populated with a string. It does however stop non numbers so it\n\t * must have some preproccessing. Anyway, this adds parser before schema-validate hooks into it.\n\t * FIXME: this is still not a complete solution. Inputting a string in an input[type=number] results\n\t * in parsers never firing and ngModel value removed. So no validation from schema-validate either.\n\t */\n\tangular.module('schemaForm').directive('sfTypeParser', function() {\n\t  return {\n\t    restrict: 'A',\n\t    scope: false,\n\t    require: 'ngModel',\n\t    link: function(scope, element, attrs, ngModel) {\n\t      var once = scope.$watch(attrs.sfTypeParser, function(schema) {\n\t        if (!schema) {\n\t          return;\n\t        }\n\t\n\t        var isNumber  = schema.type.indexOf('number') !== -1;\n\t        var isInteger = schema.type.indexOf('integer') !== -1;\n\t        var numberRE  = /^[0-9]*$/;\n\t        // Use index of since type can be either an array with two values or a string.\n\t        if (isNumber || isInteger) {\n\t          // The timing here seems to work. i.e. we get in before schema-validate\n\t          ngModel.$parsers.push(function(viewValue) {\n\t            var value;\n\t            if (isNumber) {\n\t              value = parseFloat(viewValue);\n\t            } else if (numberRE.test(viewValue)) {\n\t              // We test the value to check that it's a valid integer, otherwise we can easily\n\t              // get float -> integer parsing behind the scenes.\n\t              value = parseInt(viewValue, 10);\n\t            }\n\t            console.log('parser', numberRE.test(viewValue), viewValue, value)\n\t            if (value === undefined || isNaN(value)) {\n\t              //Let the validation fail. @FIXME: it fails with \"required\" for some reason.\n\t              return viewValue;\n\t            }\n\t            return value;\n\t          });\n\t        }\n\t\n\t        once();\n\t      });\n\t    }\n\t  };\n\t});\n\n\n/***/ }\n\n})\n\n\n/** WEBPACK FOOTER **\n ** 0.08be02998b28f967016b.hot-update.js\n **/","angular.module(\"schemaForm\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"decorators/material/actions-trcl.html\",\"<div class=\\\"btn-group schema-form-actions {{form.htmlClass}}\\\" ng-transclude=\\\"\\\"></div>\");\n$templateCache.put(\"decorators/material/actions.html\",\"<section layout=\\\"row\\\" class=\\\"btn-group schema-form-actions {{form.htmlClass}}\\\"></section>\");\n$templateCache.put(\"decorators/material/array.html\",\"<div class=\\\"schema-form-array {{form.htmlClass}}\\\" sf-field-model=\\\"sf-new-array\\\" sf-new-array=\\\"\\\"><md-toolbar class=\\\"md-default\\\"><div class=\\\"md-toolbar-tools\\\"><h2 flex=\\\"\\\">{{ ::form.title }}</h2><md-button ng-hide=\\\"form.readonly || form.add === null\\\" ng-click=\\\"appendToArray()\\\" class=\\\"md-icon-button {{ form.style.add || \\'btn-default\\' }}\\\"><md-tooltip>新增</md-tooltip><md-icon><ng-md-icon icon=\\\"add_circle_outline\\\"></ng-md-icon></md-icon></md-button></div></md-toolbar><md-content ng-model=\\\"modelArray\\\" flex=\\\"\\\" layout-padding=\\\"\\\" class=\\\"md-whiteframe-1dp\\\"><md-list ui-sortable=\\\"form.sortOptions\\\"><md-list-item layout=\\\"row\\\" ng-init=\\\"fieldClass = form.fieldHtmlClass;copyWithIndex($index)\\\" ng-repeat-start=\\\"item in modelArray track by $index\\\" schema-form-array-items=\\\"\\\"><md-button flex-order=\\\"2\\\" ng-hide=\\\"form.readonly || form.remove === null\\\" ng-click=\\\"deleteFromArray($index)\\\" class=\\\"md-icon-button\\\" aria-label=\\\"Delete\\\"><md-tooltip>删除</md-tooltip><md-icon><ng-md-icon icon=\\\"close-circle-outline\\\"></ng-md-icon></md-icon></md-button></md-list-item><md-divider ng-repeat-end=\\\"\\\"></md-divider></md-list></md-content><md-input-container style=\\\"margin-top:0;\\\" class=\\\"md-block\\\" md-is-error=\\\"ngModel.$error && ngModel.$invalid\\\"><div ng-messages=\\\"ngModel.$error\\\" aria-live=\\\"assertive\\\"><div sf-message=\\\"\\\" ng-message=\\\"\\\"></div></div><div class=\\\"hint md-char-counter\\\" ng-if=\\\"form.showHints\\\" ng-bind=\\\"form.description\\\"></div></md-input-container></div>\");\n$templateCache.put(\"decorators/material/autocomplete.html\",\"<md-input-container class=\\\"form-group no-errors schema-form-autocomplete {{form.htmlClass}}\\\" md-is-error=\\\"ngModel.$error && ngModel.$invalid\\\" sf-layout=\\\"\\\"><md-autocomplete flex=\\\"\\\" style=\\\"height: 48px;\\\" ng-disabled=\\\"form.readonly\\\" ng-model=\\\"$$value$$\\\" sf-autocomplete=\\\"\\\" sf-field-model=\\\"replaceAll\\\" ng-init=\\\"autoData={};form.init($$value$$,autoData,arrayIndex)\\\" md-no-cache=\\\"form.noCache\\\" md-selected-item=\\\"autoData.selected\\\" md-search-text=\\\"autoData.searchText\\\" md-selected-item-change=\\\"form.onChange(item, form, model, modelArray, arrayIndex)\\\" md-items=\\\"item in form.query(autoData.searchText,modelArray,arrayIndex,$parent)\\\" md-item-text=\\\"item[form.textField]\\\" md-floating-label=\\\"{{ form.title }}\\\" placeholder=\\\"{{ form.placeholder }}\\\" md-menu-class=\\\"autocomplete-custom-template\\\"><md-item-template><span md-highlight-text=\\\"searchText\\\">{{item.name}}</span></md-item-template><md-not-found>No matches found</md-not-found></md-autocomplete><input class=\\\"ng-hide\\\" name=\\\"{{::form.key|sfCamelKey}}\\\" sf-changed=\\\"form\\\" sf-field-model=\\\"\\\" schema-validate=\\\"form\\\"><div ng-messages=\\\"ngModel.$error\\\" aria-live=\\\"assertive\\\"><div sf-message=\\\"\\\" ng-message=\\\"\\\"></div></div><div class=\\\"hint md-char-counter\\\" ng-if=\\\"form.showHints\\\" ng-bind=\\\"form.description\\\"></div></md-input-container>\");\n$templateCache.put(\"decorators/material/card-content.html\",\"<md-card-content class=\\\"schema-form-card-content {{form.htmlClass}}\\\"></md-card-content>\");\n$templateCache.put(\"decorators/material/card.html\",\"<md-card class=\\\"schema-form-card {{form.htmlClass}}\\\"></md-card>\");\n$templateCache.put(\"decorators/material/checkbox.html\",\"<md-input-container class=\\\"checkbox schema-form-checkbox {{::form.htmlClass}}\\\" md-is-error=\\\"!$root.isEmptyObject(ngModel.$error)\\\"><md-checkbox sf-field-model=\\\"\\\" ng-model=\\\"$$value$$\\\" ng-disabled=\\\"form.readonly\\\" schema-validate=\\\"form\\\" sf-changed=\\\"form\\\" ng-model-options=\\\"form.ngModelOptions\\\" ng-true-value=\\\"{{form.trueValue || true}}\\\" ng-false-value=\\\"{{form.falseValue || false}}\\\" ng-class=\\\"form.fieldHtmlClass\\\" name=\\\"{{::form.key|sfCamelKey}}\\\" aria-label=\\\"{{::form.title}}\\\"><span>{{::form.title}}</span></md-checkbox><div ng-messages=\\\"ngModel.$error\\\" class=\\\"md-input-messages-animation\\\"><div sf-message=\\\"\\\" ng-message=\\\"\\\"></div></div><div class=\\\"md-char-counter\\\">{{ form.description }}</div></md-input-container>\");\n$templateCache.put(\"decorators/material/checkboxes.html\",\"<div sf-array=\\\"form\\\" sf-field-model=\\\"\\\" class=\\\"form-group schema-form-checkboxes {{::form.htmlClass}}\\\" ng-class=\\\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\\\" sf-messages=\\\"\\\"><label class=\\\"control-label\\\" ng-show=\\\"showTitle()\\\">{{::form.title}}</label><div class=\\\"checkbox\\\" ng-repeat=\\\"val in titleMapValues track by $index\\\"><md-checkbox ng-model=\\\"titleMapValues[$index]\\\" sf-changed=\\\"form\\\" ng-disabled=\\\"::form.readonly\\\" name=\\\"{{::form.key|sfCamelKey}}\\\" ng-true-value=\\\"true\\\" ng-false-value=\\\"false\\\" aria-label=\\\"{{::form.title}}\\\">{{::form.titleMap[$index].name}}</md-checkbox></div></div>\");\n$templateCache.put(\"decorators/material/chips.html\",\"<md-input-container class=\\\"form-group schema-form-chips {{form.htmlClass}}\\\" sf-field-model=\\\"sf-new-array\\\" sf-new-array=\\\"\\\" md-no-float=\\\"true\\\" md-is-error=\\\"ngModel.$error && ngModel.$invalid\\\"><md-chips sf-field-model=\\\"\\\" schema-form-array-items=\\\"\\\" readonly=\\\"form.readonly\\\" class=\\\"no-errors\\\" name=\\\"{{::form.key|sfCamelKey}}\\\" placeholder=\\\"{{::form.title}}\\\"><md-chip-template><strong ng-if=\\\"!form.template\\\">{{$chip}}</strong></md-chip-template></md-chips><div class=\\\"errors\\\" ng-model=\\\"modelArray\\\" schema-validate=\\\"form\\\" ng-messages=\\\"ngModel.$error\\\" aria-live=\\\"assertive\\\"><div sf-message=\\\"\\\" ng-message=\\\"\\\"></div></div><div class=\\\"hint md-char-counter\\\" ng-if=\\\"form.showHints\\\" ng-bind=\\\"form.description\\\"></div></md-input-container>\");\n$templateCache.put(\"decorators/material/date.html\",\"<div class=\\\"schema-form-date {{::form.htmlClass}}\\\"><label ng-show=\\\"showTitle()\\\" for=\\\"{{::form.key|sfCamelKey}}\\\">{{::form.title}}</label><md-datepicker sf-field-model=\\\"\\\" sf-changed=\\\"form\\\" schema-validate=\\\"form\\\" sf-type-parser=\\\"form.schema\\\" id=\\\"{{::form.key|sfCamelKey}}\\\" ng-show=\\\"::form.key\\\" ng-class=\\\"::form.fieldHtmlClass\\\" ng-disabled=\\\"::form.readonly\\\" md-placeholder=\\\"Enter date\\\" sf-messages=\\\"\\\"></md-datepicker></div>\");\n$templateCache.put(\"decorators/material/default.html\",\"<md-input-container class=\\\"schema-form-{{::form.type}} {{::form.htmlClass}}\\\" md-is-error=\\\"hasError()\\\" sf-layout=\\\"\\\" sf-material-class=\\\"md-input-has-value\\\"><label ng-show=\\\"showTitle()\\\" for=\\\"{{::form.key|sfCamelKey}}\\\">{{::form.title}}</label><md-icon ng-if=\\\"form.icon\\\"><ng-md-icon icon=\\\"{{ form.icon.leftIcon }}\\\" ng-style=\\\"form.icon.style\\\"></ng-md-icon></md-icon><input sf-field-model=\\\"\\\" type=\\\"{{::form.type}}\\\" step=\\\"any\\\" ng-model=\\\"$$value$$\\\" sf-changed=\\\"form\\\" placeholder=\\\"{{form.placeholder}}\\\" id=\\\"{{::form.key|sfCamelKey}}\\\" ng-class=\\\"::form.fieldHtmlClass\\\" ng-disabled=\\\"::form.readonly\\\" schema-validate=\\\"form\\\" name=\\\"{{::form.key|sfCamelKey}}\\\" aria-describedby=\\\"{{::form.key|sfCamelKey}}Status\\\"><div ng-messages=\\\"ngModel.$error\\\" aria-live=\\\"assertive\\\"><div sf-message=\\\"\\\" ng-message=\\\"\\\"></div></div><div class=\\\"hint md-char-counter\\\" ng-if=\\\"form.showHints\\\" ng-bind=\\\"form.description\\\"></div></md-input-container>\");\n$templateCache.put(\"decorators/material/fieldset-trcl.html\",\"<fieldset ng-disabled=\\\"form.readonly\\\" class=\\\"standard {{form.htmlClass}}\\\" flex=\\\"\\\"><legend ng-show=\\\"form.title\\\">{{ form.title }}</legend><div ng-transclude=\\\"\\\"></div></fieldset>\");\n$templateCache.put(\"decorators/material/fieldset.html\",\"<fieldset ng-disabled=\\\"form.readonly\\\" class=\\\"standard {{form.htmlClass}}\\\" flex=\\\"\\\"><legend ng-show=\\\"form.title\\\">{{ form.title }}</legend></fieldset>\");\n$templateCache.put(\"decorators/material/help.html\",\"<div class=\\\"helpvalue schema-form-helpvalue {{form.htmlClass}}\\\" ng-bind-html=\\\"form.helpvalue\\\"></div>\");\n$templateCache.put(\"decorators/material/radio-buttons.html\",\"<div class=\\\"form-group schema-form-radiobuttons {{form.htmlClass}}\\\" ng-class=\\\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\\\" sf-layout=\\\"\\\" sf-messages=\\\"\\\"><div><label class=\\\"control-label\\\" ng-show=\\\"showTitle()\\\">{{form.title}}</label></div><section layout=\\\"row\\\" layout-sm=\\\"column\\\" layout-align=\\\"center center\\\"><md-input-container ng-repeat=\\\"item in form.titleMap\\\"><md-button type=\\\"button\\\" class=\\\"group md-raised\\\" sf-field-model=\\\"replaceAll\\\" ng-model=\\\"$$value$$\\\" sf-changed=\\\"form\\\" ng-class=\\\"{\\'md-primary\\': ($$value$$ == item.value)}\\\" ng-disabled=\\\"form.readonly\\\" ng-model-options=\\\"form.ngModelOptions\\\" schema-validate=\\\"form\\\" ng-value=\\\"item.value\\\" ng-click=\\\"$$value$$ = item.value\\\" name=\\\"{{form.key.join(\\'.\\')}}\\\"><span ng-bind-html=\\\"item.name\\\"></span></md-button></md-input-container></section></div>\");\n$templateCache.put(\"decorators/material/radios-inline.html\",\"<div class=\\\"form-group schema-form-radios-inline {{form.htmlClass}}\\\" ng-class=\\\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\\\" sf-layout=\\\"\\\" sf-messages=\\\"\\\"><label class=\\\"control-label\\\" ng-show=\\\"showTitle()\\\">{{form.title}}</label><md-radio-group layout=\\\"row\\\" sf-field-model=\\\"replaceAll\\\" ng-model=\\\"$$value$$\\\" class=\\\"{{form.fieldHtmlClass}}\\\" ng-class=\\\"{ active: item.value === $$value$$ }\\\" sf-changed=\\\"form\\\" schema-validate=\\\"form\\\" ng-disabled=\\\"form.readonly\\\" name=\\\"{{form.key.join(\\'.\\')}}\\\"><md-radio-button ng-repeat=\\\"item in form.titleMap\\\" ng-value=\\\"item.value\\\"><span ng-bind-html=\\\"item.name\\\"></span></md-radio-button></md-radio-group></div>\");\n$templateCache.put(\"decorators/material/radios.html\",\"<div class=\\\"form-group schema-form-radios {{form.htmlClass}}\\\" ng-class=\\\"{\\'has-error\\': hasError(), \\'has-success\\': hasSuccess()}\\\"><label class=\\\"control-label\\\" ng-show=\\\"showTitle()\\\" aria-label=\\\"{{form.title}}\\\" layout=\\\"row\\\">{{form.title}} {{form.titleMap | json}}</label><div><md-radio-group sf-field-model=\\\"\\\" sf-changed=\\\"form\\\" ng-disabled=\\\"form.readonly\\\" name=\\\"{{form.key.join(\\'.\\')}}\\\" sf-layout=\\\"\\\" sf-messages=\\\"\\\"><md-radio-button ng-repeat=\\\"item in form.titleMap\\\" ng-value=\\\"item.value\\\" class=\\\"{{form.fieldHtmlClass}}\\\" sf-field-model=\\\"ng-class\\\" ng-class=\\\"{ active: item.value === $$value$$ }\\\"><span ng-bind-html=\\\"item.name\\\"></span></md-radio-button></md-radio-group></div></div>\");\n$templateCache.put(\"decorators/material/section.html\",\"<md-content class=\\\"schema-form-section {{::form.htmlClass}}\\\" sf-layout=\\\"\\\"></md-content>\");\n$templateCache.put(\"decorators/material/select.html\",\"<md-input-container class=\\\"form-group {{::form.htmlClass}} schema-form-select\\\" md-is-error=\\\"ngModel.$error && ngModel.$invalid\\\" sf-layout=\\\"\\\" sf-material-class=\\\"md-input-has-value\\\"><label ng-show=\\\"::showTitle()\\\">{{::form.title}}</label><md-select sf-field-model=\\\"\\\" schema-validate=\\\"form\\\"><md-optgroup ng-repeat-start=\\\"(key, opt) in form.getOptions(form, evalExpr) | orderBy:\\'group\\' as optGroups\\\" ng-if=\\\"opt.group && opt.group != optGroups[key-1].group\\\" label=\\\"{{::opt.group}}\\\" aria-label=\\\"{{::opt.group}}\\\"><md-option ng-repeat=\\\"(key, filtered) in form.getOptions(form, evalExpr) | filter: {group: opt.group} | orderBy:\\'name\\' as opts\\\" ng-value=\\\"::filtered.value\\\" aria-label=\\\"{{::filtered.name}}\\\">{{::filtered.name}}</md-option></md-optgroup><md-option ng-if=\\\"!opt.group\\\" ng-value=\\\"::opt.value\\\" ng-repeat-end=\\\"\\\">{{::opt.name}}</md-option></md-select><div ng-messages=\\\"ngModel.$error\\\" aria-live=\\\"assertive\\\"><div sf-message=\\\"\\\" ng-message=\\\"\\\"></div></div><div class=\\\"hint md-char-counter\\\" ng-if=\\\"form.showHints\\\" ng-bind=\\\"form.description\\\"></div></md-input-container>\");\n$templateCache.put(\"decorators/material/slider.html\",\"<md-input-container class=\\\"schema-form-slider {{form.htmlClass}}\\\"><label ng-show=\\\"showTitle()\\\" for=\\\"{{::form.key|sfCamelKey}}\\\">{{::form.title}}</label><md-slider sf-field-model=\\\"\\\" flex=\\\"\\\" id=\\\"{{::form.key|sfCamelKey}}\\\" min=\\\"0\\\" max=\\\"255\\\" aria-label=\\\"blue\\\"></md-slider></md-input-container>\");\n$templateCache.put(\"decorators/material/submit.html\",\"<section class=\\\"schema-form-submit {{form.htmlClass}}\\\" sf-messages=\\\"\\\"><md-button class=\\\"md-raised {{ form.style || \\'md-primary\\' }} {{form.fieldHtmlClass}}\\\" type=\\\"{{::form.type}}\\\" ng-disabled=\\\"form.readonly\\\" aria-label=\\\"{{::form.title}}\\\"><md-tooltip ng-if=\\\"::form.tip\\\">{{::form.tip}}</md-tooltip>{{::form.title}}</md-button></section>\");\n$templateCache.put(\"decorators/material/switch.html\",\"<md-input-container class=\\\"schema-form-switch {{::form.htmlClass}}\\\"><md-switch sf-field-model=\\\"\\\" sf-changed=\\\"form\\\" sf-type-parser=\\\"form.schema\\\" sf-messages=\\\"\\\" schema-validate=\\\"form\\\" id=\\\"{{::form.key|sfCamelKey}}\\\" aria-label=\\\"{{form.title}}\\\" ng-show=\\\"::form.key\\\" ng-class=\\\"form.fieldHtmlClass\\\" ng-disabled=\\\"::form.readonly\\\"><span ng-show=\\\"showTitle()\\\" for=\\\"{{::form.key|sfCamelKey}}\\\">{{::form.title}}</span></md-switch></md-input-container>\");\n$templateCache.put(\"decorators/material/tabarray.html\",\"<div class=\\\"schema-form-array {{form.htmlClass}}\\\" sf-field-model=\\\"sf-new-array\\\" sf-new-array=\\\"\\\"><md-toolbar class=\\\"md-warn\\\"><div class=\\\"md-toolbar-tools\\\"><h2 flex=\\\"\\\">{{ ::form.title }}</h2><md-button ng-hide=\\\"form.readonly || form.add === null\\\" ng-click=\\\"appendToArray()\\\" class=\\\"md-icon-button {{ form.style.add || \\'btn-default\\' }}\\\"><md-tooltip>新增</md-tooltip><md-icon><ng-md-icon icon=\\\"add_circle_outline\\\"></ng-md-icon></md-icon></md-button><md-button ng-hide=\\\"form.readonly || form.del === null\\\" ng-click=\\\"deleteFromArray(form.selectedIndex)\\\" class=\\\"md-icon-button {{ form.style.del || \\'btn-default\\' }}\\\"><md-tooltip>删除</md-tooltip><md-icon><ng-md-icon icon=\\\"close-circle-outline\\\"></ng-md-icon></md-icon></md-button></div></md-toolbar><md-tabs md-selected=\\\"form.selectedIndex\\\" md-dynamic-height=\\\"\\\" md-border-bottom=\\\"\\\" md-autoselect=\\\"\\\"><md-tab ng-repeat=\\\"item in modelArray track by $index\\\" ng-disabled=\\\"item.disabled\\\" label=\\\"{{ (form.title + ($index+1)) || item.title}}\\\"><div class=\\\"tab{{$index%4}}\\\" layout-padding=\\\"\\\" schema-form-array-items=\\\"\\\" ng-init=\\\"copyWithIndex($index)\\\"></div></md-tab></md-tabs></div>\");\n$templateCache.put(\"decorators/material/tabs.html\",\"<div sf-field-model=\\\"\\\" class=\\\"schema-form-tabs {{::form.htmlClass}}\\\"><md-tabs md-dynamic-height=\\\"\\\" md-selected=\\\"selected\\\" md-autoselect=\\\"\\\" ng-init=\\\"selected = 0\\\"></md-tabs></div>\");\n$templateCache.put(\"decorators/material/textarea.html\",\"<md-input-container class=\\\"{{::form.htmlClass}} schema-form-textarea\\\" sf-layout=\\\"\\\" md-is-error=\\\"ngModel.$error && ngModel.$invalid\\\"><label ng-show=\\\"showTitle()\\\" for=\\\"{{::form.key|sfCamelKey}}\\\">{{::form.title}}</label> <textarea ng-class=\\\"::form.fieldHtmlClass\\\" id=\\\"{{::form.key|sfCamelKey}}\\\" sf-changed=\\\"form\\\" ng-disabled=\\\"::form.readonly\\\" sf-field-model=\\\"\\\" schema-validate=\\\"form\\\" name=\\\"{{::form.key|sfCamelKey}}\\\"></textarea><div ng-messages=\\\"ngModel.$error\\\" aria-live=\\\"assertive\\\"><div sf-message=\\\"\\\" ng-message=\\\"\\\"></div></div><div class=\\\"hint md-char-counter\\\" ng-if=\\\"form.showHints\\\" ng-bind=\\\"form.description\\\"></div></md-input-container>\");}]);\nangular.module('schemaForm').directive('sfMaterialClass', [\"$compile\", \"$timeout\", function ($compile, $timeout) {\n    return {\n        restrict: 'A',\n        scope: false,\n        link: function (scope, element, attrs, ngModel) {\n            function reduceHelper(obj, i) {\n                return obj[i]\n            }\n\n            var modelValue;\n\n            try {\n                if (scope.item) {\n                    modelValue = scope.form.key.slice(scope.form.key.length - 1).reduce(reduceHelper, scope.item || scope.model);\n                } else {\n                    modelValue = scope.form.key.reduce(reduceHelper, scope.model);\n                }\n            } catch (e) {\n                modelValue = undefined;\n            }\n\n            // Element class is not set in DOM if executed immediately.\n            // I don't understand exactly why but it's probably related to other directive job.\n            $timeout(function () {\n                if (modelValue !== null && typeof modelValue !== 'undefined' && modelValue !== false) {\n                    element.addClass(attrs.sfMaterialClass);\n                }\n            }, 0);\n        }\n    };\n}]);\n(function (angular, undefined) {\n    'use strict';\n    angular\n        .module('schemaForm')\n        .config(materialDecoratorConfig)\n        .directive('sfmExternalOptions', sfmExternalOptionsDirective)\n        .filter('sfCamelKey', sfCamelKeyFilter);\n\n    materialDecoratorConfig.$inject = [\n        'schemaFormProvider', 'schemaFormDecoratorsProvider', 'sfBuilderProvider', 'sfPathProvider', '$injector'\n    ];\n\n    function materialDecoratorConfig(schemaFormProvider, decoratorsProvider, sfBuilderProvider, sfPathProvider, $injector) {\n        var base = 'decorators/material/';\n\n        var simpleTransclusion = sfBuilderProvider.builders.simpleTransclusion;\n        var ngModelOptions = sfBuilderProvider.builders.ngModelOptions;\n        var ngModel = sfBuilderProvider.builders.ngModel;\n        var sfField = sfBuilderProvider.builders.sfField;\n        var condition = sfBuilderProvider.builders.condition;\n        var array = sfBuilderProvider.builders.array;\n\n        var sfLayout = sfLayout;\n        var sfMessagesNode = sfMessagesNodeHandler();\n        var sfMessages = sfMessagesBuilder;\n        var sfOptions = sfOptionsBuilder;\n        var mdAutocomplete = mdAutocompleteBuilder;\n        var mdSwitch = mdSwitchBuilder;\n        var mdDatepicker = mdDatepickerBuilder;\n        var mdTabs = mdTabsBuilder;\n        var textarea = textareaBuilder;\n\n        var core = [sfField, ngModel, ngModelOptions, condition, sfLayout];\n        var defaults = core.concat(sfMessages);\n        var arrays = core.concat(array);\n        // var arrays = core;\n\n        schemaFormProvider.defaults.string.unshift(dateDefault);\n\n        decoratorsProvider.defineDecorator('materialDecorator', {\n            actions: {template: base + 'actions.html', builder: [sfField, simpleTransclusion, condition]},\n            array: {template: base + 'array.html', builder: arrays},\n            autocomplete: {template: base + 'autocomplete.html', builder: defaults.concat(mdAutocomplete)},\n            boolean: {template: base + 'checkbox.html', builder: defaults},\n            button: {template: base + 'submit.html', builder: defaults},\n            checkbox: {template: base + 'checkbox.html', builder: defaults},\n            checkboxes: {template: base + 'checkboxes.html', builder: arrays},\n            date: {template: base + 'date.html', builder: defaults.concat(mdDatepicker)},\n            'default': {template: base + 'default.html', builder: defaults},\n            fieldset: {template: base + 'fieldset.html', builder: [sfField, simpleTransclusion, condition]},\n            help: {template: base + 'help.html', builder: defaults},\n            number: {template: base + 'default.html', builder: defaults},\n            password: {template: base + 'default.html', builder: defaults},\n            radios: {template: base + 'radios.html', builder: defaults},\n            'radios-inline': {template: base + 'radios-inline.html', builder: defaults},\n            radiobuttons: {template: base + 'radio-buttons.html', builder: defaults},\n            section: {\n                template: base + 'section.html',\n                builder: [sfField, simpleTransclusion, condition, sfLayout, ngModel]\n            },\n            select: {template: base + 'select.html', builder: defaults.concat(sfOptions)},\n            submit: {template: base + 'submit.html', builder: defaults},\n            tabs: {template: base + 'tabs.html', builder: [sfField, mdTabs, condition]},\n            tabarray: {template: base + 'tabarray.html', builder: arrays},\n            textarea: {template: base + 'textarea.html', builder: defaults.concat(textarea)},\n            switch: {template: base + 'switch.html', builder: defaults.concat(mdSwitch)},\n            chips: {template: base + 'chips.html', builder: defaults.concat([])},\n        });\n\n        function sfLayout(args) {\n            var layoutDiv = args.fieldFrag.querySelector('[sf-layout]');\n\n            if (layoutDiv && args.form.grid) {\n                Object.getOwnPropertyNames(args.form.grid).forEach(function (property, idx, array) {\n                    layoutDiv.setAttribute(property, args.form.grid[property]);\n                });\n            }\n        };\n\n        function sfMessagesNodeHandler() {\n            var html = '<div ng-if=\"ngModel.$invalid\" ng-messages=\"{dummy: true}\" class=\"ng-active\">' +\n                '<div ng-message=\"dummy\" class=\"md-input-message-animation\" sf-message=\"form.description\"></div></div>';\n            var div = document.createElement('div');\n            div.innerHTML = html;\n            return div.firstChild;\n        };\n\n        function sfMessagesBuilder(args) {\n            var messagesDiv = args.fieldFrag.querySelector('[sf-messages]');\n            if (messagesDiv && sfMessagesNode) {\n                var child = sfMessagesNode.cloneNode(true);\n                messagesDiv.appendChild(child);\n            }\n        };\n\n        function textareaBuilder(args) {\n            var textareaFrag = args.fieldFrag.querySelector('textarea');\n            var maxLength = args.form.maxlength || false;\n            if (textareaFrag && maxLength) {\n                textareaFrag.setAttribute('md-maxlength', maxLength);\n            }\n        };\n\n        function mdAutocompleteBuilder(args) {\n            var mdAutocompleteFrag = args.fieldFrag.querySelector('md-autocomplete');\n            var minLength = args.form.minLength || 1;\n            var maxLength = args.form.maxLength || false;\n            var title = args.form.title || args.form.placeholder || args.form.key.slice(-1)[0];\n\n            if (mdAutocompleteFrag) {\n                if (args.form.onChange) {\n                    mdAutocompleteFrag.setAttribute('md-selected-item-change', 'args.form.onChange()');\n                    mdAutocompleteFrag.setAttribute('md-search-text-change', 'args.form.onChange(searchText)');\n                }\n\n                // mdAutocompleteFrag.setAttribute('md-items', 'item in $filter(''autocomplete'')(searchText);');\n                mdAutocompleteFrag.setAttribute('md-min-length', minLength);\n                if (maxLength) {\n                    mdAutocompleteFrag.setAttribute('md-max-length', maxLength);\n                }\n\n                if (title) {\n                    mdAutocompleteFrag.setAttribute('md-floating-label', title);\n                }\n            }\n        };\n\n        function mdSwitchBuilder(args) {\n            var mdSwitchFrag = args.fieldFrag.querySelector('md-switch');\n            if (args.form.schema.titleMap) {\n                mdSwitchFrag.setAttribute('ng-true-value', args.form.schema.titleMap.true);\n                mdSwitchFrag.setAttribute('ng-false-value', args.form.schema.titleMap.false);\n            }\n        };\n\n        function sfOptionsBuilder(args) {\n            var mdSelectFrag = args.fieldFrag.querySelector('md-select');\n            var enumTitleMap = [];\n            var i;\n            var mdSelectFrag;\n\n            args.form.selectOptions = [];\n            args.form.getOptions = getOptionsHandler;\n\n            if (args.form.schema.links && (typeof args.form.schema.links) === 'object') {\n                var link;\n                var related = /({)([^}]*)(})/gm;\n                var source = /{{([^}]*)}}/gm;\n                var matched;\n\n                for (i = 0; i < args.form.schema.links.length; i++) {\n                    link = args.form.schema.links[i];\n                    if (link.rel === 'options') {\n                        // TODO enable filter to allow processing results\n                        // args.form.optionSource = link.href.replace(related, '$1$1 model.$2 | _externalOptionUri $3$3');\n                        args.form.optionSource = link.href.replace(related, '$1$1 model.$2 $3$3');\n                    }\n                }\n\n                mdSelectFrag.setAttribute('sfm-external-options', args.form.optionSource);\n            }\n            else {\n                args.form.selectOptions = sfOptionsProcessor(args.form);\n            }\n        };\n\n        function mdDatepickerBuilder(args) {\n            var mdDatepickerFrag = args.fieldFrag.querySelector('md-datepicker');\n            if (mdDatepickerFrag) {\n                if (args.form.onChange) {\n                    mdDatepickerFrag.setAttribute('ng-change', 'args.form.onChange(searchText)');\n                }\n                // mdDatepickerFrag.setAttribute('md-items', 'item in $filter(''autocomplete'')(searchText);');\n                var minDate = args.form.minimum || false;\n                var maxDate = args.form.maximum || false;\n                if (minDate) {\n                    mdDatepickerFrag.setAttribute('md-min-date', minDate);\n                }\n                if (maxDate) {\n                    mdDatepickerFrag.setAttribute('md-max-date', maxDate);\n                }\n            }\n        };\n\n        function mdTabsBuilder(args) {\n            if (args.form.tabs && args.form.tabs.length > 0) {\n                var mdTabsFrag = args.fieldFrag.querySelector('md-tabs');\n\n                args.form.tabs.forEach(function (tab, index) {\n                    var mdTab = document.createElement('md-tab');\n                    mdTab.setAttribute('label', '{{' + args.path + '.tabs[' + index + '].title}}');\n                    var mdTabBody = document.createElement('md-tab-body');\n                    var childFrag = args.build(tab.items, args.path + '.tabs[' + index + '].items', args.state);\n                    mdTabBody.appendChild(childFrag);\n                    mdTab.appendChild(mdTabBody);\n                    mdTabsFrag.appendChild(mdTab);\n                });\n            }\n        };\n\n        /**\n         * Material Datepicker\n         */\n        function dateDefault(name, schema, options) {\n            if (schema.type === 'string' && (schema.format === 'date' || schema.format === 'date-time')) {\n                var f = schemaFormProvider.stdFormObj(name, schema, options);\n                f.key = options.path;\n                f.type = 'date';\n                options.lookup[sfPathProvider.stringify(options.path)] = f;\n                return f;\n            }\n        };\n    };\n\n    function getOptionsHandler(form, evalExpr) {\n        if (form.optionData) {\n            return evalExpr(form.optionData);\n        }\n\n        if (form.selectOptions) {\n            return form.selectOptions;\n        }\n\n        return [];\n    }\n\n    function sfOptionsProcessor(data) {\n        var enumTitleMap = [];\n\n        if (data.titleMap) {\n            return data.titleMap;\n        }\n        else if (data.enum && data.enum.length) {\n            for (var i = 0; i < data.enum.length; i++) {\n                if (data.enum[i] && data.enum[i].length) {\n                    enumTitleMap.push({name: data.enum[i], value: data.enum[i]});\n                }\n            }\n        }\n\n        return enumTitleMap;\n    }\n\n    sfmExternalOptionsDirective.$inject = ['$http'];\n\n    function sfmExternalOptionsDirective($http) {\n        var directive = {\n            link: link,\n            restrict: 'A'\n        };\n\n        return directive;\n\n        function link(scope, element, attrs) {\n            attrs.$observe('sfmExternalOptions', function (dataURI) {\n                $http.get(dataURI)\n                    .then(function (response) {\n                        scope.form.selectOptions = sfOptionsProcessor(response.data);\n                    });\n            });\n        }\n    }\n\n    /**\n     * sfCamelKey Filter\n     */\n    function sfCamelKeyFilter() {\n        return function (formKey) {\n            if (!formKey) {\n                return '';\n            }\n            var part, i, key;\n            key = formKey.slice();\n            for (i = 0; i < key.length; i++) {\n                part = key[i].toString().toLowerCase().split('');\n                if (i && part.length) {\n                    part[0] = part[0].toUpperCase();\n                }\n                key[i] = part.join('');\n            }\n\n            return key.join('');\n        };\n    };\n\n})(angular, undefined);\n/*\n TODO add default filter for autocomplete which allows form.optionFilter or 'autocompleteFilter' to override\n Something along the following lines...\n if ($injector.has('autocompleteFilter')) {\n result = $filter('autocomplete')(input);\n }\n else\n if ($injector.has(args.form.optionFilter + 'Filter')) {\n result = $filter(args.form.optionFilter)(input);\n }\n else {\n if (args.form.optionFilter) {\n mdAutocomplete.setAttribute('md-items',\n 'item in evalExpr(\"this[\\\"\"+form.optionFilter+\"\\\"](\\\"\"+searchText+\"\\\")\")');\n }\n }\n\n .filter('autocompleteMovieTest', function() {\n function autocompleteMovieTestFilter(array, input){\n var current = input;\n // You could also call multiple filters here using:\n // current = $filter('filterName')(input)\n if(typeof current === 'string') {\n current = current.replace(' ','-').toLowerCase();\n }\n current = (!current) ? '_undefined' : current;\n return current;\n }\n\n return externalOptionUriFilter;\n })\n */\n\n/**\n * It might be a bug, but currently input[type=number] does not add\n * a parser, so the model gets populated with a string. It does however stop non numbers so it\n * must have some preproccessing. Anyway, this adds parser before schema-validate hooks into it.\n * FIXME: this is still not a complete solution. Inputting a string in an input[type=number] results\n * in parsers never firing and ngModel value removed. So no validation from schema-validate either.\n */\nangular.module('schemaForm').directive('sfTypeParser', function() {\n  return {\n    restrict: 'A',\n    scope: false,\n    require: 'ngModel',\n    link: function(scope, element, attrs, ngModel) {\n      var once = scope.$watch(attrs.sfTypeParser, function(schema) {\n        if (!schema) {\n          return;\n        }\n\n        var isNumber  = schema.type.indexOf('number') !== -1;\n        var isInteger = schema.type.indexOf('integer') !== -1;\n        var numberRE  = /^[0-9]*$/;\n        // Use index of since type can be either an array with two values or a string.\n        if (isNumber || isInteger) {\n          // The timing here seems to work. i.e. we get in before schema-validate\n          ngModel.$parsers.push(function(viewValue) {\n            var value;\n            if (isNumber) {\n              value = parseFloat(viewValue);\n            } else if (numberRE.test(viewValue)) {\n              // We test the value to check that it's a valid integer, otherwise we can easily\n              // get float -> integer parsing behind the scenes.\n              value = parseInt(viewValue, 10);\n            }\n            console.log('parser', numberRE.test(viewValue), viewValue, value)\n            if (value === undefined || isNaN(value)) {\n              //Let the validation fail. @FIXME: it fails with \"required\" for some reason.\n              return viewValue;\n            }\n            return value;\n          });\n        }\n\n        once();\n      });\n    }\n  };\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/directives/angular-schema-form-material/material-decorator.js\n ** module id = 71\n ** module chunks = 0\n **/"],"sourceRoot":""}